[
  {
    "objectID": "session_7/Panel_data.html",
    "href": "session_7/Panel_data.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Our goal here, is to redo some of the analysis from:\nF. Vella and M. Verbeek (1998), “Whose Wages Do Unions Raise? A Dynamic Model of Unionism and Wage Rate Determination for Young Men,” Journal of Applied Econometrics 13, 163-183.\nImport the dataset wage_panel from linearmodels.datasets. Describe it and make sure it is in a format suitable for panel data analysis. Show graphically the decrease in unionization over the period.\n\nfrom linearmodels.datasets import wage_panel\n\n\ndf = wage_panel.load()\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      nr\n      year\n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n  \n  \n    \n      0\n      13\n      1980\n      0\n      1\n      0\n      2672\n      0\n      14\n      0\n      1.197540\n      1\n      9\n    \n    \n      1\n      13\n      1981\n      0\n      2\n      0\n      2320\n      0\n      14\n      1\n      1.853060\n      4\n      9\n    \n    \n      2\n      13\n      1982\n      0\n      3\n      0\n      2940\n      0\n      14\n      0\n      1.344462\n      9\n      9\n    \n    \n      3\n      13\n      1983\n      0\n      4\n      0\n      2960\n      0\n      14\n      0\n      1.433213\n      16\n      9\n    \n    \n      4\n      13\n      1984\n      0\n      5\n      0\n      3071\n      0\n      14\n      0\n      1.568125\n      25\n      5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4355\n      12548\n      1983\n      0\n      8\n      0\n      2080\n      1\n      9\n      0\n      1.591879\n      64\n      5\n    \n    \n      4356\n      12548\n      1984\n      0\n      9\n      0\n      2080\n      1\n      9\n      1\n      1.212543\n      81\n      5\n    \n    \n      4357\n      12548\n      1985\n      0\n      10\n      0\n      2080\n      1\n      9\n      0\n      1.765962\n      100\n      5\n    \n    \n      4358\n      12548\n      1986\n      0\n      11\n      0\n      2080\n      1\n      9\n      1\n      1.745894\n      121\n      5\n    \n    \n      4359\n      12548\n      1987\n      0\n      12\n      0\n      3380\n      1\n      9\n      1\n      1.466543\n      144\n      5\n    \n  \n\n4360 rows × 12 columns\n\n\n\nColumn nr corresponds to the individual number. Column year corresponds to observation date. We need two set these two columns as a hierarchical index (so that first index corresponds to nr and the second one corresponds to year)\n\ndf.set_index([\"nr\", \"year\"], inplace=True)\ndf\n\n\n\n\n\n  \n    \n      \n      \n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n    \n      nr\n      year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      13\n      1980\n      0\n      1\n      0\n      2672\n      0\n      14\n      0\n      1.197540\n      1\n      9\n    \n    \n      1981\n      0\n      2\n      0\n      2320\n      0\n      14\n      1\n      1.853060\n      4\n      9\n    \n    \n      1982\n      0\n      3\n      0\n      2940\n      0\n      14\n      0\n      1.344462\n      9\n      9\n    \n    \n      1983\n      0\n      4\n      0\n      2960\n      0\n      14\n      0\n      1.433213\n      16\n      9\n    \n    \n      1984\n      0\n      5\n      0\n      3071\n      0\n      14\n      0\n      1.568125\n      25\n      5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      12548\n      1983\n      0\n      8\n      0\n      2080\n      1\n      9\n      0\n      1.591879\n      64\n      5\n    \n    \n      1984\n      0\n      9\n      0\n      2080\n      1\n      9\n      1\n      1.212543\n      81\n      5\n    \n    \n      1985\n      0\n      10\n      0\n      2080\n      1\n      9\n      0\n      1.765962\n      100\n      5\n    \n    \n      1986\n      0\n      11\n      0\n      2080\n      1\n      9\n      1\n      1.745894\n      121\n      5\n    \n    \n      1987\n      0\n      12\n      0\n      3380\n      1\n      9\n      1\n      1.466543\n      144\n      5\n    \n  \n\n4360 rows × 10 columns\n\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n  \n  \n    \n      count\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n    \n    \n      mean\n      0.115596\n      6.514679\n      0.155963\n      2191.257339\n      0.438991\n      11.766972\n      0.244037\n      1.649147\n      50.424771\n      4.988532\n    \n    \n      std\n      0.319777\n      2.825873\n      0.362862\n      566.352301\n      0.496321\n      1.746181\n      0.429564\n      0.532609\n      40.781991\n      2.319978\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      120.000000\n      0.000000\n      3.000000\n      0.000000\n      -3.579079\n      0.000000\n      1.000000\n    \n    \n      25%\n      0.000000\n      4.000000\n      0.000000\n      2040.000000\n      0.000000\n      11.000000\n      0.000000\n      1.350717\n      16.000000\n      4.000000\n    \n    \n      50%\n      0.000000\n      6.000000\n      0.000000\n      2080.000000\n      0.000000\n      12.000000\n      0.000000\n      1.671143\n      36.000000\n      5.000000\n    \n    \n      75%\n      0.000000\n      9.000000\n      0.000000\n      2414.250000\n      1.000000\n      12.000000\n      0.000000\n      1.991086\n      81.000000\n      6.000000\n    \n    \n      max\n      1.000000\n      18.000000\n      1.000000\n      4992.000000\n      1.000000\n      16.000000\n      1.000000\n      4.051860\n      324.000000\n      9.000000\n    \n  \n\n\n\n\n\n# groupby syntax is very convenient here\ndf.groupby(\"year\")['union'].sum() # number of unionized employees\n\nyear\n1980    137\n1981    136\n1982    140\n1983    134\n1984    137\n1985    122\n1986    115\n1987    143\nName: union, dtype: int64\n\n\n\nN = df.groupby(\"year\")['union'].count()\n\n\nunion_rate =  df.groupby(\"year\")['union'].sum() / N\nunion_rate\n\nyear\n1980    0.251376\n1981    0.249541\n1982    0.256881\n1983    0.245872\n1984    0.251376\n1985    0.223853\n1986    0.211009\n1987    0.262385\nName: union, dtype: float64\n\n\nLet’s plot decline over time of unionization rate\n\nfrom matplotlib import pyplot as plt\nplt.plot(union_rate.index, union_rate)\n\n\n\n\nOur goal is to estimate the wage premium (if any) associated to belonging to a union.\nWe first consider a model \\(y_{i,t} = \\alpha + X_{i,t} \\beta + \\epsilon_{i,t}\\) where \\(y_{i,t}\\) is the wage and \\(X_{i,t}\\) contains a vector of regressors which can explain it.\nEstimate this model using OLS. What is the effect of union. What is the problem of this regression? Should we use individual or time fixed effects?\n\nimport linearmodels\n\n\nfrom linearmodels import PanelOLS\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation\",\n    data=df\n)\nmod.fit()\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.9250  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   0.9592  \n\n\n  No. Observations:       4360         R-squared (Within):    0.1763  \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   0.9250  \n\n\n  Time:                 11:45:22       Log-likelihood         -2938.0 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           5960.1  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(9,4351)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  5960.1  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(9,4351)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n              Parameter Std. Err. T-stat  P-value  Lower CI   Upper CI \n\n\n  black        -0.1195   0.0234   -5.1075 0.0000    -0.1653    -0.0736 \n\n\n  hisp         0.0483    0.0204   2.3700  0.0178    0.0083     0.0882  \n\n\n  exper        0.1097    0.0097   11.305  0.0000    0.0906     0.1287  \n\n\n  hours      -5.894e-05 1.28e-05  -4.6029 0.0000  -8.404e-05 -3.384e-05\n\n\n  married      0.1066    0.0156   6.8501  0.0000    0.0761     0.1371  \n\n\n  educ         0.1093    0.0028   38.939  0.0000    0.1038     0.1149  \n\n\n  union        0.2017    0.0172   11.714  0.0000    0.1680     0.2355  \n\n\n  expersq      -0.0038   0.0007   -5.4359 0.0000    -0.0051    -0.0024 \n\n\n  occupation   -0.0253   0.0029   -8.5924 0.0000    -0.0311    -0.0196 \n\nid: 0x7f6b2d76f040\n\n\nThe regression is significant: R2 is significantly different from zero (p-value< 1e-5). All coefficients are significant at the 5% level, including the coefficient in front of lwage (log of wages).\nAccording to this coefficient, belonging to a union in a given year, includes salary by 20% approximately. (log(1+0.2)~18%)\nFormulate a model with individual fixed effect. Run a panel regression. Comment the results.\nIn this regression, non-observed heterogeneity between individuals, might explain difference in wage levels, and lead to systematic biases in the estimated coefficient. To control for it, we can add individual fixed effects.\n\nfrom linearmodels import PanelOLS\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation + EntityEffects\",\n    data=df)\nprint(mod.fit())\n\nAbsorbingEffectError: \nThe model cannot be estimated. The included effects have fully absorbed\none or more of the variables. This occurs when one or more of the dependent\nvariable is perfectly explained using the effects included in the model.\n\nThe following variables or variable combinations have been fully absorbed\nor have become perfectly collinear after effects are removed:\n\n          black\n          hisp\n          married, educ\n\nSet drop_absorbed=True to automatically drop absorbed variables.\n\n\nWe observe that the fixed effects are “absorbing” some indicator variables (black, hisp, married, educ). For conistency, we have to remove them from the regression.\n\nmod = PanelOLS.from_formula(\"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation + EntityEffects\", data=df, drop_absorbed=True)\n\n\nmod.fit()\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/linearmodels/panel/model.py:1743: AbsorbingEffectWarning: \nVariables have been fully absorbed and have removed from the regression:\n\nblack, hisp, educ\n\n  warnings.warn(\n\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.2005  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   0.3244  \n\n\n  No. Observations:       4360         R-squared (Within):    0.2005  \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   0.3190  \n\n\n  Time:                 11:52:33       Log-likelihood         -1271.2 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           159.19  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(6,3809)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  159.19  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(6,3809)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n             Parameter Std. Err. T-stat  P-value Lower CI Upper CI\n\n\n  exper       0.1349    0.0086   15.710  0.0000   0.1181   0.1518 \n\n\n  hours       -0.0001  1.342e-05 -10.273 0.0000   -0.0002  -0.0001\n\n\n  married     0.0457    0.0181   2.5276  0.0115   0.0102   0.0811 \n\n\n  union       0.0786    0.0191   4.1134  0.0000   0.0411   0.1160 \n\n\n  expersq     -0.0052   0.0006   -8.5424 0.0000   -0.0064  -0.0040\n\n\n  occupation  -0.0080   0.0035   -2.2798 0.0227   -0.0149  -0.0011\n\nF-test for Poolability: 9.1024P-value: 0.0000Distribution: F(544,3809)Included effects: Entityid: 0x7f6b29688c70\n\n\nWe observe that the variables in this regression have a worse predictive power than the former one. This is not a surprise: we have replaced many observed characteristics by fixed effect that are fitted to every single individual. For predictions there is no way to guess the fixed effect, which is why the R2 is low. Note that the effect of belonging to a union, is reduced by half (8% increase in salary explained by unionization), which points to an important effect of unobserved heterogeneity.\nFormulate a model with individual and time fixed effect. Run a panel regression. Comment the results.\nIn the same spirit, the time trend, is not accounted for in the regression, which might explain some of the results. Let’s add time fixed effects.\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation \\\n    + EntityEffects + TimeEffects\", data=df, drop_absorbed=True)\n\n\nmod.fit()\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/linearmodels/panel/model.py:1743: AbsorbingEffectWarning: \nVariables have been fully absorbed and have removed from the regression:\n\nblack, hisp, exper, educ\n\n  warnings.warn(\n\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.0487  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   -0.8389 \n\n\n  No. Observations:       4360         R-squared (Within):    -0.6698 \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   -0.8315 \n\n\n  Time:                 11:55:45       Log-likelihood         -1263.6 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           38.919  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(5,3803)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  38.919  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(5,3803)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n             Parameter Std. Err. T-stat  P-value Lower CI Upper CI\n\n\n  hours       -0.0001  1.342e-05 -10.351 0.0000   -0.0002  -0.0001\n\n\n  married     0.0470    0.0181   2.6047  0.0092   0.0116   0.0825 \n\n\n  union       0.0762    0.0191   3.9822  0.0001   0.0387   0.1136 \n\n\n  expersq     -0.0061   0.0007   -8.7238 0.0000   -0.0075  -0.0048\n\n\n  occupation  -0.0078   0.0035   -2.2274 0.0260   -0.0147  -0.0009\n\nF-test for Poolability: 9.4090P-value: 0.0000Distribution: F(551,3803)Included effects: Entity, Timeid: 0x7f6b29619790\n\n\nHere the addition of time fixed effects, reduces the explanatory power a bit further, but does not change much the estimate for the effect of unionization (still around 8%)."
  },
  {
    "objectID": "session_7/index.html",
    "href": "session_7/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Another library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\n\n\n\n\n\n\n\n\n\nWorkflow\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\n\ncreate a model (independent from data)\n\ntrain the model on training dataset\n\nevaluate accuracy on test dataset (here \\(R^2\\))\n\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry to run the code\n\n\n\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n\n\nmodel.fit(X_train, y_train)\n\n\nmodel.score(X_test, y_test)\n\n\nmodel.predict(X_new)\n\n\n\n\n\n\n\n\n\n\n\n\nBinary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values\n\n\n\n\n\n\n\n\n\nGiven a regression model (a linear predictor)\n\n\\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\] - one can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid - The loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\] - This works for any regression model (LASSO, RIDGE, nonlinear…)\n\n\n\n\n\n\n\n\n\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1.\n\n\n\n\n\n\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)\n\n\n\n\n\n\n\n\n\n\nThere are many - Logistic Regression - Naive Bayes Classifier - Nearest Distance - neural networks (replace score in sigmoid by n.n.) - Decision Trees - Support Vector Machines\n\n\n\n\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advanced Macro: Numerical Methods",
    "section": "",
    "text": "Session\nDate\nContent\nTutorial\nHomework\n\n\n\n\n1\n18/01\nintro\npython essentials\npush-ups (1)\n\n\n2\n25/01\ndataframes, descriptive statistics\npython essentials (2)\npush-ups (2)\n\n\n3\n01/02\nlinear regression\ndata exploration, visualization\npush-ups (3)\n\n\n4\n08/02\nmultiple regression\n\n\n\n\n5\n15/02\nmultiple regression\n\n\n\n\n6\n22/02\ninstrumental variables\n\ncoursework (1)\n\n\n7\n01/02\nmachine learning introduction (1)\n\n\n\n\n6\n07/03\nmachine learning introduction (2)\n\n\n\n\n7\n21/03\ntext analysis\n\n\n\n\n10\n04/04\nfinal exam"
  },
  {
    "objectID": "index.html#about-pushups",
    "href": "index.html#about-pushups",
    "title": "Advanced Macro: Numerical Methods",
    "section": "About pushups",
    "text": "About pushups\n\nPushups\n\nindividual\nto do after every course, before next session\nyou are encouraged to collaborate\nsend via Nuvolos platform"
  },
  {
    "objectID": "index.html#evaluation-final-examination",
    "href": "index.html#evaluation-final-examination",
    "title": "Advanced Macro: Numerical Methods",
    "section": "Evaluation & Final Examination",
    "text": "Evaluation & Final Examination\n\nData Projects (x2) (50%)\n\ngroupwork (goups smaller than 4)\n\nimport some data\nperform/replicate some econometric work\npresent results with nice plots\n\n\nFinal Exam (50%)\n\nindividual\n90 min during last session\ntest general knowledge of econometrics / machine learning\nthere will be some programming tasks\n\n\n\nWork Environment\n\nWe will use Nuvolos\n\nonline datascience platform with Jupyterlab\n\nYou should have received an invitation by then."
  },
  {
    "objectID": "session_4/index.html#remember-dataset-from-last-time",
    "href": "session_4/index.html#remember-dataset-from-last-time",
    "title": "Multiple Regressions",
    "section": "Remember dataset from last time",
    "text": "Remember dataset from last time\n\n\n\n\n\n\ntype\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?"
  },
  {
    "objectID": "session_4/index.html#prestige-or-education",
    "href": "session_4/index.html#prestige-or-education",
    "title": "Multiple Regressions",
    "section": "Prestige or Education",
    "text": "Prestige or Education\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education"
  },
  {
    "objectID": "session_4/index.html#multiple-regression",
    "href": "session_4/index.html#multiple-regression",
    "title": "Multiple Regressions",
    "section": "Multiple regression",
    "text": "Multiple regression\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)"
  },
  {
    "objectID": "session_4/index.html#fitting-a-model",
    "href": "session_4/index.html#fitting-a-model",
    "title": "Multiple Regressions",
    "section": "Fitting a model",
    "text": "Fitting a model\nNow we are trying to fit a plane to a cloud of points."
  },
  {
    "objectID": "session_4/index.html#minimization-criterium",
    "href": "session_4/index.html#minimization-criterium",
    "title": "Multiple Regressions",
    "section": "Minimization Criterium",
    "text": "Minimization Criterium\n\nTake all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula"
  },
  {
    "objectID": "session_4/index.html#ordinary-least-square",
    "href": "session_4/index.html#ordinary-least-square",
    "title": "Multiple Regressions",
    "section": "Ordinary Least Square",
    "text": "Ordinary Least Square\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\nMatrix Version (look for \\(B = \\left( \\alpha, \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]"
  },
  {
    "objectID": "session_4/index.html#solution",
    "href": "session_4/index.html#solution",
    "title": "Multiple Regressions",
    "section": "Solution",
    "text": "Solution\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?"
  },
  {
    "objectID": "session_4/index.html#explained-variance-1",
    "href": "session_4/index.html#explained-variance-1",
    "title": "Multiple Regressions",
    "section": "Explained Variance",
    "text": "Explained Variance\n\nAs in the 1d case we can compare:\n\nthe variability of the model predictions (\\(MSS\\))\nthe variance of the data (\\(TSS\\), T for total)\n\nCoefficient of determination: \\[R^2 = \\frac{MSS}{TSS}\\]\nOr: \\[R^2 = 1-\\frac{RSS}{SST}\\] where \\(RSS\\) is the non explained variance"
  },
  {
    "objectID": "session_4/index.html#adjusted-r-squared",
    "href": "session_4/index.html#adjusted-r-squared",
    "title": "Multiple Regressions",
    "section": "Adjusted R squared",
    "text": "Adjusted R squared\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688 \n\n\n\n\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\n\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\nexample formula:\n\n\\(N\\): number of observations\n\\(p\\) number of variables \\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]"
  },
  {
    "objectID": "session_4/index.html#making-a-regression-with-statsmodels",
    "href": "session_4/index.html#making-a-regression-with-statsmodels",
    "title": "Multiple Regressions",
    "section": "Making a regression with statsmodels",
    "text": "Making a regression with statsmodels\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf"
  },
  {
    "objectID": "session_4/index.html#performing-a-regression",
    "href": "session_4/index.html#performing-a-regression",
    "title": "Multiple Regressions",
    "section": "Performing a regression",
    "text": "Performing a regression\n\nRunning a regression with statsmodels\n\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n=============================================================================="
  },
  {
    "objectID": "session_4/index.html#formula-mini-language",
    "href": "session_4/index.html#formula-mini-language",
    "title": "Multiple Regressions",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)"
  },
  {
    "objectID": "session_4/index.html#formula-mini-language-1",
    "href": "session_4/index.html#formula-mini-language-1",
    "title": "Multiple Regressions",
    "section": "Formula mini-language",
    "text": "Formula mini-language\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients"
  },
  {
    "objectID": "session_4/index.html#coefficients-interpetation",
    "href": "session_4/index.html#coefficients-interpetation",
    "title": "Multiple Regressions",
    "section": "Coefficients interpetation",
    "text": "Coefficients interpetation\n\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[\\text{number_or_crimes} = 0.005\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\n\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\ninterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\nTake logs: \\[\\log(\\text{number_or_crimes}) = 0.005\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes"
  },
  {
    "objectID": "session_4/index.html#hypotheses",
    "href": "session_4/index.html#hypotheses",
    "title": "Multiple Regressions",
    "section": "Hypotheses",
    "text": "Hypotheses\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\nWe make some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)"
  },
  {
    "objectID": "session_4/index.html#is-the-regression-significant",
    "href": "session_4/index.html#is-the-regression-significant",
    "title": "Multiple Regressions",
    "section": "Is the regression significant?",
    "text": "Is the regression significant?\n\n\n\nApproach is very similar to the one-dimensional case\nFisher criterium (F-test):\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\\(H1\\): some coefficients are not 0\n\nStatistics: \\[F=\\frac{MSR}{MSE}\\]\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\n\n\nUnder:\n\nthe model assumptions about the data generation process\nthe H0 hypothesis\n\n… the distribution of \\(F\\) is known\nIt is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypothesis H0\nif very low, H0 is rejected"
  },
  {
    "objectID": "session_4/index.html#is-each-coefficient-significant",
    "href": "session_4/index.html#is-each-coefficient-significant",
    "title": "Multiple Regressions",
    "section": "Is each coefficient significant ?",
    "text": "Is each coefficient significant ?\n\nStudent test. Given a coefficient \\(\\beta_k\\):\n\n\\(H0\\): coefficient is 0\n\\(H1\\): coefficient is not zero\n\nStatistics: \\(t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\)\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\nit compares the estimated value of a coefficient to its estimated standard deviation\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\nProcedure:\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\) (ex 5%)\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t>t*\\)\nOr just look at the \\(p-value\\): probability that \\(t\\) would be as high as it is, assuming \\(H0\\)"
  },
  {
    "objectID": "session_4/index.html#confidence-intervals",
    "href": "session_4/index.html#confidence-intervals",
    "title": "Multiple Regressions",
    "section": "Confidence intervals",
    "text": "Confidence intervals\n\nSame as in the 1d case.\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|>t^{\\star})<\\alpha\\)\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\nInterpretation:\n\nfor a given confidence interval at confidence level \\(\\alpha\\)…\nthe probability that our coefficient was obtained, if the true coefficient were outside of it, is smaller than \\(\\alpha\\)"
  },
  {
    "objectID": "session_4/index.html#other-tests",
    "href": "session_4/index.html#other-tests",
    "title": "Multiple Regressions",
    "section": "Other tests",
    "text": "Other tests\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course"
  },
  {
    "objectID": "session_4/index.html#variable-selection-1",
    "href": "session_4/index.html#variable-selection-1",
    "title": "Multiple Regressions",
    "section": "Variable selection",
    "text": "Variable selection\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\n\n\n\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)"
  },
  {
    "objectID": "session_4/index.html#not-enough-coefficients",
    "href": "session_4/index.html#not-enough-coefficients",
    "title": "Multiple Regressions",
    "section": "Not enough coefficients",
    "text": "Not enough coefficients\n\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\] and are genuinely interested in coefficient \\(\\beta_1\\)\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimate \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\)\n\neven though we are not interested in \\(x_2\\) by itself\nwe control for \\(x_2\\))"
  },
  {
    "objectID": "session_4/index.html#example",
    "href": "session_4/index.html#example",
    "title": "Multiple Regressions",
    "section": "Example",
    "text": "Example\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise"
  },
  {
    "objectID": "session_4/index.html#colinear-regressors",
    "href": "session_4/index.html#colinear-regressors",
    "title": "Multiple Regressions",
    "section": "Colinear regressors",
    "text": "Colinear regressors\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest:\n\ncorrelation statistics\ncorrelation plot"
  },
  {
    "objectID": "session_4/index.html#choosing-regressors",
    "href": "session_4/index.html#choosing-regressors",
    "title": "Multiple Regressions",
    "section": "Choosing regressors",
    "text": "Choosing regressors\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\n\nnot the one you are interested in ;)\n\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares"
  },
  {
    "objectID": "session_4/graphs/Untitled1.html",
    "href": "session_4/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_4/graphs/inference.html",
    "href": "session_4/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_4/graphs/index.html",
    "href": "session_4/graphs/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "type\nincome\neducation\nprestige\n\n\n\n\naccountant\nprof\n62\n86\n82\n\n\npilot\nprof\n72\n76\n83\n\n\narchitect\nprof\n75\n92\n90\n\n\nauthor\nprof\n55\n90\n76\n\n\nchemist\nprof\n64\n86\n90\n\n\n\n\n\n\nLast week we “ran” a linear regression: \\(y = \\alpha + \\beta x\\). Result: \\[\\text{income} = xx + 0.72 \\text{education}\\]\nShould we have looked at “prestige” instead ? \\[\\text{income} = xx + 0.83 \\text{prestige}\\]\nWhich one is better?\n\n\n\n\n\n\n\n\n\nif the goal is to predict: the one with higher explained variance\n\nprestige has higher \\(R^2\\) (\\(0.83^2\\))\n\nunless we are interested in the effect of education\n\n\n\n\n\n\nWhat about using both?\n\n2 variables model: \\[\\text{income} = \\alpha + \\beta_1 \\text{education} + \\beta_2 \\text{prestige}\\]\nwill probably improve prediction power (explained variance)\n\\(\\beta_1\\) might not be meaningful on its own anymore (education and prestige are correlated)\n\n\n\n\n\n\nNow we are trying to fit a plane to a cloud of points.\n \n\n\n\n\n\nTake all observations: \\((\\text{income}\\_n,\\text{education}\\_n,\\text{prestige}\\_n)\\_{n\\in[0,N]}\\)\nObjective: sum of squares \\[ L(\\alpha, \\beta_1, \\beta_2) = \\sum_i \\left( \\underbrace{ \\alpha + \\beta_1 \\text{education}\\_n + \\beta_2 \\text{prestige}\\_n - \\text{income}\\_n }\\_{e_n=\\text{prediction error} }\\right)^2 \\]\nMinimize loss function in \\(\\alpha\\), \\(\\beta_1\\), \\(\\beta_2\\)\nAgain, we can perform numerical optimization (machine learning approach)\n\n… but there is an explicit formula\n\n\n\n\n\n\n\n\n\n\\[Y = \\begin{bmatrix}\n\\text{income}_1 \\\\\\\\\n\\vdots \\\\\\\\\n\\text{income}_N\n\\end{bmatrix}\\] \\[X = \\begin{bmatrix}\n1 & \\text{education}_1 & \\text{prestige}_1 \\\\\\\\\n\\vdots & \\vdots & \\vdots \\\\\\\\\n1 &\\text{education}_N & \\text{prestige}_N\n\\end{bmatrix}\\]\n\n\n\nMatrix Version (look for \\(B = \\left( \\alpha, \\beta_1 , \\beta_2 \\right)\\)): \\[Y =  X B + E\\]\nNote that constant can be interpreted as a “variable”\nLoss function \\[L(A,B) = (Y - X B)' (Y - X B)\\]\nResult of minimization \\(\\min_{(A,B)} L(A,B)\\) : \\[\\begin{bmatrix}\\alpha & \\beta_1 & \\beta_2 \\end{bmatrix} = (X'X)^{-1} X' Y \\]\n\n\n\n\n\n\n\n\nResult: \\[\\text{income} = 10.43  + 0.03 \\times \\text{education} + 0.62 \\times \\text{prestige}\\]\nQuestions:\n\nis it a better regression than the other?\nis the coefficient in front of education significant?\nhow do we interpret it?\ncan we build confidence intervals?\n\n\n\n\n\n\n\n\nAs in the 1d case we can compare:\n\nthe variability of the model predictions (\\(MSS\\))\nthe variance of the data (\\(TSS\\), T for total)\n\nCoefficient of determination: \\[R^2 = \\frac{MSS}{TSS}\\]\nOr: \\[R^2 = 1-\\frac{RSS}{SST}\\] where \\(RSS\\) is the non explained variance\n\n\n\n\n\n\n\nIn our example:\n\n\n\n\n\n\n\n\n\nRegression\n\\(R^2\\)\n \\(R^2_{adj}\\) \n\n\n\n\neducation\n0.525\n 0.514 \n\n\nprestige\n0.702\n 0.695 \n\n\neducation + prestige\n0.7022\n 0.688 \n\n\n\n\n\n\n\nFact:\n\nadding more regressors always improve \\(R^2\\)\nwhy not throw everything in? (kitchen sink regressions)\n\ntwo many regressors: overfitting the data\n\n\nPenalise additional regressors: adjusted R^2\n\nexample formula:\n\n\\(N\\): number of observations\n\\(p\\) number of variables \\[R^2_{adj} = 1-(1-R^2)\\frac{N-1}{N-p-1}\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport statsmodels\nWe use a special API inspired by R:\nimport statsmodels.formula.api as smf\n\n\n\n\nRunning a regression with statsmodels\nmodel = smf.ols('income ~ education',  df)  # model\nres = model.fit()  # perform the regression\nres.describe()\n\n‘income ~ education’ is the model formula\n\nResult:\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                 income   R-squared:                       0.525\nModel:                            OLS   Adj. R-squared:                  0.514\nMethod:                 Least Squares   F-statistic:                     47.51\nDate:                Tue, 02 Feb 2021   Prob (F-statistic):           1.84e-08\nTime:                        05:21:25   Log-Likelihood:                -190.42\nNo. Observations:                  45   AIC:                             384.8\nDf Residuals:                      43   BIC:                             388.5\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n==============================================================================\nIntercept     10.6035      5.198      2.040      0.048       0.120      21.087\neducation      0.5949      0.086      6.893      0.000       0.421       0.769\n==============================================================================\nOmnibus:                        9.841   Durbin-Watson:                   1.736\nProb(Omnibus):                  0.007   Jarque-Bera (JB):               10.609\nSkew:                           0.776   Prob(JB):                      0.00497\nKurtosis:                       4.802   Cond. No.                         123.\n==============================================================================\n\n\n\n\n\nWith statsmodels formulas, can be supplied with R-style syntax\nExamples:\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nincome ~ education\n\\(\\text{income}_i = \\alpha + \\beta \\text{education}_i\\)\n\n\nincome ~ prestige\n\\(\\text{income}_i = \\alpha + \\beta \\text{prestige}_i\\)\n\n\nincome ~ prestige - 1\n\\(\\text{income}_i = \\beta \\text{prestige}_i\\) (no intercept)\n\n\nincome ~ education + prestige\n\\(\\text{income}_i = \\alpha + \\beta_1 \\text{education}_i + \\beta_2 \\text{prestige}_i\\)\n\n\n\n\n\n\n\n\nOne can use formulas to apply transformations to variables\n\n\n\n\n\n\n\n\nFormula\nModel\n\n\n\n\nlog(P) ~ log(M) + log(Y)\n\\(\\log(P_i) = \\alpha + \\alpha_1 \\log(M_i) + \\alpha_2 \\log(Y_i)\\) (log-log)\n\n\nlog(Y) ~ i\n\\(\\log(P_i) = \\alpha + i_i\\) (semi-logs)\n\n\n\n\nThis is useful if the true relationship is nonlinear\nAlso useful, to interpret the coefficients\n\n\n\n\n\n\nExample:\n\n(police_spending and prevention_policies in million dollars) \\[ \\text{number_or_crimes} = 0.005\\\\% - 0.001 \\text{pol_spend} - 0.005 \\text{prev_pol} + 0.002 \\text{population density}\\]\n\nreads: when holding other variables constant a 0.1 million increase in police spending reduces crime rate by 0.001%\ninterpretation?\n\nproblematic because variables have different units\nwe can say that prevention policies are more efficient than police spending ceteris paribus\n\nTake logs: \\[ \\log(\\text{number_or_crimes}) = 0.005\\\\% - 0.15 \\log(\\text{pol_spend}) - 0.4 \\log(\\text{prev_pol}) + 0.2 \\log(\\text{population density})\\]\n\nnow we have an estimate of elasticities\na \\(1\\%\\) increase in police spending leads to a \\(0.15\\%\\) decrease in the number of crimes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecall what we do:\n\nwe have the data \\(X,Y\\)\nwe choose a model: \\[ Y = \\alpha + X \\beta \\]\nfrom the data we compute estimates: \\[\\hat{\\beta}  = (X'X)^{-1} X' Y \\] \\[\\hat{\\alpha} = Y- X \\beta \\]\nestimates are a precise function of data\n\nexact formula not important here\n\n\n\n\n\n\n\nWe make some hypotheses on the data generation process:\n\n\\(Y = X \\beta + \\epsilon\\)\n\\(\\mathbb{E}\\left[ \\epsilon \\right] = 0\\)\n\\(\\epsilon\\) multivariate normal with covariance matrix \\(\\sigma^2 I_n\\)\n\n\\(\\forall i, \\sigma(\\epsilon_i) = \\sigma\\)\n\\(\\forall i,j, cov(\\epsilon_i, \\epsilon_j) = 0\\)\n\n\n\nUnder these hypotheses:\n\n\\(\\hat{\\beta}\\) is an unbiased estimate of true parameter \\(\\beta\\)\n\ni.e. \\(\\mathbb{E} [\\hat{\\beta}] = \\beta\\)\n\none can prove \\(Var(\\hat{\\beta}) = \\sigma^2 I_n\\)\n\\(\\sigma\\) can be estimated by \\(\\hat{\\sigma}=S\\frac{\\sum_i (y_i-{pred}_i)^2}{N-p}\\)\n\n\\(N-p\\): degrees of freedoms\n\none can estimate: \\(\\sigma(\\hat{\\beta_k})\\)\n\nit is the \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\n\n\n\n\n\n\n\n\nApproach is very similar to the one-dimensional case\n\nFisher criterium (F-test):\n\n\n\\(H0\\): all coeficients are 0\n\ni.e. true model is \\(y=\\alpha + \\epsilon\\)\n\n\n\\(H1\\): some coefficients are not 0\n\nstatistics: \\[F=\\frac{MSR}{MSE}\\]\n\n\\(MSR\\): mean-squared error of constant model\n\\(MSE\\): mean-squared error of full model\n\n\n\nUnder the model assumptions, distribution of \\(F\\) is known\n\nit is remarkable that it doesn’t depend on \\(\\sigma\\) !\n\n\nOne can produce a p-value.\n\nprobability to obtain this statistics given hypotheses 0\nif very low, H0 is rejected\n\n\n\n\n\n\n\n\nStudent test. Given a an coefficient \\(\\beta_k\\):\n\n\n\\(H0\\): coefficient is 0\n\n\\(H1\\): coefficient is not zero\n\nstatistics: \\(t = \\frac{\\hat{\\beta_k}}{\\hat{\\sigma}(\\hat{\\beta_k})}\\)\n\nwhere \\(\\hat{\\sigma}(\\beta_k)\\) is \\(i\\)-th diagonal element of \\(\\hat{\\sigma}^2 X'X\\)\n\n\n\nUnder the inference hypotheses, distribution of \\(t\\) is known.\n\nit is a student distribution\n\n\nProcedure:\n\n\nCompute \\(t\\). Check acceptance threshold \\(t*\\) at probability \\(\\alpha\\).\n\nCoefficient is significant with probability \\(1-\\alpha\\) if \\(t>t*\\)\n\nOr compute implied acceptance rate \\(\\alpha\\) for \\(t\\).\n\nif \\(t\\) is high enough, null hypothesis is rejected\n\n\n\n\n\n\n\n\nSame as in the 1d case.\nTake estimate \\(\\color{red}{\\beta_i}\\) with an estimate of its standard deviation \\(\\color{red}{\\hat{\\sigma}(\\beta_i)}\\)\nCompute student \\(\\color{red}{t^{\\star}}\\) at \\(\\color{red}{\\alpha}\\) confidence level (ex: \\(\\alpha=5\\\\%\\)) such that:\n\n\\(P(|t|>t^{\\star})<\\alpha\\)\n\nProduce confidence intervals at \\(\\alpha\\) confidence level:\n\n\\([\\color{red}{\\beta_i} - t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}, \\color{red}{\\beta_i} + t^{\\star} \\color{red}{\\hat{\\sigma}(\\beta_i)}]\\)\n\n\n\n\n\n\n\nThe tests seen so far rely on strong statistical assumptions (normality, homoscedasticity, etc..)\nSome tests can be used to test these assumptions:\n\nJarque-Bera: is the distribution of data truly normal\nDurbin-Watson: are residuals autocorrelated (makes sense for time-series)\n…\n\nIn case assumptions are not met…\n\n… still possible to do econometrics\n… but beyond the scope of this course\n\n\n\n\n\n\n\n\n\n\n\n\nI’ve got plenty of data:\n\n\\(y\\): gdp\n\\(x_1\\): investment\n\\(x_2\\): inflation\n\\(x_3\\): education\n\\(x_4\\): unemployment\n…\n\n\nMany possible regressions:\n\n\\(y = α + \\beta_1 x_1\\)\n\\(y = α + \\beta_2 x_2 + \\beta_3 x_4\\)\n…\n\n\nWhich one do I choose ?\n\nputting everything together is not an option (kitchen sink regression)\n\n\n\n\n\n\n\nSuppose you run a regression: \\[y = \\alpha + \\beta_1 x_1 + \\epsilon\\]\nBut unknowingly to you, the actual model is \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2 + \\eta\\]\nThe residual \\(y - \\alpha - \\beta_1 x_1\\) is not white noise\n\nspecification hypotheses are violated\nestimate \\(\\hat{\\beta_1}\\) will have a bias (omitted variable bias)\nto correct the bias we add \\(x_2\\) (“control” for \\(x_2\\))\n\n\n\n\n\n\n\nSuppose I want to check Okun’s law. I consider the following model: \\[\\text{gdp_growth} = \\alpha + \\beta \\times \\text{unemployment}\\]\nI obtain: \\[\\text{gdp_growth} = 0.01 - 0.1 \\times \\text{unemployment} + e_i\\]\nThen I inspect visually the residuals: not normal at all!\nConclusion: my regression is misspecified, \\(0.1\\) is a biased (useless) estimate\nI need to control for additional variables. For instance: \\[\\text{gdp_growth} = \\alpha + \\beta_1 \\text{unemployment} + \\beta_2 \\text{interest rate}\\]\nUntil the residuals are actually white noise\n\n\n\n\n\n\nWhat happens if two regressors are (almost) colinear? \\[y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\] where \\(x_2 = \\kappa x_1\\)\nIntuitively: parameters are not unique\n\nif \\(y = \\alpha + \\beta_1 x_1\\) is the right model…\nthen \\(y = \\alpha + \\beta_1 \\lambda x_1 + \\beta_2 (1-\\lambda) \\frac{1}{\\kappa} x_2\\) is exactly as good…\n\nMathematically: \\((X'X)\\) is not invertible.\nWhen regressors are almost colinear, coefficients can have a lot of variability.\nTest: correlation plot, correlation statistics\n\n\n\n\n\n\\[y = \\alpha + \\beta_1 x_1 + ... \\beta_n x_n\\]\nWhich regressors to choose ?\n\nMethod 1 : remove coefficients with lowest t (less significant) to maximize adjusted R-squared\n\nremove regressors with lowest t\nregress again\nsee if adjusted \\(R^2\\) is decreasing\n\nif so continue\notherwise cancel last step and stop\n\n\nMethod 2 : choose combination to maximize Akaike Information Criterium\n\nAIC: \\(p - log(L)\\)\n\\(L\\) is likelihood\ncomputed by all good econometric softwares\n\n\n\n\n\n\n\n\n\nIntro to causality"
  },
  {
    "objectID": "session_1/index.html#so-what-will-we-do",
    "href": "session_1/index.html#so-what-will-we-do",
    "title": "Introduction",
    "section": "So what will we do ?",
    "text": "So what will we do ?\n\n\nProgramming\nEconometrics / Machine Learning\nTalk about economics"
  },
  {
    "objectID": "session_1/index.html#econometrics",
    "href": "session_1/index.html#econometrics",
    "title": "Introduction",
    "section": "Econometrics",
    "text": "Econometrics"
  },
  {
    "objectID": "session_1/index.html#programming",
    "href": "session_1/index.html#programming",
    "title": "Introduction",
    "section": "Programming",
    "text": "Programming"
  },
  {
    "objectID": "session_1/index.html#why-should-you-learn-programming",
    "href": "session_1/index.html#why-should-you-learn-programming",
    "title": "Introduction",
    "section": "Why Should you learn programming ?",
    "text": "Why Should you learn programming ?\n\n\nResearchers (econometricians or data scientists) spend 80% of their time writing code.\n\nPresentation (plots, interactive apps) is key and relies on\n\n… programming\n\n\nInteraction with code becomes unavoidable in business environment\nfixing the website\nquerying the database\n…\n\nWorth investing a bit of time to learn it\n\nyou can easily become an expert\n\n\nPlus it’s fun"
  },
  {
    "objectID": "session_1/index.html#programming-1",
    "href": "session_1/index.html#programming-1",
    "title": "Introduction",
    "section": "Programming",
    "text": "Programming"
  },
  {
    "objectID": "session_1/index.html#how-good-should-you-program",
    "href": "session_1/index.html#how-good-should-you-program",
    "title": "Introduction",
    "section": "How good should you program ?",
    "text": "How good should you program ?\n\n\n\n<div class=\"fragment current-visible\" data-fragment-index=1>   <img src=\"anxious.jpg\"> </div>\n<div class=\"fragment current-visible\" data-fragment-index=2>   <img src=\"furious.webp\">  </div>\n<div class=\"fragment current-visible\" data-fragment-index=3>  <img src=\"relieved.jpg\"> </div>\n<div class=\"fragment current-visible\" data-fragment-index=4>  <img src=\"googleit.avif\">  </div>\n<div class=\"fragment current-visible\" data-fragment-index=5>  <img src=\"happy.jpeg\" width=600>  </div>\n\n\n\n\n\nWe will “assume” everybody as some prior experience with Python\n\nEven though some of you have possibly never touched it\n\nWe’ll do some catchup today\n\nAnd count on you to find the resources to learn what you need when you need it\n\nOf course you can always ask questions"
  },
  {
    "objectID": "session_1/index.html#additional-resources",
    "href": "session_1/index.html#additional-resources",
    "title": "Introduction",
    "section": "Additional resources",
    "text": "Additional resources\nPlenty of online resources to learn python/econometrics/machine learning\n\nlearnpython sponsored by datacamp\nquantecon: designed for economists, good examples of projects\nPython Data Science Handbook: by Jake Van der Plas, very complete. Online free version.\nIntroduction to Econometrics with R, in R but very clear (beginner and advanced versions)"
  },
  {
    "objectID": "session_1/index.html#quantecon",
    "href": "session_1/index.html#quantecon",
    "title": "Introduction",
    "section": "Quantecon",
    "text": "Quantecon\n\n\n\n\n<div class=\"col\" >\n<img src=\"tom_sargent.jpg\" ><br>\nTom Sargent\n</div>\n<div class=\"col\">\n<img src=\"john_stachurski.jpg\" width=50%><br>\nJohn Stachurski\n</div>\n\n\n\nTom Sargent @ ESCP <br>\n<img  src=\"t3m_escp.jpg\">\n\n\n\n\nQuantecon: free online lectures to learn python programming and (advanced) economics\n\nnow with a section on datascience\nit is excellent!\nwe will use some of it today"
  },
  {
    "objectID": "session_1/Exercises.html",
    "href": "session_1/Exercises.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Exercises\n Exercise 1\nWhat do you think the value of z is after running the code below?\n\nz = 3\nz = z + 4\nprint(\"z is\", z)\n\nz is 7\n\n\n(back to text)\nExercise 2\nRead about out what the len function does (by writing len?).\nWhat will it produce if we give it the variable x?\nCheck whether you were right by running the code len(x).\n\nlen?\n\n\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method\n\n\n\n\n\nx = \"abe\"\nlen(x)\n\n3\n\n\n\nx = [1,2,3,4]\nlen(x)\n\n4\n\n\n(back to text)\nExercise 3\nWe can use our introspection skills to investigate a package’s contents.\nIn the cell below, use tab completion to find a function from the time module that will display the local time.\nUse time.FUNC_NAME? (where FUNC_NAME is replaced with the function you found) to see information about that function and then call the function. (Hint: look for something to do with the word local).\n\nimport time\ntime.localtime()\n\ntime.struct_time(tm_year=2021, tm_mon=1, tm_mday=19, tm_hour=9, tm_min=20, tm_sec=20, tm_wday=1, tm_yday=19, tm_isdst=0)\n\n\n\nimport time\n# your code here -- notice the comment!\ntime.time() / 3600\n\n447512.31643098034\n\n\n(back to text)\nExercise 4\nTry running import time as t in the cell below, then see if you can call the function you identified above.\nDoes it work?\n\ntime.localtime()\n\ntime.struct_time(tm_year=2021, tm_mon=1, tm_mday=19, tm_hour=9, tm_min=21, tm_sec=48, tm_wday=1, tm_yday=19, tm_isdst=0)\n\n\n\nimport time as t\n\n\nt.localtime()\n\ntime.struct_time(tm_year=2021, tm_mon=1, tm_mday=19, tm_hour=9, tm_min=22, tm_sec=4, tm_wday=1, tm_yday=19, tm_isdst=0)\n\n\n(back to text)\nExercise 5\nCreate the following variables:\n\nD: A floating point number with the value 10,000\n\nr: A floating point number with value 0.025\n\nT: An integer with value 30\n\nWe will use them in a later exercise.\n\n# D = float(10000) // to comment a line : Ctrl+/\nD = 10000.0\nr = 0.025\nT = 30\n\n(back to text)\nExercise 6\nRemember the variables we created earlier?\nLet’s compute the present discounted value of a payment ($ D $) made in $ T $ years assuming an interest rate of 2.5%. Save this value to a new variable called PDV and print your output.\nHint: The formula is\n\\[\n\\text{PDV} = \\frac{D}{(1 + r)^T}\n\\]\n\nPDV = D / (1+r)**T\nPDV\n\n4767.426851809713\n\n\n(back to text)\nExercise 7\nVerify the “trick” where the percent difference ($ \\() between two numbers close to 1 can be well approximated by the difference between the log of the two numbers (\\) (x) - (y) $).\nUse the numbers x and y below. (Hint: you will want to use the math.log function)\n\nx = 1.05\ny = 1.02\nA = (x-y)/x\nimport math\nB = math.log(x) - math.log(y)\nprint(f\"A: {A} | B: {B}\")\n\nA: 0.028571428571428595 | B: 0.02898753687325232\n\n\n\nfrom math import log\nlog(x)\n\n0.04879016416943205\n\n\n(back to text)\nExercise 8\nThe code below is invalid Python code\n\nx = \"What's wrong with this string\"\n\n\nx = 'What\\'s wrong with this string'\nx\n\n\"What's wrong with this string\"\n\n\nCan you fix it?\nHint: Try creating a code cell below and testing things out until you find a solution.\n(back to text)\nExercise 9\nUsing the variables x and y, how could you create the sentence Hello World?\nHint: Think about how to represent a space as a string.\n(back to text)\n\nx = \"Hello\"\ny = \"World\"\n\n\nx + \" \" + y\n\n'Hello World'\n\n\n\nf\"{x} {y}\" \n\n'Hello World'\n\n\nExercise 10\nOne of our favorite (and most frequently used) string methods is replace.\nIt substitutes all occurrences of a particular pattern with a different pattern.\nFor the variable test below, use the replace method to change the c to a d.\nHint: Type test.replace? to get some help for how to use the method replace.\n\ntest = \"abcabcabc\"\n\n\ntest.replace?\n\n\nSignature: test.replace(old, new, count=-1, /)\nDocstring:\nReturn a copy with all occurrences of substring old replaced by new.\n  count\n    Maximum number of occurrences to replace.\n    -1 (the default value) means replace all occurrences.\nIf the optional argument count is given, only the first count occurrences are\nreplaced.\nType:      builtin_function_or_method\n\n\n\n\n\ntest.replace(\"c\", \"d\")\n\n'abdabdabd'\n\n\n\ntest[2] = 'd'\n\nTypeError: 'str' object does not support item assignment\n\n\n\ntest2 = test.replace(\"c\", \"d\")\n\n\ntest\n\n'abdabdabd'\n\n\n\ntest2\n\n'abdabdabd'\n\n\n(back to text)\nExercise 11\nSuppose you are working with price data and encounter the value \"\\$6.50\".\nWe recognize this as being a number representing the quantity “six dollars and fifty cents.”\nHowever, Python interprets the value as the string \"\\$6.50\". (Quiz: why is this a problem? Think about the examples above.)\nIn this exercise, your task is to convert the variable price below into a number.\nHint: Once the string is in a suitable format, you can call write float(clean_price) to make it a number.\nprice = \"$6.50\"\n(back to text)\nExercise 12\nLookup a country in World Bank database, and format a string showing the growth rate of GDP over the last 2 years.\n(back to text)\nExercise 13\nInstead of hard-coding the values above, try to use the country, GDP and year variables you previously defined.\n(back to text)\nExercise 14\nCreate a new string and use formatting to produce each of the following statements\n\n“The 1st quarter revenue was 110M”\n\n“The 2nd quarter revenue was 95M”\n\n“The 3rd quarter revenue was 100M”\n\n“The 4th quarter revenue was 130M”\n\n(back to text)\nExercise 15\nWithout typing the commands, determine whether the following statements are true or false.\nOnce you have evaluated whether the command is True or False, run the code in Python.\nx = 2\ny = 2\nz = 4\n\n# Statement 1\nx > z\n\n# Statement 1\nx == y\n\n# Statement 3\n(x < y) and (x > y)\n\n# Statement 4\n(x < y) or (x > y)\n\n# Statement 5\n(x <= y) and (x >= y)\n\n# Statement 6\nTrue and ((x < z) or (x < y))\n\n# code here!\n\n(back to text)\nExercise 16\nFor each of the code cells below, think carefully about what you expect to be returned before evaluating the cell.\nThen evaluate the cell to check your intuitions.\nNOTE: For now, do not worry about what the [ and ] mean – they allow us to create lists which we will learn about in an upcoming lecture.\n\nall([True, True, True])\n\n\nall([False, True, False])\n\n\nall([False, False, False])\n\n\nany([True, True, True])\n\n\nany([False, True, False])\n\n\nany([False, False, False])\n\n(back to text)"
  },
  {
    "objectID": "session_1/Python_basics.html",
    "href": "session_1/Python_basics.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "To run this tutorial you need a version of Python greater than 3.6.\nIf you use your own computer, I recommend downloading Anaconda Python https://www.anaconda.com/distribution/. Anaconda is a package manager, which allows to install many python libraries as well as a few useful binary dependencies which are complicated to install otherwise. When installing anaconda make sure you install it in user space, so that you can later install and update libraries without admin rights.\n\n\nJupyter Notebook have become the standard for literate programming (i.e. mix code and program). They need a special server to be run. You can run one locally (Jupyter Lab) or use an online one (Colab). If you use VSCode and open a notebook it will launch a server for you.\nOnce a notebook is open, you can execute a cell and move to the next one by pressing shift+Enter. Results are printed below each cell.\n\n\n\nType python in a console or terminal. You get an interactive prompt, where you can evaluate any expression. If it is installed, you can use a nicer, interactive prompt: ipython.\nIt is possible to run python programs in a non-interactive way from the command line. Just type python followed by the file (ending in .py) that you want to run.\nPython scripts can be edited using any text editor. If you don’t have strong views, I recommend Visual Studio Code.\n\n\n\n\n\n\n\n# integers and floats\n\n\n1\n\n\n1.0\n\n\n# conversion with int() and float()\n\n\n# floor: int()\n\n\n# no difference between various types of floats (16 bits, 32 bits, 64 bits, ...)\n\n\n# usual operations + - *\nprint( 2 + 3 )\nprint( 9 - 6 )\nprint( 3 / 2 )\nprint(2304310958 * 41324)\n\n\n# divisions / and //\nprint(3 / 4)\nprint(13 // 4)\n\n\n# exponentiation ** (not ^!)\n# (1.04)^10\n(1.04)**10\n\n\n# comparison operators: >, <, >=, <=, ==\n\nprint((1.0453432)*(0.96)  > 1.001 )\n\nprint(1.001 >= 1.001)\n\n\n# comparison operators can be chained:\nprint(0.2<0.4<0.5)\nprint(0.5<=0.4<=0.5) # equivalent to ((0.5<=0.4) and(0.4<=0.5))\n\n\n\n\nThere are only two booleans: True and False (note uppercase). None is a dummy type, which is used when no other type fits.\n\nprint( False )\nTrue\n\n\n(True, False, None)\n\n\nNone\n\nDouble equal sign tests for equality. Result should always be a boolean.\n\nTrue==False\n\nLogical operators are not, and and or:\n\n(True or False)\n\n\nnot (True or False)\n\n\n(1.3**1.04 > 1.9) | (1000**1143>1001**1142)\n\nOperators or and and can be replaced by | and & respectively. They are non-greedy, that is terms are not evaluated if the result of the comparison is already known.\n\nFalse and (print(\"Hello\"))\n\n\nprint( (print(\"Hello\")) and False )\n\n\n\n\n\n\nStrings are defined by enclosing characters either by ' (single quotes) or \" (double quote). Single quotes strings can contain double quotes strings and vice-versa.\n\n\"name\"\n\n\n'name'\n\n\n'I say \"hello\"'\n\n\n\"You can 'quote' me\"\n\nStrings spanning over sever lines can be defined with triple quotes (single or double).\n\ns = \"\"\"¿Qué es la vida? Un frenesí.\n¿Qué es la vida? Una ilusión,\nuna sombra, una ficción,\ny el mayor bien es pequeño;\nque toda la vida es sueño,\ny los sueños, sueños son.\n\"\"\"\n\nIt is also possible to use the newline character \\n.\n\n\"La vida es sueño,\\ny los sueños, sueños son.\"\n\n\nprint(\"La vida es sueño,\\ny los sueños, sueños son.\")\n\n\n\n\nStrings can contain any unicode character:\n\ns = \"🎻⽻༽\"\n\nRefresher: ASCII vs unicode\nASCII (or ASCII-US) is an old standard which codes a character with 7 bits (or 8 bits for extended ASCII). This allows to code 128 different characters (256 for ex-ASCII).\nOnly a subset of these characters can be printed regularly.\n\nchr(44)\n\n\n# ASCII: \nfor i in range(32,127):\n    print( chr(i), end=' ')\n\nThe other characters include delete, newline and carriage return among others.\n\ns = 'This is\\na\\nmultiline string.' # note the newline character '\\n'\n\n\n# print(s)\nlen(s)\n\nSome antiquated platforms still use newline + carriage return at the end of each line. This is absolutely not required and causes incompatibilities.\n\ns2 = 'This is\\n\\ra\\n\\rmultiline string.' # note the newline character '\\n' and carriager return '\\r'\n\n\nprint(s2)\nprint(len(s2))\n\nUnicode contains a repertoire of over 137,000 characters with all ASCII characters as subcases\nTo type: copy/paste, ctrl+shift+hexadecimal, latex + tab\n\n# example\nÆ\nγ\n\nÜ\n\nVariable names aka identifiers can contain unicode characters with some restrictions: - they cannot start with a digit - they can’t contain special variables (‘!,#,@,%,$’ and other unicode specials ???) - they can contain underscore\n\n\n\nconcatenation\n\n'abc' + 'def'\n\n\n'abc'*3\n\n\n'abc' + 'abc' + 'abc'\n\n\n\n\n\n# strings can be accessed as arrays (0 based indexing)\ns = \"a b c\"\ns[0]\n\n\n# slice notation (  [min,max[ )\ns = \"a b c d\"\ns[2:5] # 0-based; 2 included, 5 excluded\n\n\n# substrings are easy to check\n\"a\" in s\n\n\n\"b c\" in \"a b c d\"\n\nIt is impossible to modify a substring.\n\n# but are immutable\ns = \"a b c\"\ns[1] = 0\n\nInstead, one can replace a substring:\n\ns\n\n\ns.replace(' ', '🎻')\n\nOr use string interpolation\n\n# string interpolation (old school)\n\"ny name is {name}\".format(name=\"nobody\")\n\n\n\"calculation took {time}s\".format(time=10000)\n\n\n# number format can be tweaked\n\"I am {age:.0f} years old\".format(age=5.65)\n\n\n# formatted strings\nelapsed = 15914884.300292\n\nf\"computations took {elapsed/3600:.2f} hours\"\n\n\nname = \"arnaldur\"\n\n\n\"dasnfnaksujhn {name}\".format(name=\"whatever\")\n\n\n# basic string operations: str.split, str.join, etc...\n# fast regular expressions\n# more on it, with text processing lesson\n\n\nstr.split(\"me,you,others,them\",',')\n\n\nstr.join( \" | \",\n    str.split(\"me,you,others,them\",','),\n)\n\n\n\n\nThe example above used several special characters: \\n which corresponds to only one ascii character and the curly brackets { and } which disappears after the string formatting. If one desires to print these characters precisely one needs to escape them using \\ and { }.\n\nprint(\"This is a one \\\\nline string\")\nprint(\"This string keeps some {{curly}} brackets{}\".format('.'))\n\n\n\n\n(check help(str) or help?)\n\nlen() : length\nstrip() : removes characters at the ends\nsplit() : split strings into several substrings separated by separator\njoin() : opposite of split\n\n\n'others,'\n\n\n',me,others,'.strip(',')\n\n\ns.count(',')\n\n\nhelp(str)\n\n\n\n\n\n\nAny object can be reused by assigning an identifier to it. This is done with assignment operator =.\n\na = 3\na\n\nNote that assignment operator = is different from comparison operator ==. Comparison operator is always True or False, while assignment operator has no value.\n\n(2==2) == True\n\n\n(a=2) == True\n\n\n\n\nAny object created in Python is identified by a unique id. One can think of it approximately as its reference. Object collections, contain arbitrary other python objects, that is they contain references to them.\n\nid(s)\n\n\n\n\n\n\n(1,2,\"a\" )\n\nSince tuples are immutable, two identical tuples, will always contain the same data.\n\nt1  = (2,23)\nt2  = (2,23)\n\n\n# can contain any data\nt = (1,2,3,4,5,6)\nt1 = (t, \"a\", (1,2))\nt2 = (0,)  # note trailing coma for one element tuple\nt3 = (t, \"a\", (1,2))\n\n\nt[0] = 78\n\nSince tuples never change, they can be compared by hash values (if the data they hold can be hashed). Two tuples are identical if they contain the same data.\nRemark: hash function is any function that can be used to map data of arbitrary size to data of a fixed size. It is such that the probability of two data points of having the same hash is very small even if they are close to each other.\n\nt3 == t1\n\n\nprint(hash(t3))\nprint(hash(t1))\n\n\nid(t3), id(t1)\n\n\n\n\n\n# elements are accessed with brackets (0-based)\nt[0]\n\n\n# slice notation works too (  [min,max[ )\nt[1:3]\n\n\n# repeat with *\n(3,2)*5\n\n\n(0)*5\n\n\n(0,)*5\n\n\nt2*5\n\n\n# concatenate with +\nt+t1+t2\n\n\n# test for membership\n\n(1 in t)\n\n\n\n\n\nlists are enclosed by brackets are mutable ordered collections of elements\n\nl = [1,\"a\",4,5]\n\n\nl[1]\n\n\nl[1:] # if we omit the upper-bound it goes until the last element\n\n\nl[:2]\n\n\n# lists are concatenated with +\nl[:2] + l[2:] == l\n\n\n# test for membership\n(5 in l)\n\n\n# lists can be extended inplace\nll = [1,2,3]\nll.extend([4,5]) # several elements\nll.append(6)\nll\n\nSince lists are mutable, it makes no sense to compute them by hash value (or the hash needs to be recomputed every time the values change).\n\nhash(ll)\n\nSorted lists can be created with sorted (if elements can be ranked)\n\nll = [4,3,5]\n\n\nsorted(ll)\n\n\nll\n\nIt is also possible to sort in place.\n\nll.sort()\nll\n\n\nsorted(ll) # creates a new list\nll.sort()  # does it in place\n\n\n# in python internals:    ll.sort() equivalent sort(ll)\n\n\n\n\nSets are unordered collections of unique elements.\n\ns1 = set([1,2,3,3,4,3,4])\ns2 = set([3,4,4,6,8])\nprint(s1, s2)\nprint(s1.intersection(s2))\n\n\n{3,4} == {4,3}\n\n\n\n\nDictionaries are ordered associative collections of elements. They store values associated to keys.\n\n# construction with curly brackets\nd = {'a':0, 'b':1}\n\n\nd\n\n\n# values can be recovered by indexing the dict with a key\nd['b']\n\n\nd = dict()\n# d['a'] = 42\n# d['b'] = 78\nd\n\n\nd['a'] = 42\n\n\nd['b']\n\nKeys can be any hashable value:\n\nd[('a','b')] = 100\n\n\nd[ ['a','b'] ] = 100 # that won't work\n\nNote: until python 3.5 dictionaries were not ordered. Now the are guaranteed to keep the insertion order\n\n\n\n\n\n\nConditional blocks are preceeded by if and followed by an indented block. Note that it is advised to indent a block by a fixed set of space (usually 4) rather than use tabs.\n\nif 'sun'>'moon':\n    print('warm')\n\nThey can also be followed by elif and else statements:\n\nx = 0.5\nif (x<0):\n    y = 0.0\nelif (x<1.0):\n    y = x\nelse:\n    y = 1+(x-1)*0.5\n\nRemark that in the conditions, any variable can be used. The following evaluate to False: - 0 - empty collection\n\nif 0: print(\"I won't print this.\")\nif 1: print(\"Maybe I will.\")\nif {}: print(\"Sir, your dictionary is empty\")\nif \"\": print(\"Sir, there is no string to speak of.\")\n\n\n\n\nThe content of the while loop is repeated as long as a certain condition is met. Don’t forget to change that condition or the loop might run forever.\n\npoint_made = False\ni = 0\nwhile not point_made:\n    print(\"A fanatic is one who can't change his mind and won't change the subject.\")\n    i += 1 # this is a quasi-synonym of i = i + 1\n    if i>=20:\n          point_made = True\n\n\n\n\n\n# while loops\ni = 0\nwhile i<=10:\n    print(str(i)+\" \",  end='')\n    i+=1\n\n\n# for loop\nfor i in [0,1,2,3,4,5,6,7,8,9,10]:\n    print(str(i)+\" \",  end='')\n\n\n# this works for any kind of iterable\n# for loop\nfor i in (0,1,2,3,4,5,6,7,8,9,10):\n    print(str(i)+\" \",  end='')\n\n\n# including range generator (note last value)\nfor i in range(11): \n    print(str(i)+\" \",  end='')\n\n\nrange(11)\n\n\n# one can also enumerate elements\ncountries = (\"france\", \"uk\", \"germany\")\nfor i,c in enumerate(countries): \n    print(f\"{i}: {c}\")\n\n\ns = set(c)\n\n\n# conditional blocks are constructed with if, elif, else\nfor i,c in enumerate(countries):\n    if len(set(c).intersection(set(\"brexit\"))):\n        print(c)\n    else:\n        print(c + \" 😢\")\n\nIt is possible to iterate over any iterable. This is true for a list or a generator:\n\nfor i in range(10): # range(10) is a generator\n    print(i)\n\n\nfor i in [0,1,2,3,4,5,6,7,8,9]:\n    print(i)\n\nWe can iterate of dictionary keys or values\n\nd = {1:2, 3:'i'}\nfor k in d.keys():\n    print(k, d[k])\nfor k in d.values():\n    print(k)\n\nor both at the same time:\n\nfor t in d.items():\n    print(t)\n\n# look at automatic unpacking\nfor (k,v) in d.items():\n    print(f\"key: {k}, value: {v}\")\n\n\n\n\nThere is an easy syntax to construct lists/tuples/dicts: comprehension. Syntax is remminiscent of a for loop.\n\n[i**2 for i in range(10)]\n\n\nset(i-(i//2*2) for i in range(10))\n\n\n{i: i**2 for i in range(10)}\n\nComprehension can be combined with conditions:\n\n[i**2 for i in range(10) if i//3>2]\n\nBehind the comprehension syntax, there is a special object called generator. Its role is to supply objects one by one like any other iterable.\n\n# note the bracket\ngen = (i**2 for i in range(10))\ngen # does nothing\n\n\ngen = (i**2 for i in range(10))\nfor e in gen:\n    print(e)\n\n\ngen = (i**2 for i in range(10))\nprint([e for e in gen])\n\nThere is a shortcut to converte a generator into a list: it’s called unpacking:\n\ngen = (i**2 for i in range(10))\n[*gen]\n\n\n\n\n\nWrong approach\n\na1 = 34\nb1 = (1+a1*a1)\nc1 = (a1+b1*b1)\n\na2 = 36\nb2 = (1+a2*a2)\nc2 = (a2+b2*b2)\n\nprint(c1,c2)\n\nBetter approach\n\ndef calc(a):\n    b = 1+a*a\n    c = a+b*b\n    return c\n\n(calc(34), calc(36))\n\nit is equivalent to replace the content of the function by:\n\na = 32\n_a = a          # def calc(a):\n_b = 1+_a*_a    #    b = 1+a*a\n_c = _a+_b*_b   #    c = a+b*b\nres = _c        #    return c\n\nNote that variable names within the function have different names. This is to avoid name conflicts as in:\n\ny = 1\ndef f(x):\n    y = x**2\n    return y+1\ndef g(x):\n    y = x**2+0.1\n    return y+1\nr1 = f(1.4)\nr2 = g(1.4)\nr3 = y\n(r1,r2,r3)\n\n\nl = ['france', 'germany']\ndef fun(i):\n    print(f\"Country: {l[i]}\")\nfun(0)\n\n\nl = ['france', 'germany']\ndef fun(i):\n    l = ['usa', 'japan']\n    l.append('spain')\n    print(f\"Country: {l[i]}\")\nfun(0)\n\n\nl\n\nIn the preceding code block, value of y has not been changed by calling the two functions. Check pythontutor.\n\n\nFunction definitions start with def and a colon indentation. Value are returned by return keyword. Otherwise the return value is None. Functions can have several arguments: def f(x,y) but always one return argument. It is however to return a tuple, and “unpack” it.\n\ndef f(x,y):\n    z1 = x+y\n    z2 = x-y\n    return (z1,z2)      # here brackets are optional:  `return z1,z2` works too\n\nres = f(0.1, 0.2)\nt1, t2 = f(0.2, 0.2)     # t1,t2=res works too\n\n\nres\n\nNamed arguments can be passed in any order and receive default values.\n\ndef problem(why=\"The moon shines.\", what=\"Curiosity killed the cat.\", where=\"Paris\"):\n    print(f\"Is it because {why.lower().strip('.')} that {what.lower().strip('.')}, in {where.strip('.')}?\")\n\n\nproblem(where='Paris')\n\n\nproblem(where=\"ESCP\", why=\"Square root of two is irrational\", what=\"Some regressions never work.\")\n\nPositional arguments and keyword arguments can be combined\n\ndef f(x, y, β=0.9, γ=4.0, δ=0.1):\n    return x*β+y**γ*δ\n\n\nf(0.1, 0.2)\n\n\n\n\nFunctions are documented with a special string. Documentation It must follow the function signature immediately and explain what arguments are expected and what the function does\n\ndef f(x, y, β=0.9, γ=4.0, δ=0.1):   # kjhkugku\n    \"\"\"Compute the model residuals\n    \n    Parameters\n    ----------\n    x: (float) marginal propensity to do complicated stuff\n    y: (float) inverse of the elasticity of bifractional risk-neutral substitution\n    β: (float) time discount (default 0.9)\n    γ: (float) time discount (default 4.0)\n    δ: (float) time discount (default 0.1)\n    \n    Result\n    ------\n    res: beta-Hadamard measure of cohesiveness\n    \n    \"\"\"\n    res = x*β+y**γ*δ\n    return res\n\nRemark: Python 3.6 has introduced type indication for functions. They are useful as an element of indication and potentially for type checking. We do not cover them in this tutorial but this is what they look like:\n\ndef f(a: int, b:int)->int:\n    if a<=1:\n        return 1\n    else:\n        return f(a-1,b) + f(a-2,b)*b\n\n\n\n\nA common case is when one wants to pass the elements of an iterable as positional argument and/or the elements of a dictionary as keyword arguments. This is espacially the case, when one wants to determine functions that act on a given calibration. Without unpacking all arguments would need to be passed separately.\n\nv = (0.1, 0.2)\np = dict(β=0.9, γ=4.0, δ=0.1)\n\nf(v[0], v[1], β=p['β'], γ=p['γ'], δ=p['δ'])\n\nThere is a special syntax for that: * unpacks positional arguments and ** unpacks keyword arguments. Here is an example:\n\nf(*v, **p)\n\nThe same characters * and ** can actually be used for the reverse operation, that is packing. This is useful to determine functions of a variable number of arguments.\n\ndef fun(**p):\n    β = p['β']\n    return β+1\nfun(β=1.0)\nfun(β=1.0, γ=2.0) # γ is just ignored\n\nInside the function, unpacked objects are lists and dictionaries respectively.\n\ndef fun(*args, **kwargs):\n    print(f\"Positional arguments: {len(args)}\")\n    for a in args:\n        print(f\"- {a}\")\n    print(f\"Keyword arguments: {len(args)}\")\n    for key,value in kwargs.items():\n        print(f\"- {key}: {value}\")\n\n\nfun(0.1, 0.2, a=2, b=3, c=4)\n\n\n\n\nThis means they can be assigned and passed around.\n\ndef f(x): return 2*x*(1-x)\ng = f # now `g` and `f` point to the same function\ng(0.4)\n\n\ndef sumsfun(l, f):\n    return [f(e) for e in l]\n\n\nsumsfun([0.0, 0.1, 0.2], f)\n\n\ndef compute_recursive_series(x0, fun, T=50):\n    a = [x0]\n    for t in range(T):\n        x0 = a[-1]\n        x = fun(x0)\n        a.append(x)\n    return a\n\ncompute_recursive_series(0.3, f, T=5)\n\nThere is another syntax to define a function, without giving it a name first: lambda functions. It is useful when passing a function as argument.\n\nsorted(range(6), key=lambda x: (-2)**x)\n\nLambda functions are also useful to reduce quickly the number of arguments of a function (aka curryfication)\n\ndef logistic(μ,x): return μ*x*(1-x)\n# def chaotic(x): return logistic(3.7, x)\n# def convergent(x): return logistic(2.5, x)\nchaotic = lambda x: logistic(3.7, x)\nconvergent = lambda x: logistic(2.5, x)\n\n\nl = [compute_recursive_series(0.3,fun, T=20) for fun in [convergent, chaotic]]\n[*zip(*l)]\n\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\ntab = np.array(l)\nplt.plot(tab[0,:-1],tab[0,1:])\ntab = np.array(l)\nplt.plot(tab[1,:-1],tab[1,1:])\nplt.plot(np.linspace(0,1),np.linspace(0,1))\nplt.xlabel(\"$x_n$\")\nplt.ylabel(\"$x_{n+1}$\")\nplt.grid()\n\n\n\n\nMost of the time, variable affectation just create a reference.\n\na = [1,2,3]\nb = a\na[1] = 0\n(a, b)\n\nTo get a copy instead, one needs to specify it explicitly.\n\nimport copy\na = [1,2,3]\nb = copy.copy(a)\na[1] = 0\n(a, b)\n\nNot that copy follows only one level of references. Use deepcopy for more safety.\n\na0 = ['a','b']\na = [a0, 1, 2]\nb = copy.copy(a)\na[0][0] = 'ξ'\na, b\n\n\na0 = ['a','b']\na = [a0, 1, 2]\nb = copy.deepcopy(a)\na[0][0] = 'ξ'\na, b\n\nArguments in a function are references towards the original object. No data is copied. It is then easy to construct functions with side-effects.\n\ndef append_inplace(l1, obs):\n    l1.append(obs)\n    return l1\nl1, obs = ([1,2,3], 1.5)\nl2 = append_inplace(l1,obs)\nprint(l2, l1)\n# note that l1 and l2 point to the same object\nl1[0] = 'hey'\nprint(l2, l1)\n\nThis behaviour might feel unnatural but is very sensible. For instance if the argument is a database of several gigabytes and one wants to write a function which will modify a few of its elements, it is not reasonable to copy the db in full.\n\n\n\n\nObjects ?\n\ncan be passed around / referred too\nhave properties (data) and methods (functions) attached to them\ninherit properties/methods from other objects\n\nObjects are defined by a class definition. By convention, classes names start with uppercase . To create an object, one calls the class name, possibly with additional arguments.\n\nclass Dog:\n    name = \"May\" # class property\n\nd1 = Dog()\nd2 = Dog()\n\nprint(f\"Class: d1->{type(d1)}, d2->{type(d2)}\")\nprint(f\"Instance address: d2->{d1},{d2}\")\n\nNow, d1 and d2 are two different instances of the same class Dog. Since properties are mutable, instances can have different data attached to it.\n\nd1.name = \"Boris\"\nprint([e.name for e in [d1,d2]])\n\nMethods are functions attached to a class / an instance. Their first argument is always an instance. The first argument can be used to acess data held by the instance.\n\nclass Dog:\n    name = None # default value\n    def bark(self):\n        print(\"Wouf\")\n    def converse(self):\n        n = self.name\n        print(f\"Hi, my name is {n}. I'm committed to a strong and stable government.\")\n        \nd = Dog()\nd.bark()   # bark(d)\nd.converse()\n\n\n\nThere is also a special method __init__ called the constructor. When an object is created, it is called on the instance. This is useful in order to initialize parameters of the instance.\n\nclass Calibration:\n    \n    def __init__(self, x=0.1, y=0.1, β=0.0):\n        if not (β>0) and (β<1):\n            raise Exception(\"Incorrect calibration\"})\n        self.x = x\n        self.y = y\n        self.β = β\n    \n\n\nc1 = Calibration()\nc2 = Calibration(x=3, y=4)\n\nTwo instances of the same class have the same method, but can hold different data. This can change the behaviour of these methods.\n\n# class Dog:\n    \n#     state = 'ok'\n    \n#     def bark(self):\n#         if self.state == 'ok':\n#             print(\"Wouf!\")\n#         else:\n#             print(\"Ahouuu!\")\n        \n# d = Dog()\n# d1 = Dog()\n# d1.state = 'hungry'\n\n# d.bark()\n# d1.bark()\n\nTo write a function which will manipulate properties and methods of an object, it is not required to know its type in advance. The function will succeed as long as the required method exist, fail other wise. This is called “Duck Typing”: if it walks like a duck, it must be a duck…\n\nclass Duck:\n    def walk(self): print(\"/-\\_/-\\_/\")\n        \nclass Dog:\n    def walk(self): print(\"/-\\_/*\\_/\")\n    def bark(self): print(\"Wouf\")\n\n\nanimals = [C() for C in (Duck,Dog)]\ndef go_in_the_park(animal):\n    for i in range(3): animal.walk()\nfor a in animals:\n    go_in_the_park(a)\n\n\n\nThe whole point of classes, is that one can construct hierarchies of classes to avoid redefining the same methods many times. This is done by using inheritance.\n\nclass Animal:\n    \n    def run(self): print(\"👣\"*4)\n\nclass Dog(Animal):\n    def bark(self): print(\"Wouf\")\n        \nclass Rabbit(Animal):\n    def run(self):\n        super().run() ; print( \"🐇\" )\n\n\nAnimal().run()\ndog = Dog()\ndog.run()\ndog.bark()\nRabbit().run()\n\nIn the above example, the Dog class inherits from inherits the method run from the Animal class: it doesn’t need to be redefined again. Essentially, when run(dog) is called, since the method is not defined for a dog, python looks for the first ancestor of dog and applies the method of the ancestor.\n\n\n\nBy conventions methods starting with double lowercase __ are hidden. They don’t appear in tab completion. Several special methods can be reimplemented that way.\n\nclass Calibration:\n    \n    def __init__(self, x=0.1, y=0.1, β=0.1):\n        if not (β>0) and (β<1):\n            raise Exception(\"Incorrect calibration\")\n        self.x = x\n        self.y = y\n        self.β = β\n    \n    def __str__(self):\n        return f\"Calibration(x={self.x},y={self.y}, β={self.β})\"\n\n\nstr(Calibration() )\n\n\n\n\nPython is not 100% object oriented. - some objects cannot be subclassed - basic types behave sometimes funny (interning strings)\n\na = 'a'*4192\nb = 'a'*4192\na is b\n\n\na = 'a'*512\nb = 'a'*512\na is b"
  },
  {
    "objectID": "session_3/index.html#descriptive-statistics",
    "href": "session_3/index.html#descriptive-statistics",
    "title": "Linear Regression",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics"
  },
  {
    "objectID": "session_3/index.html#fitting-the-data",
    "href": "session_3/index.html#fitting-the-data",
    "title": "Linear Regression",
    "section": "Fitting the data",
    "text": "Fitting the data"
  },
  {
    "objectID": "session_3/index.html#explained-variance",
    "href": "session_3/index.html#explained-variance",
    "title": "Linear Regression",
    "section": "Explained Variance",
    "text": "Explained Variance"
  },
  {
    "objectID": "session_3/index.html#statistical-inference",
    "href": "session_3/index.html#statistical-inference",
    "title": "Linear Regression",
    "section": "Statistical inference",
    "text": "Statistical inference"
  },
  {
    "objectID": "session_3/index.html#now-lets-practice",
    "href": "session_3/index.html#now-lets-practice",
    "title": "Linear Regression",
    "section": "Now let’s practice",
    "text": "Now let’s practice"
  },
  {
    "objectID": "session_3/Regressions-correction.html",
    "href": "session_3/Regressions-correction.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n  \n    \n      \n      type\n      income\n      education\n      prestige\n    \n  \n  \n    \n      accountant\n      prof\n      62\n      86\n      82\n    \n    \n      pilot\n      prof\n      72\n      76\n      83\n    \n    \n      architect\n      prof\n      75\n      92\n      90\n    \n    \n      author\n      prof\n      55\n      90\n      76\n    \n    \n      chemist\n      prof\n      64\n      86\n      90\n    \n  \n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta \\times \\text{education}\\) . Plot.\nCompute total, explained, unexplained variance. Compute R^2 statistics\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0>\n\n\n\nres_1.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.525\n\n\n  Model:                   OLS         Adj. R-squared:        0.514\n\n\n  Method:             Least Squares    F-statistic:           47.51\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 1.84e-08\n\n\n  Time:                 11:29:50       Log-Likelihood:      -190.42\n\n\n  No. Observations:          45        AIC:                   384.8\n\n\n  Df Residuals:              43        BIC:                   388.5\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.6035     5.198     2.040  0.048     0.120    21.087\n\n\n  education     0.5949     0.086     6.893  0.000     0.421     0.769\n\n\n\n\n  Omnibus:        9.841   Durbin-Watson:         1.736\n\n\n  Prob(Omnibus):  0.007   Jarque-Bera (JB):     10.609\n\n\n  Skew:           0.776   Prob(JB):            0.00497\n\n\n  Kurtosis:       4.802   Cond. No.               123.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      type\n      income\n      education\n      prestige\n    \n  \n  \n    \n      accountant\n      prof\n      62\n      86\n      82\n    \n    \n      pilot\n      prof\n      72\n      76\n      83\n    \n    \n      architect\n      prof\n      75\n      92\n      90\n    \n    \n      author\n      prof\n      55\n      90\n      76\n    \n    \n      chemist\n      prof\n      64\n      86\n      90\n    \n  \n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.702\n\n\n  Model:                   OLS         Adj. R-squared:        0.695\n\n\n  Method:             Least Squares    F-statistic:           101.3\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 7.14e-13\n\n\n  Time:                 11:55:59       Log-Likelihood:      -179.93\n\n\n  No. Observations:          45        AIC:                   363.9\n\n\n  Df Residuals:              43        BIC:                   367.5\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.8840     3.678     2.959  0.005     3.467    18.301\n\n\n  prestige      0.6497     0.065    10.062  0.000     0.519     0.780\n\n\n\n\n  Omnibus:        8.893   Durbin-Watson:         2.048\n\n\n  Prob(Omnibus):  0.012   Jarque-Bera (JB):     19.848\n\n\n  Skew:           0.047   Prob(JB):           4.90e-05\n\n\n  Kurtosis:       6.252   Cond. No.               104.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\n__Use statsmodels to estimate $ = + + _2 + $. Comment regression statistics.__\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.702\n\n\n  Model:                   OLS         Adj. R-squared:        0.688\n\n\n  Method:             Least Squares    F-statistic:           49.55\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 8.88e-12\n\n\n  Time:                 11:56:03       Log-Likelihood:      -179.90\n\n\n  No. Observations:          45        AIC:                   365.8\n\n\n  Df Residuals:              42        BIC:                   371.2\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.4264     4.164     2.504  0.016     2.024    18.829\n\n\n  education     0.0323     0.132     0.244  0.808    -0.234     0.299\n\n\n  prestige      0.6237     0.125     5.003  0.000     0.372     0.875\n\n\n\n\n  Omnibus:        9.200   Durbin-Watson:         2.053\n\n\n  Prob(Omnibus):  0.010   Jarque-Bera (JB):     21.265\n\n\n  Skew:           0.075   Prob(JB):           2.41e-05\n\n\n  Kurtosis:       6.364   Cond. No.               168.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      1.000000\n      0.724512\n      0.837801\n    \n    \n      education\n      0.724512\n      1.000000\n      0.851916\n    \n    \n      prestige\n      0.837801\n      0.851916\n      1.000000\n    \n  \n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\n\n\nImport dataset from data.dta. Explore dataset (statistics, plots)\n\nimport pandas\n\n\ndf = pandas.read_stata('data.dta')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      index\n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0\n      1.504053\n      0.543556\n      1.917895\n    \n    \n      1\n      1\n      43.619758\n      0.543113\n      4.058487\n    \n    \n      2\n      2\n      1.226398\n      0.736955\n      1.785403\n    \n    \n      3\n      3\n      89.103260\n      0.996219\n      6.321152\n    \n    \n      4\n      4\n      32.117073\n      0.140142\n      3.445228\n    \n  \n\n\n\n\nOur goal is to explain z by x and y. Run a regression.\n\nfrom statsmodels.formula import api as smf\n\n\nmodel = smf.ols('z ~ x + y', data=df)\nres = model.fit()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            z          R-squared:             0.800\n\n\n  Model:                   OLS         Adj. R-squared:        0.791\n\n\n  Method:             Least Squares    F-statistic:           93.90\n\n\n  Date:             Tue, 23 Feb 2021   Prob (F-statistic): 3.82e-17\n\n\n  Time:                 10:41:10       Log-Likelihood:      -57.244\n\n\n  No. Observations:          50        AIC:                   120.5\n\n\n  Df Residuals:              47        BIC:                   126.2\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     1.2177     0.243     5.019  0.000     0.730     1.706\n\n\n  x             0.0356     0.003    12.235  0.000     0.030     0.041\n\n\n  y             1.9128     0.369     5.177  0.000     1.169     2.656\n\n\n\n\n  Omnibus:        3.205   Durbin-Watson:         1.859\n\n\n  Prob(Omnibus):  0.201   Jarque-Bera (JB):      2.349\n\n\n  Skew:           0.277   Prob(JB):              0.309\n\n\n  Kurtosis:       3.906   Cond. No.               187.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nComments: regression looks significant. \\(R^2\\) looks good. Fisher statistics, is conclusive (the hypothesis H0 that all coefficients are zero is rejected at a 3.82e-17 confidence level.. The student statistics are also quite high. For each coefficient, the hypothesis H0 that coefficient is zero is rejected at a 0.001 confidence level.\nExamine the residuals of the regression. What’s wrong? Remedy?\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(res.resid, 'o')\n\n\n\n\n\nplt.subplot(131)\nplt.plot(df['x'], df['y'],'o')\nplt.subplot(132)\nplt.plot(df['y'], df['z'],'o')\nplt.subplot(133)\nplt.plot(df['x'], df['z'],'o')\nplt.xlabel(\"x\")\nplt.ylabel(\"z\")\n\nplt.tight_layout()\n\n\n\n\n\nimport numpy as np\nplt.plot( np.log(df['z']), np.log(df['x']), 'o' )\n\n\n\n\nApparently, there is a linear relationship between ‘log(x)’ and log(y)\n\nfrom numpy import log\n\n\nmodel = smf.ols('log(z) ~ log(x) + y', data=df)\nres = model.fit()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         log(z)        R-squared:             0.957\n\n\n  Model:                   OLS         Adj. R-squared:        0.955\n\n\n  Method:             Least Squares    F-statistic:           525.6\n\n\n  Date:             Tue, 23 Feb 2021   Prob (F-statistic): 6.89e-33\n\n\n  Time:                 10:41:56       Log-Likelihood:       44.223\n\n\n  No. Observations:          50        AIC:                  -82.45\n\n\n  Df Residuals:              47        BIC:                  -76.71\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.0128     0.039     0.326  0.746    -0.066     0.092\n\n\n  log(x)        0.2957     0.010    29.878  0.000     0.276     0.316\n\n\n  y             0.6164     0.048    12.735  0.000     0.519     0.714\n\n\n\n\n  Omnibus:        4.351   Durbin-Watson:         2.490\n\n\n  Prob(Omnibus):  0.114   Jarque-Bera (JB):      1.936\n\n\n  Skew:           0.089   Prob(JB):              0.380\n\n\n  Kurtosis:       2.052   Cond. No.               12.1\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nplt.plot(res.resid, 'o')\n\n\n\n\n\n\n\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\nImport macro data from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html)\n\nimport statsmodels\n\n## google: stats models macrodata\n## google: statsmodels datasets  -> example in the tutorial\n\n# https://www.statsmodels.org/0.6.1/datasets/index.html\n# example about how to use lengley database\n\n\nimport statsmodels.api as sm\n\n\nsm.datasets.macrodata\n\n<module 'statsmodels.datasets.macrodata' from '/home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages/statsmodels/datasets/macrodata/__init__.py'>\n\n\n\nds = sm.datasets.macrodata.load_pandas()\n\n\ndf = ds.raw_data\ndf.head()\n\n\n\n\n\n  \n    \n      \n      year\n      quarter\n      realgdp\n      realcons\n      realinv\n      realgovt\n      realdpi\n      cpi\n      m1\n      tbilrate\n      unemp\n      pop\n      infl\n      realint\n    \n  \n  \n    \n      0\n      1959.0\n      1.0\n      2710.349\n      1707.4\n      286.898\n      470.045\n      1886.9\n      28.98\n      139.7\n      2.82\n      5.8\n      177.146\n      0.00\n      0.00\n    \n    \n      1\n      1959.0\n      2.0\n      2778.801\n      1733.7\n      310.859\n      481.301\n      1919.7\n      29.15\n      141.7\n      3.08\n      5.1\n      177.830\n      2.34\n      0.74\n    \n    \n      2\n      1959.0\n      3.0\n      2775.488\n      1751.8\n      289.226\n      491.260\n      1916.4\n      29.35\n      140.5\n      3.82\n      5.3\n      178.657\n      2.74\n      1.09\n    \n    \n      3\n      1959.0\n      4.0\n      2785.204\n      1753.7\n      299.356\n      484.052\n      1931.3\n      29.37\n      140.0\n      4.33\n      5.6\n      179.386\n      0.27\n      4.06\n    \n    \n      4\n      1960.0\n      1.0\n      2847.699\n      1770.5\n      331.722\n      462.199\n      1955.5\n      29.54\n      139.6\n      3.50\n      5.2\n      180.007\n      2.31\n      1.19\n    \n  \n\n\n\n\nCreate a database with all variables of interest including detrended gdp\n\ngdp = df['realgdp']\ninflation = df['infl']\nrealint = df['realint']\n\n\nddf = df # \n\n\nddf.head()\n\n\n\n\n\n  \n    \n      \n      year\n      quarter\n      realgdp\n      realcons\n      realinv\n      realgovt\n      realdpi\n      cpi\n      m1\n      tbilrate\n      unemp\n      pop\n      infl\n      realint\n    \n  \n  \n    \n      0\n      1959.0\n      1.0\n      2710.349\n      1707.4\n      286.898\n      470.045\n      1886.9\n      28.98\n      139.7\n      2.82\n      5.8\n      177.146\n      0.00\n      0.00\n    \n    \n      1\n      1959.0\n      2.0\n      2778.801\n      1733.7\n      310.859\n      481.301\n      1919.7\n      29.15\n      141.7\n      3.08\n      5.1\n      177.830\n      2.34\n      0.74\n    \n    \n      2\n      1959.0\n      3.0\n      2775.488\n      1751.8\n      289.226\n      491.260\n      1916.4\n      29.35\n      140.5\n      3.82\n      5.3\n      178.657\n      2.74\n      1.09\n    \n    \n      3\n      1959.0\n      4.0\n      2785.204\n      1753.7\n      299.356\n      484.052\n      1931.3\n      29.37\n      140.0\n      4.33\n      5.6\n      179.386\n      0.27\n      4.06\n    \n    \n      4\n      1960.0\n      1.0\n      2847.699\n      1770.5\n      331.722\n      462.199\n      1955.5\n      29.54\n      139.6\n      3.50\n      5.2\n      180.007\n      2.31\n      1.19\n    \n  \n\n\n\n\nWe use the fisher relation: \\(r_t = i_t - \\pi_t\\)\n\nddf['ir'] = ddf['realint'] + ddf['infl']\n\nto detrend the gdp, we use hp-filter function from scipy google: hpfilter scipy\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\n\n\ncycle, trend = hpfilter(ddf['realgdp'])\n\n\nddf['gdp'] = cycle/trend*100 # nominal interest rate and inflation are in percent\n\n\nddf.head()\n\n\n\n\n\n  \n    \n      \n      year\n      quarter\n      realgdp\n      realcons\n      realinv\n      realgovt\n      realdpi\n      cpi\n      m1\n      tbilrate\n      unemp\n      pop\n      infl\n      realint\n      ir\n      gdp\n    \n  \n  \n    \n      0\n      1959.0\n      1.0\n      2710.349\n      1707.4\n      286.898\n      470.045\n      1886.9\n      28.98\n      139.7\n      2.82\n      5.8\n      177.146\n      0.00\n      0.00\n      0.00\n      1.479383\n    \n    \n      1\n      1959.0\n      2.0\n      2778.801\n      1733.7\n      310.859\n      481.301\n      1919.7\n      29.15\n      141.7\n      3.08\n      5.1\n      177.830\n      2.34\n      0.74\n      3.08\n      2.967657\n    \n    \n      2\n      1959.0\n      3.0\n      2775.488\n      1751.8\n      289.226\n      491.260\n      1916.4\n      29.35\n      140.5\n      3.82\n      5.3\n      178.657\n      2.74\n      1.09\n      3.83\n      1.792534\n    \n    \n      3\n      1959.0\n      4.0\n      2785.204\n      1753.7\n      299.356\n      484.052\n      1931.3\n      29.37\n      140.0\n      4.33\n      5.6\n      179.386\n      0.27\n      4.06\n      4.33\n      1.110571\n    \n    \n      4\n      1960.0\n      1.0\n      2847.699\n      1770.5\n      331.722\n      462.199\n      1955.5\n      29.54\n      139.6\n      3.50\n      5.2\n      180.007\n      2.31\n      1.19\n      3.50\n      2.331547\n    \n  \n\n\n\n\nRun the basic regression\n\nfrom statsmodels.formula import api as sm\n\n\nmodel = sm.ols(\"ir ~ infl + gdp\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:           ir          R-squared:             0.389\n\n\n  Model:                   OLS         Adj. R-squared:        0.383\n\n\n  Method:             Least Squares    F-statistic:           63.65\n\n\n  Date:             Tue, 02 Mar 2021   Prob (F-statistic): 4.06e-22\n\n\n  Time:                 11:54:15       Log-Likelihood:      -448.17\n\n\n  No. Observations:         203        AIC:                   902.3\n\n\n  Df Residuals:             200        BIC:                   912.3\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     3.2035     0.252    12.696  0.000     2.706     3.701\n\n\n  infl          0.5288     0.050    10.557  0.000     0.430     0.628\n\n\n  gdp           0.0795     0.105     0.759  0.449    -0.127     0.286\n\n\n\n\n  Omnibus:       30.222   Durbin-Watson:         0.417\n\n\n  Prob(Omnibus):  0.000   Jarque-Bera (JB):     50.662\n\n\n  Skew:           0.796   Prob(JB):           9.98e-12\n\n\n  Kurtosis:       4.858   Cond. No.               8.56\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?\n\nddf.head()\n\n\n\n\n\n  \n    \n      \n      year\n      quarter\n      realgdp\n      realcons\n      realinv\n      realgovt\n      realdpi\n      cpi\n      m1\n      tbilrate\n      unemp\n      pop\n      infl\n      realint\n      ir\n      gdp\n    \n  \n  \n    \n      0\n      1959.0\n      1.0\n      2710.349\n      1707.4\n      286.898\n      470.045\n      1886.9\n      28.98\n      139.7\n      2.82\n      5.8\n      177.146\n      0.00\n      0.00\n      0.00\n      1.479383\n    \n    \n      1\n      1959.0\n      2.0\n      2778.801\n      1733.7\n      310.859\n      481.301\n      1919.7\n      29.15\n      141.7\n      3.08\n      5.1\n      177.830\n      2.34\n      0.74\n      3.08\n      2.967657\n    \n    \n      2\n      1959.0\n      3.0\n      2775.488\n      1751.8\n      289.226\n      491.260\n      1916.4\n      29.35\n      140.5\n      3.82\n      5.3\n      178.657\n      2.74\n      1.09\n      3.83\n      1.792534\n    \n    \n      3\n      1959.0\n      4.0\n      2785.204\n      1753.7\n      299.356\n      484.052\n      1931.3\n      29.37\n      140.0\n      4.33\n      5.6\n      179.386\n      0.27\n      4.06\n      4.33\n      1.110571\n    \n    \n      4\n      1960.0\n      1.0\n      2847.699\n      1770.5\n      331.722\n      462.199\n      1955.5\n      29.54\n      139.6\n      3.50\n      5.2\n      180.007\n      2.31\n      1.19\n      3.50\n      2.331547\n    \n  \n\n\n\n\n\nmodel = sm.ols(\"ir ~ infl + gdp + pop + unemp -1\", data=ddf) # no intercept\nresults = model.fit()\nresults.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:           ir          R-squared (uncentered):         0.884\n\n\n  Model:                   OLS         Adj. R-squared (uncentered):    0.882\n\n\n  Method:             Least Squares    F-statistic:                    380.2\n\n\n  Date:             Tue, 02 Mar 2021   Prob (F-statistic):          5.64e-92\n\n\n  Time:                 11:58:05       Log-Likelihood:               -432.84\n\n\n  No. Observations:         203        AIC:                            873.7\n\n\n  Df Residuals:             199        BIC:                            886.9\n\n\n  Df Model:                   4                                             \n\n\n  Covariance Type:      nonrobust                                           \n\n\n\n\n           coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  infl      0.4380     0.049     8.895  0.000     0.341     0.535\n\n\n  gdp       0.5710     0.120     4.739  0.000     0.333     0.809\n\n\n  pop      -0.0050     0.002    -2.068  0.040    -0.010    -0.000\n\n\n  unemp     0.8064     0.108     7.458  0.000     0.593     1.020\n\n\n\n\n  Omnibus:        5.307   Durbin-Watson:         0.391\n\n\n  Prob(Omnibus):  0.070   Jarque-Bera (JB):      7.501\n\n\n  Skew:           0.070   Prob(JB):             0.0235\n\n\n  Kurtosis:       3.931   Cond. No.               247.\n\nNotes:[1] R² is computed without centering (uncentered) since the model does not contain a constant.[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nAt confidence level 2.5% gdp is between 0.333 and 0.809.\nAt confidence level 2.5% infl is between 0.341 and 0.535.\nThe coefficients would be significantly different from 0.5 if 0.5 was not in the condifence interval."
  },
  {
    "objectID": "session_3/Regressions.html",
    "href": "session_3/Regressions.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Import the Duncan/carData dataset\n\nimport statsmodels.api as sm\ndataset = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\ndf = dataset.data\ndf.head()\n\n\n\n\n\n  \n    \n      \n      type\n      income\n      education\n      prestige\n    \n  \n  \n    \n      accountant\n      prof\n      62\n      86\n      82\n    \n    \n      pilot\n      prof\n      72\n      76\n      83\n    \n    \n      architect\n      prof\n      75\n      92\n      90\n    \n    \n      author\n      prof\n      55\n      90\n      76\n    \n    \n      chemist\n      prof\n      64\n      86\n      90\n    \n  \n\n\n\n\nEstimate by hand the model \\(\\text{income} = \\alpha + \\beta \\times \\text{education}\\) . Plot.\nCompute total, explained, unexplained variance. Compute R^2 statistics\nUse statsmodels (formula API) to estimate \\(\\text{income} = \\alpha + \\beta \\times \\text{education}\\). Comment regression statistics.\n\n#https://www.statsmodels.org/stable/generated/statsmodels.formula.api.ols.html\n\nfrom statsmodels.formula import api as smf\n\nmodel_1 = smf.ols(\"income ~ education\", df)\nres_1 = model_1.fit()\n\n<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x7ffad5b135e0>\n\n\n\nres_1.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.525\n\n\n  Model:                   OLS         Adj. R-squared:        0.514\n\n\n  Method:             Least Squares    F-statistic:           47.51\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 1.84e-08\n\n\n  Time:                 11:29:50       Log-Likelihood:      -190.42\n\n\n  No. Observations:          45        AIC:                   384.8\n\n\n  Df Residuals:              43        BIC:                   388.5\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.6035     5.198     2.040  0.048     0.120    21.087\n\n\n  education     0.5949     0.086     6.893  0.000     0.421     0.769\n\n\n\n\n  Omnibus:        9.841   Durbin-Watson:         1.736\n\n\n  Prob(Omnibus):  0.007   Jarque-Bera (JB):     10.609\n\n\n  Skew:           0.776   Prob(JB):            0.00497\n\n\n  Kurtosis:       4.802   Cond. No.               123.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 5% p-value level both the intercept and the coefficient are significant. R-squared is 0.52: the model explains half of the variance.\nUse statsmodels to estimate \\(\\text{income} = \\alpha + \\beta \\times \\text{prestige}\\). Comment regression statistics.\n\nformula = \"income ~ education\"\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      type\n      income\n      education\n      prestige\n    \n  \n  \n    \n      accountant\n      prof\n      62\n      86\n      82\n    \n    \n      pilot\n      prof\n      72\n      76\n      83\n    \n    \n      architect\n      prof\n      75\n      92\n      90\n    \n    \n      author\n      prof\n      55\n      90\n      76\n    \n    \n      chemist\n      prof\n      64\n      86\n      90\n    \n  \n\n\n\n\n\nmodel_2 = smf.ols(\"income ~ prestige\", df)\nres_2 = model_2.fit()\n\n\nres_2.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.702\n\n\n  Model:                   OLS         Adj. R-squared:        0.695\n\n\n  Method:             Least Squares    F-statistic:           101.3\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 7.14e-13\n\n\n  Time:                 11:55:59       Log-Likelihood:      -179.93\n\n\n  No. Observations:          45        AIC:                   363.9\n\n\n  Df Residuals:              43        BIC:                   367.5\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.8840     3.678     2.959  0.005     3.467    18.301\n\n\n  prestige      0.6497     0.065    10.062  0.000     0.519     0.780\n\n\n\n\n  Omnibus:        8.893   Durbin-Watson:         2.048\n\n\n  Prob(Omnibus):  0.012   Jarque-Bera (JB):     19.848\n\n\n  Skew:           0.047   Prob(JB):           4.90e-05\n\n\n  Kurtosis:       6.252   Cond. No.               104.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe estimated regresssion is income = 10.6 + 0.59 education. At a 0.5% p-value level both the intercept and the coefficient are significant. R-squared is 0.70: the model predicts income better than the former one.\n__Use statsmodels to estimate $ = + + _2 + $. Comment regression statistics.__\n\nmodel_3 = smf.ols(\"income ~ education + prestige\", df)\nres_3 = model_3.fit()\n\n\nres_3.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         income        R-squared:             0.702\n\n\n  Model:                   OLS         Adj. R-squared:        0.688\n\n\n  Method:             Least Squares    F-statistic:           49.55\n\n\n  Date:             Tue, 02 Feb 2021   Prob (F-statistic): 8.88e-12\n\n\n  Time:                 11:56:03       Log-Likelihood:      -179.90\n\n\n  No. Observations:          45        AIC:                   365.8\n\n\n  Df Residuals:              42        BIC:                   371.2\n\n\n  Df Model:                   2                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    10.4264     4.164     2.504  0.016     2.024    18.829\n\n\n  education     0.0323     0.132     0.244  0.808    -0.234     0.299\n\n\n  prestige      0.6237     0.125     5.003  0.000     0.372     0.875\n\n\n\n\n  Omnibus:        9.200   Durbin-Watson:         2.053\n\n\n  Prob(Omnibus):  0.010   Jarque-Bera (JB):     21.265\n\n\n  Skew:           0.075   Prob(JB):           2.41e-05\n\n\n  Kurtosis:       6.364   Cond. No.               168.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe \\(R^2\\) is only slightly higher than last model, but adjusted \\(R^2\\) is actually lower: the model has less predictive power.\nThe coefficient for education is not significant. It should be dropped from the regresssion.\nThis might happen, because education and prestige are correlated. Let’s check it:\n\ndf.corr()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      1.000000\n      0.724512\n      0.837801\n    \n    \n      education\n      0.724512\n      1.000000\n      0.851916\n    \n    \n      prestige\n      0.837801\n      0.851916\n      1.000000\n    \n  \n\n\n\n\nEducation and prestige are correlated at 83%. It makes no sense keeping the two in the same regression.\nWHich model would you recommend? For which purpose?\nIf the goal is to predict income, the one with prestige only, has the highest prediction power. If we are interested in the effect of education, we keep only education.\nPlot the regression with prestige\n\na = res_2.params.Intercept\nb = res_2.params.prestige\n\n\nx = df['prestige']\n\n\ny = a + b*x\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x, df['income'],'o')\nplt.plot(x, y)\nplt.xlabel(\"prestige\")\nplt.xlabel(\"income\")\n\nText(0.5, 0, 'income')\n\n\n\n\n\nCheck visually normality of residuals\n\npred = a + b*x\nactual = df['income']\nresid = actual - pred  # same as res_2.resid\n\n\nplt.plot(x,resid, 'o')\n\n\n\n\n\nplt.hist(resid)\n\n(array([0.00255915, 0.        , 0.        , 0.00511829, 0.0486238 ,\n        0.02815062, 0.01535488, 0.01023659, 0.00255915, 0.00255915]),\n array([-46.40643935, -37.72299114, -29.03954294, -20.35609473,\n        -11.67264653,  -2.98919832,   5.69424989,  14.37769809,\n         23.0611463 ,  31.74459451,  40.42804271]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\n\n\nImport dataset from data.dta. Explore dataset (statistics, plots)\nOur goal is to explain z by x and y. Run a regression.\nExamine the residuals of the regression. What’s wrong? Remedy?\n\n\n\nIn 1993, John taylor, estimated, using US data the regression: \\(i_t = i^{\\star} + \\alpha_{\\pi} \\pi_t + \\alpha_{\\pi} y_t\\) where \\(\\pi_t\\) is inflation and \\(y_t\\) the output gap (let’s say deviation from real gdp from the trend). He found that both coefficients were not significantly different from \\(0.5\\). Our goal, is to replicate the same analysis.\nImport macro data from statsmodels (https://www.statsmodels.org/devel/datasets/generated/macrodata.html)\nCreate a database with all variables of interest including detrended gdp\nRun the basic regression\nWhich control variables would you propose to add? Does it increase prediction power? How do you interpret that?"
  },
  {
    "objectID": "session_3/graphs/Untitled1.html",
    "href": "session_3/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_3/graphs/inference.html",
    "href": "session_3/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_5/index.html#data",
    "href": "session_5/index.html#data",
    "title": "Introduction to Instrumental Variables",
    "section": "Data",
    "text": "Data\n\nOur multilinear regression: \\[y = \\alpha + \\beta x_1 + \\cdots + \\beta x_n\\]\nSo far, we have only considered real variables: (\\(x_i \\in \\mathbb{R}\\)).\n\nex: \\(x_{\\text{gdp}} = \\alpha + \\beta_1 x_{\\text{unemployment}} + \\beta_2 x_{\\text{inflation}}\\)\n\nHow do we deal with the following cases?\n\nbinary variable: \\(x\\in \\{0,1\\}\\) (or \\(\\{True, False}\\))\n\nex: \\(\\text{gonetowar}\\), \\(\\text{hasdegree}\\)\n\ncategorical variable:\n\nex: survey result (0: I don’t know, 1: I strongly disagree, 2: I disagree, 3: I agree, 4: I strongly agree)\nthere is no ranking of answers\nwhen there is ranking: hierarchical index\n\nnonnumerical variables:\n\nex: (flower type: \\(x\\in \\text{myosotis}, \\text{rose}, ...\\))"
  },
  {
    "objectID": "session_5/index.html#binary-variable",
    "href": "session_5/index.html#binary-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "Binary variable",
    "text": "Binary variable\n\nNothing to be done: just make sure variables take values 0 or 1. \\[y_\\text{salary} = \\alpha + \\beta x_{\\text{gonetowar}}\\]\nInterpretation:\n\nhaving gone to war is associated with a \\(\\beta\\) increase (or decrease?) in salary (still no causality)"
  },
  {
    "objectID": "session_5/index.html#categorical-variable",
    "href": "session_5/index.html#categorical-variable",
    "title": "Introduction to Instrumental Variables",
    "section": "Categorical variable",
    "text": "Categorical variable\n\nLook at the model: \\[y_{\\text{CO2 emission}} = \\alpha + \\beta x_{\\text{yellow vest support}} \\]\nWhere \\(y_{\\text{CO2 emission}}\\) is an individual’s CO2 emissions and \\(x_{\\text{yellow vest support}}\\) is the response the the question Are you in agreement with the yellow vests demands?.\nResponse is coded up as:\n\n0: Strongly disagree\n1: Disagree\n2: Neutral\n3: Agree\n4: Strongly agree\n\nIf the variable was used directly, how would you intepret the coefficient \\(\\beta\\) ?\n\nindex is hierarchical\nbut the distances between 1 and 2 or 2 and 3 are not comparable…"
  },
  {
    "objectID": "session_5/index.html#hierarchical-index-2",
    "href": "session_5/index.html#hierarchical-index-2",
    "title": "Introduction to Instrumental Variables",
    "section": "Hierarchical index (2):",
    "text": "Hierarchical index (2):\n\nWe use one dummy variable per possible answer.\n\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{Strongly Disagree}}\\)\n\\(D_{\\text{Disagree}}\\)\n\\(D_{\\text{Neutral}}\\)\n\\(D_{\\text{Agree}}\\)\n\\(D_{\\text{Strongly Agree}}\\)\n\n\n\n\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n0\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n0\n1\n0\n\n\n0\n0\n0\n0\n1\n\n\n\n\nValues are linked by the specific dummy coding.\n\nthe choice of the reference group (with 0) is not completely neutral\n\nfor linear regressions, we can ignore its implications\n\nit must be frequent enough in the data\neffects coding: reference group takes -1 instead of 0\n\nNote that hierarchy is lost. The same treatment can be applied to non-hierachical variables\nNow our variables are perfectly colinear:\n\nwe can deduce one from all the others\nwe drop one from the regression: the reference group TODO"
  },
  {
    "objectID": "session_5/index.html#hierarchical-index-3",
    "href": "session_5/index.html#hierarchical-index-3",
    "title": "Introduction to Instrumental Variables",
    "section": "Hierarchical index (3)",
    "text": "Hierarchical index (3)\n\\[y_{\\text{CO2 emission}} = \\alpha + \\beta_1 x_{\\text{strdis}} + \\beta_2 x_{\\text{dis}} + \\beta_3 x_{\\text{agr}} + \\beta_4 x_{\\text{stragr}}\\]\n\nInterpretation:\n\nbeing in the group which strongly agrees to the yellow vest’s claim is associated with an additional \\(\\beta_4\\) increase in CO2 consumption compared with members of the neutral group"
  },
  {
    "objectID": "session_5/index.html#nonnumerical-variables",
    "href": "session_5/index.html#nonnumerical-variables",
    "title": "Introduction to Instrumental Variables",
    "section": "Nonnumerical variables",
    "text": "Nonnumerical variables\n\n\n\n\nWhat about nonnumerical variables?\n\nWhen variables take nonnumerical variables, we convert them to numerical variables.\n\nExample:\n\n\n\n\nactivity\ncode\n\n\n\n\nmassage therapist\n1\n\n\nmortician\n2\n\n\narcheologist\n3\n\n\nfinancial clerks\n4\n\n\n\n\n\n\nThen we convert to dummy variables exactly like hierarchical indices\n\nhere \\(\\text{massage therapist}\\) is taken as reference\n\n\n\n\n\n\n\n\n\n\n\\(D_{\\text{mortician}}\\)\n\\(D_{\\text{archeologist}}\\)\n\\(D_{\\text{financial clerks}}\\)\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n0\n0\n1"
  },
  {
    "objectID": "session_5/index.html#hands-on",
    "href": "session_5/index.html#hands-on",
    "title": "Introduction to Instrumental Variables",
    "section": "Hands-on",
    "text": "Hands-on\nUse statsmodels to create dummy variables with formula API.\n\nReplace\n\nsalary ~ activity\n\nby:\n\nsalary ~ C(activity)\nThere is an options to choose the reference group\nsalary ~ C(activity, Treatment(reference=\"archeologist\"))"
  },
  {
    "objectID": "session_5/index.html#what-is-causality",
    "href": "session_5/index.html#what-is-causality",
    "title": "Introduction to Instrumental Variables",
    "section": "What is causality?",
    "text": "What is causality?\n\n\n\n\nGroucho Marx\n\n\nClear? Huh! Why a four-year-old child could understand this report! Run out and find me a four-year-old child, I can’t make head or tail of it."
  },
  {
    "objectID": "session_5/index.html#spurious-correlation",
    "href": "session_5/index.html#spurious-correlation",
    "title": "Introduction to Instrumental Variables",
    "section": "Spurious correlation",
    "text": "Spurious correlation\n\nSpurious Correlation\nWe have seen spurious correlation before\n\nit happens when two series comove without being actually correlated\n\nAlso, two series might be correlated without one causing the other\n\nex: countries eating more chocolate have more nobel prices…"
  },
  {
    "objectID": "session_5/index.html#definitions",
    "href": "session_5/index.html#definitions",
    "title": "Introduction to Instrumental Variables",
    "section": "Definitions?",
    "text": "Definitions?\nBut how do we define\n\ncorrelation\ncausality\n\n?\nBoth concepts are actually hard to define:\n\nin statistics (and econometrices) they refer to the generating process\nif the data was generated again, would you observe the same relations?\n\nFor instance correlation between \\(X\\) and \\(Y\\) is just the average correlation taken over many draws \\(\\omega\\) of the data: \\[E_{\\omega}\\left[ (X-E[X])(Y-E[Y])\\right]\\]"
  },
  {
    "objectID": "session_5/index.html#how-do-we-define-causality-1",
    "href": "session_5/index.html#how-do-we-define-causality-1",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (1)",
    "text": "How do we define causality (1)\n\nIn math, we have implication: \\(A \\implies B\\)\n\napplies to statements that can be either true or false\ngiven \\(A\\) and \\(B\\), \\(A\\) implies \\(B\\) unless \\(A\\) is true and \\(B\\) is false\nparadox of the drinker: at any time, there exists a person such that: if this person drinks, then everybody drinks\n\nIn a mathematical universe taking values \\(\\omega\\), we can define causality between statement \\(A(\\omega)\\) and \\(B(\\omega)\\) as : \\[\\forall \\omega, A(\\omega) \\implies B(\\omega)\\]"
  },
  {
    "objectID": "session_5/index.html#how-do-we-define-causality-2",
    "href": "session_5/index.html#how-do-we-define-causality-2",
    "title": "Introduction to Instrumental Variables",
    "section": "How do we define causality (2)",
    "text": "How do we define causality (2)\nBut causality in the real world is problematic\nUsually, we observe \\(A(\\omega)\\) only once…\n\n\n\nExample:\n\nstate of the world \\(\\omega\\): 2008, big financial crisis, …\nA: Ben Bernanke chairman of the Fed\nB: successful economic interventions\nWas Ben Bernanke a good central banker?\nImpossible to say.\n\n\n\n\n\n\n\n\nThen there is the uncertain concept of time… But let’s take it as granted to not overcomplicate…"
  },
  {
    "objectID": "session_5/index.html#causality-in-statistics",
    "href": "session_5/index.html#causality-in-statistics",
    "title": "Introduction to Instrumental Variables",
    "section": "Causality in Statistics",
    "text": "Causality in Statistics\n\n\n\n\n\n\nStatistical definition of causality\n\n\nVariable \\(A\\) causes \\(B\\) in a statistical sense if - \\(A\\) and \\(B\\) are correlated - \\(A\\) is known before \\(B\\) - correlation between \\(A\\) and \\(B\\) is unaffected by other variables\n\n\n\n\nThere are other related statistical definitions:\n\nlike Granger causality…\n… but not for this course"
  },
  {
    "objectID": "session_5/index.html#factual-and-counterfactual",
    "href": "session_5/index.html#factual-and-counterfactual",
    "title": "Introduction to Instrumental Variables",
    "section": "Factual and counterfactual",
    "text": "Factual and counterfactual\n\n\n \n\n\n\n\n\n\n\nSuppose we observe an event A\n\nA: a patient is administered a drug, government closes all schools during Covid\n\nWe observe a another event B\n\nB: the patient recovers, virus circulation decreases\n\n\n\n\n\nTo interpret B as a consequence of A, we would like to consider the counter-factual:\n\na patient is not administered a drug, government doesn’t close schools\npatient does not recover, virus circulation is stable\n\n\n\n\n\n\nAn important task in econometrics is to construct a counter-factual\n\nas the name suggests is it sometimes never observed!"
  },
  {
    "objectID": "session_5/index.html#scientific-experiment",
    "href": "session_5/index.html#scientific-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Scientific Experiment",
    "text": "Scientific Experiment\n\n \nIn science we establish causality by performing experiments\n\nand create the counterfactual\n\nA good experiment is reproducible\n\nsame variables\nsame state of the world (other variables)\nreproduce several times (in case output is noisy or random)\n\nChange one factor at a time\n\nto create a counter-factual"
  },
  {
    "objectID": "session_5/index.html#measuring-effect-of-treatment",
    "href": "session_5/index.html#measuring-effect-of-treatment",
    "title": "Introduction to Instrumental Variables",
    "section": "Measuring effect of treatment",
    "text": "Measuring effect of treatment\n\n\n\n\n\n\n\n\n\n\n\nAssume we have discovered two medications: R and B\n\n\n\n\nGive one of them (R) to a patient and observe the outcome\n\n\n\n\nWould would have been the effect of (B) on the same patient?\n\n????\n\n\n\n\n\nWhat if we had many patients and let them choose the medication?\n\n\n\n\n\nMaybe the effect would be the consequence of the choice of patients rather than of the medication?"
  },
  {
    "objectID": "session_5/index.html#an-exmple-from-behavioural-economics",
    "href": "session_5/index.html#an-exmple-from-behavioural-economics",
    "title": "Introduction to Instrumental Variables",
    "section": "An exmple from behavioural economics",
    "text": "An exmple from behavioural economics\n\n\n\nExample: cognitive dissonance\n\nExperiment in GATE Lab\nVolunteers play an investment game.\nThey are asked beforehand whether they support OM, PSG, or none.\n\n\n\n\n\nExperiment 1:\n\nBefore the experiment, randomly selected volunteers are given a football shirt of their preferred team (treatment 1)\nOther volunteers receive nothing (treatment 0)\n\nResult:\n\nhaving a football shirt seems to boost investment performance…\n\n\n\n\n\nExperiment 2: subjects are given randomly a shirt of either Olympique de Marseille or PSG.\nResult:\n\nHaving the good shirt improves performance.\nHaving the wrong one deteriorates it badly.\n\n\n\n\n\nHow would you code up this experiment?\nCan we conclude on some form of causality?"
  },
  {
    "objectID": "session_5/index.html#formalisation-of-the-problem",
    "href": "session_5/index.html#formalisation-of-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Formalisation of the problem",
    "text": "Formalisation of the problem\n\n\n\n\n\n\nCause (A): two groups of people\n\nthose given a shirt (treatment 1)\nthose not given a shirt (treatment 0)\n\nPossible consequence (B): performance\nTake a given agent Alice: she performs well with a PSG shirt.\n\nmaybe she is a good investor?\nor maybe she is playing for her team?\n\nLet’s try to have her play again without the football shirt\n\nnow the experiment has changed: she has gained experience, is more tired, misses the shirt…\nit is impossible to get a perfect counterfactual (i.e. where only A changes)\n\n\n\n\nLet’s take somebody else then? Bob was really bad without a PSG shirt.\n\nhe might be a bad investor? or he didn’t understand the rules?\nsome other variables have changed, not only the treatment\n\nHow to make a perfect experiment?\n\nChoose randomly whether assigning a shirt or not\nby construction the treatment will not be correlated with other variables"
  },
  {
    "objectID": "session_5/index.html#randomized-control-trial",
    "href": "session_5/index.html#randomized-control-trial",
    "title": "Introduction to Instrumental Variables",
    "section": "Randomized Control Trial",
    "text": "Randomized Control Trial\n\n\n\n\n\n\nRandomized Control Trial (RCT)\n\n\nThe best way to ensure that treatment is independent from other factors is to randomize it.\n\n\n\n\n\n\nIn medecine\n\nsome patients receive the treatment (red pill)\nsome other receive the control treatment (blue pill / placebo)\n\nIn economics:\n\nrandomized field experiments\nrandomized phase-ins for new policies\n\nvery useful for policy evaluation\n\n\n\n\n\n\n\nEsther Duflo\n\n\n\n\n\n\nIt is common in economics, instead of assigning treatments randomly, we often say that we assign individuals randomly to the treatment and to the control group. It is equivalent."
  },
  {
    "objectID": "session_5/index.html#natural-experiment",
    "href": "session_5/index.html#natural-experiment",
    "title": "Introduction to Instrumental Variables",
    "section": "Natural experiment",
    "text": "Natural experiment\n\n\n\n\n\n\nNatural Experiment\n\n\nA natural experiment satisfies conditions that treatment is assigned randomly\n\nwithout interference by the econometrician\n\n\n\n\n\nAn exemple of a Natural Experiment:\n\ngender bias in french local elections (jean-pierre eymeoud, paul vertier) link\nare women discriminated against by voters in local elections?\n\n\n\n\nResult: yes, they get 1.5% less votes by right-wing voters\n\n\n\n\nWhat was the natural experiment"
  },
  {
    "objectID": "session_5/index.html#example",
    "href": "session_5/index.html#example",
    "title": "Introduction to Instrumental Variables",
    "section": "Example",
    "text": "Example\nLifetime Earnings and the Vietnam Era Draft Lottery, by JD Angrist\n\n\n\nFact:\n\nveterans of the vietnam war (55-75) earn (in the 80s) an income that is 15% less in average than those who didn’t go to the war.\nWhat can we conclude?\nHard to say: maybe those sent to the war came back with lower productivity (because of PTSD, public stigma, …)? maybe they were not the most productive in the first place (selection bias)?\n\nProblem (for the economist):\n\nwe didn’t sent people to war randomly\n\n\n\n\nGenius idea:\n\nhere is a variable which randomly affected whether people were sent: the Draft\n\n\nbetween 1947, and 1973, a lottery was run to determine who would go to war\n\nthe draft number was determined, based on date of birth, and first letters of name\n\nand was correlated with the probability that a given person would go to war\nand it was so to say random or at least independent from anything relevant to the problem\n\n\n\n\n\nCan we use the Draft to generate randomness ?"
  },
  {
    "objectID": "session_5/index.html#problem",
    "href": "session_5/index.html#problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Problem",
    "text": "Problem\n\nTake the linear regression: \\[y = \\alpha + \\beta x + \\epsilon\\]\n\n\\(y\\): salary\n\\(x\\): went to war\n\nWe want to establish causality from x to y\n\nwe would like to interpret \\(x\\) as the “treatment”\n\nBut there can be confounding factors:\n\nvariable \\(z\\) which causes both x and y\nexemple: socio-economic background, IQ, …\n\nIf we could identify \\(z\\) we could control for it: \\[y = \\alpha + \\beta_1 x + \\beta_2 z + \\epsilon\\]\n\nwe would get a better predictor of \\(y\\) but more uncertainty about \\(\\beta_1\\) (\\(x\\) and \\(z\\) are correlated)"
  },
  {
    "objectID": "session_5/index.html#reformulate-the-problem",
    "href": "session_5/index.html#reformulate-the-problem",
    "title": "Introduction to Instrumental Variables",
    "section": "Reformulate the problem",
    "text": "Reformulate the problem\n\n\n\nLet’s assume treatment \\(x\\) is a binary variable \\(\\in{0,1}\\)\nWe want to estimate \\[y = \\alpha + \\beta x + z + \\epsilon\\] where \\(z\\) is potentially correlated to \\(x\\) and \\(y\\)\nThere are two groups:\n\nthose who receive the treatment \\[y = \\alpha + \\beta + z_{T=1} + \\epsilon\\]\nthe others \\[y = \\alpha + 0 +  z_{T=0} + \\epsilon\\]\n\n\n\n\nProblem:\n\nif \\(z\\) is higher in the treatment group, its effect can’t be separated from the treatment effect.\n\nIntuition: what if we make groups differently?\n\ncompletely independent from \\(z\\) (and \\(\\epsilon\\))\nnot independently from \\(x\\) so that one group will receive more treatment than the other\n\nTo make this group we need a new variable \\(q\\) that is:\n\ncorrelated with \\(x\\) so that it will correspond to some treatment effect\nuncorrelated to \\(z\\) or \\(\\epsilon\\) (exogenous)"
  },
  {
    "objectID": "session_5/index.html#two-stage-regression",
    "href": "session_5/index.html#two-stage-regression",
    "title": "Introduction to Instrumental Variables",
    "section": "Two stage regression",
    "text": "Two stage regression\n\n\n\nWe would like to redo the treatment groups in a way that is independent from \\(z\\) (and everything contained in \\(\\epsilon\\))\n\n\\(q\\) is a binary variable: drafted or not\n\n\nFirst stage: regress group assignment on the instrument: \\[x = \\alpha_0 + \\beta_0 q + \\eta\\]\n\nwe can now predict group assignment in a way that is independent from \\(z\\) (and everything in \\(\\epsilon\\)) \\[\\tilde{x} = \\alpha_0 + \\beta_0 q\\]\n\n\nSecond stage: use the predicted value instead of the original one \\[y = \\alpha + \\beta_1 \\tilde{x} + z + \\epsilon\\]\n\n\n\n\nResult:\n\nIf \\(\\beta_1\\) is significantly nonzero, there is a causal effect between \\(x\\) and \\(y\\).\nNote that \\(\\tilde{x}\\) is imperfectly correlated with the treatment: \\(\\beta_1\\) can’t be interpreted directly\nThe actual effect will be \\(\\frac{\\beta_1}{\\beta_0}\\) (in 1d)\n\n\nWe say that we instrument \\(x\\) by \\(q\\)."
  },
  {
    "objectID": "session_5/index.html#choosing-a-good-instrument",
    "href": "session_5/index.html#choosing-a-good-instrument",
    "title": "Introduction to Instrumental Variables",
    "section": "Choosing a good instrument",
    "text": "Choosing a good instrument\n\n\n\n\n\n\n\nChoosing an instrumental variable\n\n\nA good instrument when trying to explain y by x, is a variable that is correlated to the treatment (x) but does not have any effect on the outcome of interest (y), appart from its effect through x."
  },
  {
    "objectID": "session_5/index.html#in-practice",
    "href": "session_5/index.html#in-practice",
    "title": "Introduction to Instrumental Variables",
    "section": "In practice",
    "text": "In practice\n\nBoth statsmodels and linearmodels support instrumental variables\n\nlibrary (look for IV2SLS)\n\nLibrary linearmodels has a handy formula syntax: salary ~ 1 + [war ~ draft]\n\nAPI is similar but not exactly identical to statsmodels\nfor instance linearmodels does not include constants by default\n\nExample from the doc\n\nformula = (\n    \"np.log(drugexp) ~ 1 + totchr + age + linc + blhisp + [hi_empunion ~ ssiratio]\"\n)\nols = IV2SLS.from_formula(formula, data)\nols_res = ols.fit(cov_type=\"robust\")\nprint(ols_res)"
  },
  {
    "objectID": "session_5/instrumental_variables.html",
    "href": "session_5/instrumental_variables.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Go back to the first notebook. Learn how to write functions and loops.\n\nimport pandas\n\n\nfname = \"dataset.csv\"\ndf = pandas.read_csv(fname)\ndisplay(df.describe())\ndf\n\n\n\n\n\n  \n    \n      \n      gdp\n      date\n    \n  \n  \n    \n      count\n      4.000000\n      4.00000\n    \n    \n      mean\n      552.500000\n      2000.50000\n    \n    \n      std\n      519.623261\n      0.57735\n    \n    \n      min\n      100.000000\n      2000.00000\n    \n    \n      25%\n      103.750000\n      2000.00000\n    \n    \n      50%\n      552.500000\n      2000.50000\n    \n    \n      75%\n      1001.250000\n      2001.00000\n    \n    \n      max\n      1005.000000\n      2001.00000\n    \n  \n\n\n\n\n\n\n\n\n  \n    \n      \n      country\n      gdp\n      date\n    \n  \n  \n    \n      0\n      usa\n      1000\n      2000\n    \n    \n      1\n      usa\n      1005\n      2001\n    \n    \n      2\n      france\n      100\n      2000\n    \n    \n      3\n      france\n      105\n      2001\n    \n  \n\n\n\n\n\ndef import_and_print(fname, print_statistics=True):\n    # here is the body of the function\n    df = pandas.read_csv(fname)\n    if print_statistics==True:\n        display(\"Summary Statistics\")\n        display(df.describe())\n    return df\n\n\nimport_and_print(\"dataset.csv\")\n\n'Summary Statistics'\n\n\n\n\n\n\n  \n    \n      \n      gdp\n      date\n    \n  \n  \n    \n      count\n      4.000000\n      4.00000\n    \n    \n      mean\n      552.500000\n      2000.50000\n    \n    \n      std\n      519.623261\n      0.57735\n    \n    \n      min\n      100.000000\n      2000.00000\n    \n    \n      25%\n      103.750000\n      2000.00000\n    \n    \n      50%\n      552.500000\n      2000.50000\n    \n    \n      75%\n      1001.250000\n      2001.00000\n    \n    \n      max\n      1005.000000\n      2001.00000\n    \n  \n\n\n\n\n\n\n\n\n  \n    \n      \n      country\n      gdp\n      date\n    \n  \n  \n    \n      0\n      usa\n      1000\n      2000\n    \n    \n      1\n      usa\n      1005\n      2001\n    \n    \n      2\n      france\n      100\n      2000\n    \n    \n      3\n      france\n      105\n      2001\n    \n  \n\n\n\n\n\nimport_and_print(\"dataset_2.csv\", False)\n\n\n\n\n\n  \n    \n      \n      country\n      gdp\n      date\n    \n  \n  \n    \n      0\n      usa\n      1000\n      2000\n    \n    \n      1\n      usa\n      1005\n      2001\n    \n    \n      2\n      france\n      100\n      2000\n    \n    \n      3\n      france\n      105\n      2001\n    \n  \n\n\n\n\n\ndef f(x): # no side effect\n    return x**2 + 1\n\n\nimport time\n\n\ndef g(x): # that one has side effects\n    print(\"Calculating...\")\n    time.sleep(10)\n    return x**2 + 1\n\n\ng(1)\n\nCalculating...\n\n\n2\n\n\n\ndef h(x): # that one has only side effects\n    print(\"Calculating...\")\n    time.sleep(10)\n    y =  x**2 + 1\n    print(f\"Found it! {y}\")\n\n\nh(1)\n\nCalculating...\nFound it! 2\n\n\nDocumenting code:\n\nadding comments: # ...\nadd docstrings: just after the function name, a string explaining what the function does\n\n\ndef import_and_print(fname, print_statistics=True):\n    \"Import a dataframe from a filename, print the main statistics and return the dataframe.\"\n    \n    \n    # import the file to get a dataframe\n    df = pandas.read_csv(fname)\n    \n    if print_statistics==True:\n        display(\"Summary Statistics\")\n        # we print default summary statistics computed by pandas\n        display(df.describe())\n        \n    return df\n\n\nimport_and_print?\n\n\nSignature: import_and_print(fname, print_statistics=True)\nDocstring: Import a dataframe from a filename, print the main statistics and return the dataframe.\nFile:      ~/Teaching/dbe/session_6/<ipython-input-32-fb18d0d82cec>\nType:      function\n\n\n\n\n\ndef import_and_print(fname, print_statistics=True):\n    \"\"\"Import a dataframe from a filename.\n    \n    fname (string): filename\n    print_statistics (boolean): if True print summary statistics\n    \n    \"\"\"\n    \n    \n    # import the file to get a dataframe\n    df = pandas.read_csv(fname)\n    \n    if print_statistics==True:\n        display(\"Summary Statistics\")\n        # we print default summary statistics computed by pandas\n        display(df.describe())\n        \n    return df\n\n\nimport_and_print?\n\n\nSignature: import_and_print(fname, print_statistics=True)\nDocstring:\nImport a dataframe from a filename.\nfname (string): filename\nprint_statistics (boolean): if True print summary statistics\nFile:      ~/Teaching/dbe/session_6/<ipython-input-35-97c3580f10df>\nType:      function\n\n\n\n\n\n(lambda x: x**2-1)   (3)\n\n8\n\n\n\nf = (lambda x: x**2-1)\nf(3)\n\n8\n\n\n\n## anonymous functions are useful for the groupby pandas function\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      country\n      gdp\n      date\n    \n  \n  \n    \n      0\n      usa\n      1000\n      2000\n    \n    \n      1\n      usa\n      1005\n      2001\n    \n    \n      2\n      france\n      100\n      2000\n    \n    \n      3\n      france\n      105\n      2001\n    \n  \n\n\n\n\n\n# naive approach\nl = []\nfor country in df[\"country\"].unique():\n    print(f\"Selecting country {country}\")\n    sel = df[\"country\"]==country\n    sdf = df[sel] # sub dataframe with the right country\n    print( sdf.mean() )\n    l.append(df_s.mean())\n\nSelecting country usa\n gdp     1002.5\n date    2000.5\ndtype: float64\nSelecting country france\n gdp      102.5\n date    2000.5\ndtype: float64\n\n\n\ndef todo(sdf): print( sdf.mean())\n\n\ndf.groupby(\"country\").apply( todo )\n\n gdp      102.5\n date    2000.5\ndtype: float64\n gdp     1002.5\n date    2000.5\ndtype: float64\n\n\n\n\n\n\n  \n    \n      \n    \n  \n  \n  \n\n\n\n\n\ndf.groupby(\"country\").apply( lambda sdf: (sdf.mean()) )\n\n\n\n\n\n  \n    \n      \n      gdp\n      date\n    \n    \n      country\n      \n      \n    \n  \n  \n    \n      france\n      102.5\n      2000.5\n    \n    \n      usa\n      1002.5\n      2000.5\n    \n  \n\n\n\n\n\n\n\n\n\nCreate four random series of length \\(N=1000\\)\n\n\\(x\\): education\n\\(y\\): salary\n\\(z\\): ambition\n\\(q\\): early smoking\n\nsuch that:\n\n\\(x\\) and \\(z\\) cause \\(y\\)\n\\(z\\) causes \\(x\\)\n\\(q\\) is correlated with \\(x\\), not with \\(z\\)\n\n(all relations are linear, add random shocks where needed)\nCreate a dataset df\n\nimport numpy\n\n\nN = 100000\n\n\nϵ_z = numpy.random.randn(N)*0.01\nϵ_x = numpy.random.randn(N)*0.01\nϵ_q = numpy.random.randn(N)*0.01\nϵ_y = numpy.random.randn(N)*0.01\n\n\nz = 0.1 + ϵ_z\nx = 0.1 + z + ϵ_x\nq = 0.5 + 0.1234*ϵ_x + ϵ_q\ny  = 1.0 + 0.9*x + 0.4*z + ϵ_y\n\n\ndf = pandas.DataFrame({\n    \"x\": x,\n    \"y\": y,\n    \"z\": z,\n    \"q\": q\n})\n\n\ndf.corr()\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n      q\n    \n  \n  \n    \n      x\n      1.000000\n      0.831152\n      0.708497\n      0.079905\n    \n    \n      y\n      0.831152\n      1.000000\n      0.694133\n      0.054070\n    \n    \n      z\n      0.708497\n      0.694133\n      1.000000\n      -0.006022\n    \n    \n      q\n      0.079905\n      0.054070\n      -0.006022\n      1.000000\n    \n  \n\n\n\n\n\n\n\nRun a regression to estimate the effect of \\(x\\) on \\(y\\). Control by \\(z\\). What happens ?\n\nimport linearmodels\nfrom statsmodels.formula import api\n\n\nmodel = api.ols(\"y ~ x\", df)\nres = model.fit()\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:              0.691 \n\n\n  Model:                   OLS         Adj. R-squared:         0.691 \n\n\n  Method:             Least Squares    F-statistic:         2.234e+05\n\n\n  Date:             Wed, 09 Mar 2022   Prob (F-statistic):     0.00  \n\n\n  Time:                 12:14:59       Log-Likelihood:     3.1488e+05\n\n\n  No. Observations:      100000        AIC:                -6.298e+05\n\n\n  Df Residuals:           99998        BIC:                -6.297e+05\n\n\n  Df Model:                   1                                      \n\n\n  Covariance Type:      nonrobust                                    \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     1.0005     0.000  2150.251  0.000     1.000     1.001\n\n\n  x             1.0974     0.002   472.679  0.000     1.093     1.102\n\n\n\n\n  Omnibus:        2.727   Durbin-Watson:         1.991\n\n\n  Prob(Omnibus):  0.256   Jarque-Bera (JB):      2.727\n\n\n  Skew:           0.008   Prob(JB):              0.256\n\n\n  Kurtosis:       3.019   Cond. No.               73.5\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nmodel = api.ols(\"y ~ x + z\", df)\nres = model.fit()\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:              0.713 \n\n\n  Model:                   OLS         Adj. R-squared:         0.713 \n\n\n  Method:             Least Squares    F-statistic:         1.243e+05\n\n\n  Date:             Wed, 09 Mar 2022   Prob (F-statistic):     0.00  \n\n\n  Time:                 12:15:00       Log-Likelihood:     3.1862e+05\n\n\n  No. Observations:      100000        AIC:                -6.372e+05\n\n\n  Df Residuals:           99997        BIC:                -6.372e+05\n\n\n  Df Model:                   2                                      \n\n\n  Covariance Type:      nonrobust                                    \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     1.0007     0.000  2232.389  0.000     1.000     1.002\n\n\n  x             0.8997     0.003   283.880  0.000     0.893     0.906\n\n\n  z             0.3938     0.004    88.054  0.000     0.385     0.403\n\n\n\n\n  Omnibus:        2.380   Durbin-Watson:         1.990\n\n\n  Prob(Omnibus):  0.304   Jarque-Bera (JB):      2.379\n\n\n  Skew:           0.007   Prob(JB):              0.304\n\n\n  Kurtosis:       3.019   Cond. No.               166.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\nUse \\(q\\) to instrument the effect of x on y. Comment.\n\n# difference between linearmodels and statsmodels:\n# linearmodels does not include the constant by defulat\n\n\nfrom linearmodels import IV2SLS\n\n\nfrom linearmodels import IV2SLS\nformula = (\n    \"y ~ 1 + [x ~ q]\"\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\n\nIV-2SLS Estimation Summary\n\n  Dep. Variable:            y          R-squared:          0.6670 \n\n\n  Estimator:             IV-2SLS       Adj. R-squared:     0.6669 \n\n\n  No. Observations:      100000        F-statistic:        883.43 \n\n\n  Date:             Wed, Mar 09 2022   P-value (F-stat)    0.0000 \n\n\n  Time:                 12:15:00       Distribution:       chi2(1)\n\n\n  Cov. Estimator:        robust                                   \n\n\n                                                                  \n\n\n\nParameter Estimates\n\n            Parameter Std. Err. T-stat P-value Lower CI Upper CI\n\n\n  Intercept  1.0413    0.0060   173.27 0.0000   1.0295   1.0531 \n\n\n  x          0.8934    0.0301   29.723 0.0000   0.8345   0.9523 \n\nEndogenous: xInstruments: qRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7f09adece490\n\n\n\n\n\n\nWe follow the excellent R tutorial from the (excellent) Econometrics with R book.\nThe goal is to measure the effect of schooling on earnings, while correcting the endogeneity bias by using distance to college as an instrument.\nDownload the college distance and make a nice dataframe. Describe the dataset. Plot an histogram of distance.\nhttps://vincentarelbundock.github.io/Rdatasets/datasets.html\n\nimport statsmodels.api as sm\n\n\nsm.datasets.get_rdataset?\n\n\nSignature: sm.datasets.get_rdataset(dataname, package='datasets', cache=False)\nDocstring:\ndownload and return R dataset\nParameters\n----------\ndataname : str\n    The name of the dataset you want to download\npackage : str\n    The package in which the dataset is found. The default is the core\n    'datasets' package.\ncache : bool or str\n    If True, will download this data into the STATSMODELS_DATA folder.\n    The default location is a folder called statsmodels_data in the\n    user home folder. Otherwise, you can specify a path to a folder to\n    use for caching the data. If False, the data will not be cached.\nReturns\n-------\ndataset : Dataset\n    A `statsmodels.data.utils.Dataset` instance. This objects has\n    attributes:\n    * data - A pandas DataFrame containing the data\n    * title - The dataset title\n    * package - The package from which the data came\n    * from_cache - Whether not cached data was retrieved\n    * __doc__ - The verbatim R documentation.\nNotes\n-----\nIf the R dataset has an integer index. This is reset to be zero-based.\nOtherwise the index is preserved. The caching facilities are dumb. That\nis, no download dates, e-tags, or otherwise identifying information\nis checked to see if the data should be downloaded again or not. If the\ndataset is in the cache, it's used.\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/statsmodels/datasets/utils.py\nType:      function\n\n\n\n\n\nds = sm.datasets.get_rdataset(\"CollegeDistance\", \"AER\")\n\n\ndf = ds.data\n\n\nds.title\n\n'College Distance Data'\n\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      gender\n      ethnicity\n      score\n      fcollege\n      mcollege\n      home\n      urban\n      unemp\n      wage\n      distance\n      tuition\n      education\n      income\n      region\n    \n  \n  \n    \n      1\n      male\n      other\n      39.150002\n      yes\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      high\n      other\n    \n    \n      2\n      female\n      other\n      48.869999\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n    \n    \n      3\n      male\n      other\n      48.740002\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n    \n    \n      4\n      male\n      afam\n      40.400002\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n    \n    \n      5\n      female\n      other\n      40.480000\n      no\n      no\n      no\n      yes\n      5.6\n      8.09\n      0.4\n      0.88915\n      13\n      low\n      other\n    \n  \n\n\n\n\n\n# wage looks constant. Check there is actually some variability\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      score\n      unemp\n      wage\n      distance\n      tuition\n      education\n    \n  \n  \n    \n      count\n      4739.000000\n      4739.000000\n      4739.000000\n      4739.000000\n      4739.000000\n      4739.000000\n    \n    \n      mean\n      50.889029\n      7.597215\n      9.500506\n      1.802870\n      0.814608\n      13.807765\n    \n    \n      std\n      8.701910\n      2.763581\n      1.343067\n      2.297128\n      0.339504\n      1.789107\n    \n    \n      min\n      28.950001\n      1.400000\n      6.590000\n      0.000000\n      0.257510\n      12.000000\n    \n    \n      25%\n      43.924999\n      5.900000\n      8.850000\n      0.400000\n      0.484990\n      12.000000\n    \n    \n      50%\n      51.189999\n      7.100000\n      9.680000\n      1.000000\n      0.824480\n      13.000000\n    \n    \n      75%\n      57.769999\n      8.900000\n      10.150000\n      2.500000\n      1.127020\n      16.000000\n    \n    \n      max\n      72.809998\n      24.900000\n      12.960000\n      20.000000\n      1.404160\n      18.000000\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.hist(df['distance'], bins=50)\n\n(array([1091.,  923.,  601.,  534.,   92.,  277.,  219.,  126.,  173.,\n          36.,  168.,   88.,  126.,   17.,    0.,   43.,   47.,   48.,\n          10.,    8.,   19.,    0.,   26.,    0.,    0.,    6.,    4.,\n           7.,    0.,    0.,   10.,    0.,    0.,    0.,    0.,    4.,\n           0.,   15.,    0.,    0.,   17.,    0.,    0.,    0.,    0.,\n           0.,    0.,    0.,    0.,    4.]),\n array([ 0. ,  0.4,  0.8,  1.2,  1.6,  2. ,  2.4,  2.8,  3.2,  3.6,  4. ,\n         4.4,  4.8,  5.2,  5.6,  6. ,  6.4,  6.8,  7.2,  7.6,  8. ,  8.4,\n         8.8,  9.2,  9.6, 10. , 10.4, 10.8, 11.2, 11.6, 12. , 12.4, 12.8,\n        13.2, 13.6, 14. , 14.4, 14.8, 15.2, 15.6, 16. , 16.4, 16.8, 17.2,\n        17.6, 18. , 18.4, 18.8, 19.2, 19.6, 20. ]),\n <BarContainer object of 50 artists>)\n\n\n\n\n\nRun the naive regression \\(income=\\beta_0 + \\beta_1 \\text{education} + u\\)\n\nimport statsmodels.formula.api as api\n\n\napi.ols(\"C(income) ~ education\", df)\n\nValueError: endog has evaluated to an array with multiple columns that has shape (4739, 2). This occurs when the variable converted to endog is non-numeric (e.g., bool or str).\n\n\n\n# education variable takes string values (\"high\" or \"low\"). \n# we need to convert them into 1 and 0 first\ndf['income_binary'] = (df['income'] == \"high\")*1\n\n\nmodel = api.ols(\"income_binary ~ education\", df)\nresult = model.fit()\n\n\nresult.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:      income_binary    R-squared:             0.048\n\n\n  Model:                   OLS         Adj. R-squared:        0.048\n\n\n  Method:             Least Squares    F-statistic:           239.0\n\n\n  Date:             Tue, 15 Mar 2022   Prob (F-statistic): 1.22e-52\n\n\n  Time:                 09:34:48       Log-Likelihood:      -2853.5\n\n\n  No. Observations:        4739        AIC:                   5711.\n\n\n  Df Residuals:            4737        BIC:                   5724.\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept    -0.4780     0.050    -9.567  0.000    -0.576    -0.380\n\n\n  education     0.0555     0.004    15.460  0.000     0.048     0.063\n\n\n\n\n  Omnibus:       1510.859   Durbin-Watson:         1.791 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):    795.036 \n\n\n  Skew:            0.871    Prob(JB):           2.29e-173\n\n\n  Kurtosis:        2.003    Cond. No.               109. \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe p-value associated to the Fisher statistics is negligible: the model is globally significant. Predictive power is very low (R^2 ~ 5%): the effect of education on income is small w.r.t. to the effect of other factors.\nCoefficients for interecept and education terms are significant at the 0.1% threshold.\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      gender\n      ethnicity\n      score\n      fcollege\n      mcollege\n      home\n      urban\n      unemp\n      wage\n      distance\n      tuition\n      education\n      income\n      region\n      income_binary\n    \n  \n  \n    \n      1\n      male\n      other\n      39.150002\n      yes\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      high\n      other\n      1\n    \n    \n      2\n      female\n      other\n      48.869999\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n      0\n    \n    \n      3\n      male\n      other\n      48.740002\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n      0\n    \n    \n      4\n      male\n      afam\n      40.400002\n      no\n      no\n      yes\n      yes\n      6.2\n      8.09\n      0.2\n      0.88915\n      12\n      low\n      other\n      0\n    \n    \n      5\n      female\n      other\n      40.480000\n      no\n      no\n      no\n      yes\n      5.6\n      8.09\n      0.4\n      0.88915\n      13\n      low\n      other\n      0\n    \n  \n\n\n\n\n\ndf['ethnicity'].unique()\n\narray(['other', 'afam', 'hispanic'], dtype=object)\n\n\nAugment the regression with unemp, hispanic, af-am, female and urban\n\nfrom patsy import Treatment\n\n\nmodel = api.ols(\"income_binary ~ education + C(gender,Treatment(reference='male')) + C(ethnicity,Treatment(reference='other')) + urban + unemp\", df)\nresult = model.fit()\n\n\nresult.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:      income_binary    R-squared:             0.083\n\n\n  Model:                   OLS         Adj. R-squared:        0.082\n\n\n  Method:             Least Squares    F-statistic:           71.34\n\n\n  Date:             Tue, 15 Mar 2022   Prob (F-statistic): 2.00e-85\n\n\n  Time:                 09:51:02       Log-Likelihood:      -2764.9\n\n\n  No. Observations:        4739        AIC:                   5544.\n\n\n  Df Residuals:            4732        BIC:                   5589.\n\n\n  Df Model:                   6                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n                                                            coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept                                                 -0.2433     0.054    -4.528  0.000    -0.349    -0.138\n\n\n  C(gender, Treatment(reference='male'))[T.female]          -0.0490     0.013    -3.861  0.000    -0.074    -0.024\n\n\n  C(ethnicity, Treatment(reference='other'))[T.afam]        -0.1235     0.018    -6.920  0.000    -0.159    -0.089\n\n\n  C(ethnicity, Treatment(reference='other'))[T.hispanic]    -0.1532     0.017    -9.197  0.000    -0.186    -0.121\n\n\n  urban[T.yes]                                              -0.0470     0.015    -3.073  0.002    -0.077    -0.017\n\n\n  education                                                  0.0511     0.004    14.422  0.000     0.044     0.058\n\n\n  unemp                                                     -0.0115     0.002    -5.006  0.000    -0.016    -0.007\n\n\n\n\n  Omnibus:       1212.294   Durbin-Watson:         1.836 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):    697.989 \n\n\n  Skew:            0.813    Prob(JB):           2.71e-152\n\n\n  Kurtosis:        2.055    Cond. No.               136. \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nComment the results and explain the selection problem\nAll coefficients are significant at the 1% level. Prediction power is higher : R^2 about 8%.\nExplain why distance to college might be used to instrument the effect of schooling.\nWe need an instrument that:\n\nis correlated with schooling:\n\ndistance to college affects chances to go to university hence schooling\n\nindependent from other factors (gender, ethnicity, …)\n\nThe effect of “distance to college” on income, is only through its effect on education.\nRun an IV regression, where distance is used to instrument schooling.\nlook at: https://bashtage.github.io/linearmodels/ (two-stage least squares)\n\n# remember that linearmodels does not include constants by default\n# we take the same formula and add the constant\n\n\nfrom linearmodels import IV2SLS\nformula = (\n\"income_binary ~ 1 + [education~distance] + C(gender,Treatment(reference='male')) + C(ethnicity,Treatment(reference='other')) + urban + unemp\"\n)\nmod = IV2SLS.from_formula(formula, df)\nres = mod.fit()\nres\n\n\n\nIV-2SLS Estimation Summary\n\n  Dep. Variable:      income_binary    R-squared:          -0.2734\n\n\n  Estimator:             IV-2SLS       Adj. R-squared:     -0.2750\n\n\n  No. Observations:       4739         F-statistic:        213.68 \n\n\n  Date:             Tue, Mar 15 2022   P-value (F-stat)    0.0000 \n\n\n  Time:                 10:12:51       Distribution:       chi2(6)\n\n\n  Cov. Estimator:        robust                                   \n\n\n                                                                  \n\n\n\nParameter Estimates\n\n                                                         Parameter Std. Err. T-stat  P-value Lower CI Upper CI\n\n\n  Intercept                                               -2.3763   0.5316   -4.4699 0.0000   -3.4182  -1.3343\n\n\n  C(gender, Treatment(reference='male'))[T.female]        -0.0456   0.0150   -3.0301 0.0024   -0.0750  -0.0161\n\n\n  C(ethnicity, Treatment(reference='other'))[T.afam]      -0.0456   0.0283   -1.6123 0.1069   -0.1011  0.0098 \n\n\n  C(ethnicity, Treatment(reference='other'))[T.hispanic]  -0.1075   0.0223   -4.8322 0.0000   -0.1511  -0.0639\n\n\n  urban[T.yes]                                            -0.0527   0.0182   -2.8947 0.0038   -0.0884  -0.0170\n\n\n  unemp                                                   -0.0101   0.0027   -3.7771 0.0002   -0.0153  -0.0048\n\n\n  education                                               0.2032    0.0378   5.3800  0.0000   0.1292   0.2773 \n\nEndogenous: educationInstruments: distanceRobust Covariance (Heteroskedastic)Debiased: Falseid: 0x7f3f2323f0d0\n\n\nComment the results. Compare with the R tutorials.\nR^2 is negative, but we can’t compare it with the non-IV regression.\nAll coefficients are significant at the 1% level, save for ethnicity (for category “afam”). With the instrumentation strategy, the effect of education on salary, is 4 times higher than without it."
  },
  {
    "objectID": "session_10/graphs/Untitled1.html",
    "href": "session_10/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_10/graphs/inference.html",
    "href": "session_10/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_10/index.html",
    "href": "session_10/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "A model is fitted (trained / regressed) on a given amount of data\nA model can be more or less flexible\n\nhave more or less independent parameters (aka degrees of freedom)\nex: \\(y = a + b x\\) (2) vs \\(y = a + b x_1 + c x_1^2 + e x_2 + f x_3\\) (5)\n\nMore flexible models fit the training data better…\n…but tend to perform worse for predictions\nThis is known as:\n\nThe Bias (fit) vs Variance (prediction) tradeoff\nThe no free lunch theorem\n\n\n\n\n\n\n\n\n\n\n\n\nThe goal of machine learning consists in making the best predictions:\n\nuse enough data to maximize the fit…\n… but control the number of independent parameters to prevent overfitting\n\nex: LASSO regression has lots of parameters, but tries to keep most of them zero\n\nultimately quality of prediction is evaluated on a test set, independent from the training set\n\nIn econometrics we can perform\n\npredictions: sames issues as ML\nexplanatory analysis: focus on the effect of one (or a few) explanatory variables\n\nthis does not necessary require strong predictive power\n\n\n\n\n\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.252\nModel:                            OLS   Adj. R-squared:                  0.245\nMethod:                 Least Squares   F-statistic:                     33.08\nDate:                Tue, 30 Mar 2021   Prob (F-statistic):           1.01e-07\nTime:                        02:34:12   Log-Likelihood:                -111.39\nNo. Observations:                 100   AIC:                             226.8\nDf Residuals:                      98   BIC:                             232.0\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n==============================================================================\nIntercept     -0.1750      0.162     -1.082      0.282      -0.496       0.146\nx              0.1377      0.024      5.751      0.000       0.090       0.185\n==============================================================================\nOmnibus:                        2.673   Durbin-Watson:                   1.118\nProb(Omnibus):                  0.263   Jarque-Bera (JB):                2.654\nSkew:                           0.352   Prob(JB):                        0.265\nKurtosis:                       2.626   Cond. No.                         14.9\n==============================================================================\n\n\nUnderstand p-value: chances that a given statistics might have been obtained, under the H0 hypothesis\n\nCheck:\n\n\nglobal significance (Fisher test): chances would have obtained this R2 if all real coefficients were actually 0 (H0 hypothesis)\n\nR2: provides an indication of predictive power. Does not prevent overfitting.\n\nadj. R2: predictive power corrected for excessive degrees of freedom\n\ncoefficient:\n\np-value probability that coefficient might have been greater than observed, if it was actually 0.\nif p-value is smaller than 5%: the coefficient is significant at a 5% level\nconfidence intervals (5%): if the true coefficient was out of this interval, observed value would be very implausible\n\nhigher confidence levels -> bigger intervals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverfitting\n\n\nbad predictions\n\n\nColinearity\n\n\ncan bias a coefficient of interest\nnot a problem for prediction\nexact colinearity makes traditional OLS fail\n\nTo choose the right amount of variables find a combination which maximizes adjusted R2 or an information criterium\n\n\n\n\n\n\n\\(x\\) is colinear with \\(y\\) if \\(cor(x,y)\\) very close to 1\n\nmore generally \\(x\\) is colinear with \\(y_1, ... y_n\\) if \\(x\\) can be deduced linearly from \\(y_1...y_n\\)\nthere exists \\(\\lambda_1, ... \\lambda_n\\) such that \\(x = \\lambda_1 x_1 + ... + \\lambda_n x_n\\)\nexample: hours of sleep / hours awake (sleep=24-awake)\n\nperfect colinearity is a problem: coefficients are not well defined\n\\(\\text{productivity} = 0.1 + 0.5 \\text{sleep} + 0.5 \\text{awake}\\) or \\(\\text{productivity} = -11.9 + 1 \\text{sleep} + 1 \\text{awake}\\) ?\n\nbest regressions have regressors that:\nexplain independent variable\nare independent from each other (as much as possible)\n\n\n\n\n\nWhat if you don’t have enough variables?\n\\(y = a + bx\\)\n\nR2 can be low. It’s ok for explanatory analysis.\nas long as residuals are normally distributed\n\ncheck graphically to be sure\n(more advanced): there are statistical tests\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nSuppose we want to know the effect of \\(x\\) on \\(y\\).\n\nWe run the regression \\(y = a + b x\\)\n\nwe find \\(y = 0.21 + \\color{red}{0.15} x\\)\n\n\nWe then realize we have access to a categorical variable \\(gender \\in {male, female}\\)\n\nWe then add the \\(\\delta\\) dummy variable to the regression: \\(y = a + bx + c \\delta\\)\n\nwe find $ y = -0.04 + x - 0.98 $\n\n\nNote that adding the indicator\n\n\nimproved the fit (\\(R^2\\) is 0.623 instead of 0.306)\n\ncorrected for the omitted variable bias (true value of b is actually 0.2)\n\nprovided an estimate for the effect of variable gender\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nIndividual\nGender\nShirt color\nEducation\n…\n\n\n\n\n1\nM\n?\n?\n?\n\n\n2\nF\n?\n?\n?\n\n\n3\nM\n?\n?\n?\n\n\n…\n…\n…\n…\n…\n\n\n\n\n\n\n\nSuppose we want to know the effect of \\(x\\) on \\(y\\).\n\nWe run the regression \\(y = a + b x\\)\n\nwe find \\(y = 1.09 + \\color{red}{0.24} x\\)\n\n\nBut now, the data has a special panel structure.\n\nwe have a categorical variable corresponding to each individual\nit is linked to several omitted variables, most of which we don’t observe\n\n\nFixed Effects: use an indicator for each individual\nwe need to drop the individual specific dummies that we observe (i.e. gender)\n\nRun the regression $y_{i,n} = a_i + b x_{i,n} $\n\nwe find $ y_{i,n} = a_i + x_{i,n} $\n\n\nNote that adding the indicator\n\n\nimproved the fit (\\(R^2\\) is 0.631 instead of 0.278)\n\ncorrected for the unobserved heterogeneity bias (true value of b is actually 0.2)\n\n\n\n\n\n\n\n\n\nEssentially: the intuition behind correcting for unobserved heterogeneity is the same as the one behind ommitted variable bias.\nFixed Effects are essentially dummies specific to some categories of observations\nIn panel data, there are two categories: individual index and time\n\nindividual ( Entity Effects)\ntime (Time Effects)\n\nWe index regressions by them: \\[y_{it} = \\color{red}{a_i} + \\color{blue}{a_t} + b x_{i t} + ... \\]\nFixed effects are not very useful for prediction:\n\none can predict \\(y_{it}\\) only for \\(i,t\\) already in the database\nimpossible to predict new individuals/new dates\n\nRemedy: random fixed effects\n\n\n\n\n\n\nConsider the regression model \\(y = a + b x + \\epsilon\\)\nWhen \\(\\epsilon\\) is correlated with \\(x\\) we have an endogeneity problem.\n\nwe can check in the regression results whether the residuals ares correlated with \\(y\\) or \\(x\\)\n\nEndogeneity can have several sources: omitted variable, measurement error, simultaneity\n\nit creates a bias in the estimate of \\(a\\) and \\(b\\)\n\nWe say we control for endogeneity by adding some variables\nA special case of endogeneity is a confounding factor a variable \\(z\\) which causes at the same time \\(x\\) and \\(y\\)\n\n\n\n\n\n\\[y = a + b x + \\epsilon\\]\n\nRecall: endogeneity issue when \\(\\epsilon\\) is correlated with \\(x\\)\nInstrument: a way to keep only the variability of \\(x\\) that is independent from \\(\\epsilon\\)\n\nit needs to be correlated with \\(x\\)\nnot with all components of \\(\\epsilon\\)\n\nAn instrument can be used to solve endogeneity issues\nIt can also establish the causality from \\(x\\) to \\(y\\):\n\nsince it is independent from \\(\\epsilon\\), all its effect on \\(y\\) goes through \\(x\\)"
  },
  {
    "objectID": "coursework/coursework.html",
    "href": "coursework/coursework.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "A visualization\n\nChoose a simple graph from https://ourworldindata.org/ and try to reproduce it as well as you can. You can use the data that is usually attached with the graphs.\n\n\nFeldstein-Horioka puzzle\n\nIn a famous paper, Domestic saving and international capital flows (Economic Journal, 1980), Martin Feldstein and Charles Horioka, exposed the following puzzle: - if international capital markets were"
  },
  {
    "objectID": "coursework/test/Introduction.html",
    "href": "coursework/test/Introduction.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "PSE, 2019\nPablo Winant\n\n\n\n(computational) economist\nworked at IMF and Bank of England\n\nDSGE modeling\nvarious technological projects\n\ninvolved in several opensource projects\n\nquantecon (Tom Sargent and John Stachurski)\nARK (Chris Carrol)\ndolo/dolark/bttt\n…\n\nresearch\n\nmacro stuff (international finance, inequalities, optimal policies)\nmachine learning (especially neural networks)\n\n\n\n\n\n\nscientific programming\n\nalgorithm\nspeed, memory efficiency, accuracy\n= numerical methods (judd) + Fortran\n\nmodern?\n\nversioned\nopensource, free\nreproducible\nmultilanguage\nmultiplatform\n\n\n\n\n\n\ngit is a decentralized, versioning system\ngithub adds online collaborative tools\nit has fostered, the development of many softwares, libraries (linux, python, Julia, R, etc.)\nindustry and community have converged on the same tools\n\n\n\n\n\n\n\n\n\nUse open data\nBeing able to reproduce the exact environment used for data processing and computations\nProvide interactive views of the results\n\n\n\n\nSeveral programming languages, with different strengths - C/Fortran: low-level speed - Python: easy, readable, many scientific libraries, glue language - Julia: low-level speed, high-level features\ncan interact…\nLots of specialized language are useful too (for research) - html/javascript - vega/ggog - yaml/json - database (sql) - tensorflow (deep learning)\n\n\n\nCalculations can (must be run) on a variety of different platforms:\n\nlaptop\nserver\nvirtual machine / container\nfarm of computers\nspecialized hardware (e.g. GPU, TPU)\n\n\n\n\n\nEconometricians, modellers, data scientists, spend a lot of time writing code\n\nand do it inefficiently…\n\nProgramming efficiently requires awareness of\n\ncertain basic concepts: (types, control flow, functions, objects)\nsome tools (programming language, code versioning, command line)\nwhich are never taught…\n\nAnd yet they are very easy to learn\n\nanyone can become an expert !\n\n\n\n\n\n\nA lot of demand everywhere for skilled programmers.\nMany faculties are introducing formal programming courses (for economists)\n\nMIT, NYU, Penn, …\nSummer Bootcamps\n\nNew applications are even more code-intensive than before:\n\ndata science\nmachine learning\nmodeling\n\n\n\n\n\n\nMany excellent online resources:\n\nSoftware Carpentry\nQuantEcon from Tom Sargent and John Stachurski\n\nOpensource community is very welcoming:\n\nask on mailing lists or online chats (Julia users, quantecon, dynare, …)\nopen issues (for instance against Dolo (https://github.com/EconForge/Dolo.jl/issues)[https://github.com/EconForge/Dolo.jl/issues]\nparticipating is also a great occasion to learn\n\n\n\n\n\nhttps://www.youtube.com/watch?v=4gN9nPB7LIw\nhttps://www.kickstarter.com/projects/primotoys/cubetto-hands-on-coding-for-girls-and-boys-aged-3\n\n\n\n\nRegister on zulip if not done already.\nInstall Anaconda Python 3.7 (user-wide so that packages can be installed without admin rights"
  },
  {
    "objectID": "coursework/ideas.html",
    "href": "coursework/ideas.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Feldstein-Horioka Puzzle (Économétrie Appliquée)\n\nCorrélation S/Y and I/Y\nPays de l’OCDE\nCollecte des données Régression simple\n\nRègle de Taylor: évaluation empirique sur 6 plus gros pays de l’Union Européenne\n\n\ndatabase: PIB (nominal)\nIPC\ntaux d’intérêt à court terme\n\n\nCAPM"
  },
  {
    "objectID": "coursework/instructions.html",
    "href": "coursework/instructions.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Coursework\nYou are allowed to work in small groups with up to 3 people. The work must be returned on April X (X to be determined on April 5). It should consist in a jupyter notebook, with all the text and code toghether with the attached datafile(s). The notebook must make for enjoyable reading without any prior knowledge of the paper.\nYour goal is to replicate the main result from one of the two following famous papers:\n\nAre Emily and Greg More Employable Than Lakisha and Jamal? A Field Experiment on Labor Market Discrimination, by Marianne Bertrand and Sendhil Mullainathan, Americal Economic Review, 2004\nMalleable Lies: Communication and Cooperation in a High StakesTV Game, by Uyanga Turmunkh, Martijn J. van den Assem, Dennie van Dolder, Management Science, October 2019\n\nIf you are interested in replicating another paper, discuss it with the professor before.\nThe instructions below apply to any paper.\n\nread the paper\nidentify the main hypothesis, and the empirical strategy\nlocate replication files (they are available from the publisher’s website)\nimport the data / describe the data\ntry to reproduce the main result(s) from the paper\n\nintepret the statistics and comment on what you get\nit’s ok if the figures are not exactly the same1\n\nmake the finishing touches:\n\nwork on the notebook to make it a nice reading\nensure the notebook can be run on any computer (in particuler, it should not reference computer specific file paths)\n\n\n\n\n\n\n\nFootnotes\n\n\nIn the Bertrand and Mullainathan paper, they use probit regressions rather than logistic regression. They are essentially very similar (they make different distributional assumptions). I would advise to start with logistic regressions as in the course, and possibly compare the results you get with probit regressions.↩︎"
  },
  {
    "objectID": "session_8/Sklearn.html",
    "href": "session_8/Sklearn.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Import the diabetes dataset from sklearn. Describe it.\n\nfrom sklearn.datasets import load_diabetes\ndata = load_diabetes()\nX = data['data']\nY = data['target']\n\n\nprint(data['DESCR'])\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, T-Cells (a type of white blood cells)\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, thyroid stimulating hormone\n      - s5      ltg, lamotrigine\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3)\n\n\nX_train.shape\n\n(309, 10)\n\n\n\nX_test.shape\n\n(133, 10)\n\n\n\n133/(133+309)\n\n0.3009049773755656\n\n\nFeatures are already “centered and scaled”: no need to renormalize them\nTrain a linear model (with intercept) on the training set\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# by default there is an intercept (check the doc: default value for fit_intercept is True)\n\n\nLinearRegression?\n\n\nInit signature:\nLinearRegression(\n    *,\n    fit_intercept=True,\n    normalize=False,\n    copy_X=True,\n    n_jobs=None,\n    positive=False,\n)\nDocstring:     \nOrdinary least squares Linear Regression.\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.\nParameters\n----------\nfit_intercept : bool, default=True\n    Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered).\nnormalize : bool, default=False\n    This parameter is ignored when ``fit_intercept`` is set to False.\n    If True, the regressors X will be normalized before regression by\n    subtracting the mean and dividing by the l2-norm.\n    If you wish to standardize, please use\n    :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit``\n    on an estimator with ``normalize=False``.\ncopy_X : bool, default=True\n    If True, X will be copied; else, it may be overwritten.\nn_jobs : int, default=None\n    The number of jobs to use for the computation. This will only provide\n    speedup for n_targets > 1 and sufficient large problems.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\npositive : bool, default=False\n    When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n    .. versionadded:: 0.24\nAttributes\n----------\ncoef_ : array of shape (n_features, ) or (n_targets, n_features)\n    Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features.\nrank_ : int\n    Rank of matrix `X`. Only available when `X` is dense.\nsingular_ : array of shape (min(X, y),)\n    Singular values of `X`. Only available when `X` is dense.\nintercept_ : float or array of shape (n_targets,)\n    Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`.\nSee Also\n--------\nRidge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.\nNotes\n-----\nFrom the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.\nExamples\n--------\n>>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n>>> # y = 1 * x_0 + 2 * x_1 + 3\n>>> y = np.dot(X, np.array([1, 2])) + 3\n>>> reg = LinearRegression().fit(X, y)\n>>> reg.score(X, y)\n1.0\n>>> reg.coef_\narray([1., 2.])\n>>> reg.intercept_\n3.0000...\n>>> reg.predict(np.array([[3, 5]]))\narray([16.])\nFile:           ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\nmodel.fit(X_train, Y_train)\n\nLinearRegression()\n\n\n\nmodel.fit?\n\n\nSignature: model.fit(X, y, sample_weight=None)\nDocstring:\nFit linear model.\nParameters\n----------\nX : {array-like, sparse matrix} of shape (n_samples, n_features)\n    Training data\ny : array-like of shape (n_samples,) or (n_samples, n_targets)\n    Target values. Will be cast to X's dtype if necessary\nsample_weight : array-like of shape (n_samples,), default=None\n    Individual weights for each sample\n    .. versionadded:: 0.17\n       parameter *sample_weight* support to LinearRegression.\nReturns\n-------\nself : returns an instance of self.\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:      method\n\n\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\npred = model.predict(X_test)\n\n\nY_test\n\narray([190., 225., 141., 281., 168.,  42., 116., 276., 281.,  51., 121.,\n       156., 163., 142., 187., 173.,  39., 229., 155., 332., 257., 261.,\n        42., 201., 103.,  47., 142., 172.,  71.,  96., 173., 127., 150.,\n       230., 185., 209.,  37.,  92., 235., 131.,  97.,  40., 279.,  97.,\n       245., 258., 102., 168.,  51., 248.,  88.,  91.,  58., 110., 308.,\n        88.,  60., 311., 246., 310., 214., 200., 220., 131.,  72.,  72.,\n       181.,  89., 163., 104.,  96.,  70., 217.,  55., 317., 259.,  50.,\n       118., 200.,  25., 124., 129., 179., 109.,  71., 102., 252., 189.,\n       190., 263., 174., 259., 111.,  85., 145.,  85., 252., 258., 274.,\n        83., 140., 196., 219., 200., 197.,  51.,  66.,  79., 275.,  78.,\n       257., 180., 202.,  71., 122., 136., 270.,  70., 146., 281., 114.,\n        59., 191.,  91.,  65., 143., 185., 243.,  53.,  99., 125., 139.,\n       292.])\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(Y_test, pred,'o')\nplt.xlabel(\"True value\")\nplt.ylabel(\"Prediction\")\nplt.title(\"Out of sample test\")\n\nText(0.5, 1.0, 'Out of sample test')\n\n\n\n\n\n\nmodel.score(X_test, Y_test)\n\n0.5249868646449161\n\n\n\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the coefficient of determination :math:`R^2` of the\nprediction.\nThe coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`,\nwhere :math:`u` is the residual sum of squares ``((y_true - y_pred)\n** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true -\ny_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it\ncan be negative (because the model can be arbitrarily worse). A\nconstant model that always predicts the expected value of `y`,\ndisregarding the input features, would get a :math:`R^2` score of\n0.0.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True values for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    :math:`R^2` of ``self.predict(X)`` wrt. `y`.\nNotes\n-----\nThe :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/base.py\nType:      method\n\n\n\n\nShould we adjust the size of the test set? What would be the problem?\n\nfor values in [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]:\n\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=values)\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    print(f\"Test Set {values:.2f}% | Score: {score:.3f}\")\n\nTest Set 0.05% | Score: 0.427\nTest Set 0.10% | Score: 0.537\nTest Set 0.20% | Score: 0.558\nTest Set 0.30% | Score: 0.451\nTest Set 0.40% | Score: 0.513\nTest Set 0.50% | Score: 0.475\nTest Set 0.60% | Score: 0.488\nTest Set 0.70% | Score: 0.439\n\n\nThere is a tradeoff between: - a big test set: score more accurate, but the fitting is less accurate (more bias) - a small test set: score more volatile, but the fitting is more accurate (more variance)\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nscores = []\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = Y[train_index], Y[test_index]\n    print(X_train.shape)\n\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    scores.append(score)\n    \n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test\n\n(294, 10)\n(295, 10)\n(295, 10)\n\n\n\nscores\n\n[0.4693057771290108, 0.48724993937707484, 0.5095525852352711]\n\n\n\nsum(scores)/3\n\n0.4887027672471189\n\n\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\ndata['feature_names']\n\n['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']\n\n\n\nimport pandas\ndf = pandas.DataFrame(X, columns=data['feature_names'])\ndf['target'] = data['target']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      age\n      sex\n      bmi\n      bp\n      s1\n      s2\n      s3\n      s4\n      s5\n      s6\n      target\n    \n  \n  \n    \n      0\n      0.038076\n      0.050680\n      0.061696\n      0.021872\n      -0.044223\n      -0.034821\n      -0.043401\n      -0.002592\n      0.019908\n      -0.017646\n      151.0\n    \n    \n      1\n      -0.001882\n      -0.044642\n      -0.051474\n      -0.026328\n      -0.008449\n      -0.019163\n      0.074412\n      -0.039493\n      -0.068330\n      -0.092204\n      75.0\n    \n    \n      2\n      0.085299\n      0.050680\n      0.044451\n      -0.005671\n      -0.045599\n      -0.034194\n      -0.032356\n      -0.002592\n      0.002864\n      -0.025930\n      141.0\n    \n    \n      3\n      -0.089063\n      -0.044642\n      -0.011595\n      -0.036656\n      0.012191\n      0.024991\n      -0.036038\n      0.034309\n      0.022692\n      -0.009362\n      206.0\n    \n    \n      4\n      0.005383\n      -0.044642\n      -0.036385\n      0.021872\n      0.003935\n      0.015596\n      0.008142\n      -0.002592\n      -0.031991\n      -0.046641\n      135.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      437\n      0.041708\n      0.050680\n      0.019662\n      0.059744\n      -0.005697\n      -0.002566\n      -0.028674\n      -0.002592\n      0.031193\n      0.007207\n      178.0\n    \n    \n      438\n      -0.005515\n      0.050680\n      -0.015906\n      -0.067642\n      0.049341\n      0.079165\n      -0.028674\n      0.034309\n      -0.018118\n      0.044485\n      104.0\n    \n    \n      439\n      0.041708\n      0.050680\n      -0.015906\n      0.017282\n      -0.037344\n      -0.013840\n      -0.024993\n      -0.011080\n      -0.046879\n      0.015491\n      132.0\n    \n    \n      440\n      -0.045472\n      -0.044642\n      0.039062\n      0.001215\n      0.016318\n      0.015283\n      -0.028674\n      0.026560\n      0.044528\n      -0.025930\n      220.0\n    \n    \n      441\n      -0.045472\n      -0.044642\n      -0.073030\n      -0.081414\n      0.083740\n      0.027809\n      0.173816\n      -0.039493\n      -0.004220\n      0.003064\n      57.0\n    \n  \n\n442 rows × 11 columns\n\n\n\n\nfrom statsmodels.formula import api\n\n\nols_model = api.ols('target ~ age + sex + bmi + bp + s1 + s2 + s3 + s4 + s5 + s6', df)\n\n\nresult = ols_model.fit()\n\n\nresult.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         target        R-squared:             0.518\n\n\n  Model:                   OLS         Adj. R-squared:        0.507\n\n\n  Method:             Least Squares    F-statistic:           46.27\n\n\n  Date:             Wed, 16 Mar 2022   Prob (F-statistic): 3.83e-62\n\n\n  Time:                 11:59:29       Log-Likelihood:      -2386.0\n\n\n  No. Observations:         442        AIC:                   4794.\n\n\n  Df Residuals:             431        BIC:                   4839.\n\n\n  Df Model:                  10                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept   152.1335     2.576    59.061  0.000   147.071   157.196\n\n\n  age         -10.0122    59.749    -0.168  0.867  -127.448   107.424\n\n\n  sex        -239.8191    61.222    -3.917  0.000  -360.151  -119.488\n\n\n  bmi         519.8398    66.534     7.813  0.000   389.069   650.610\n\n\n  bp          324.3904    65.422     4.958  0.000   195.805   452.976\n\n\n  s1         -792.1842   416.684    -1.901  0.058 -1611.169    26.801\n\n\n  s2          476.7458   339.035     1.406  0.160  -189.621  1143.113\n\n\n  s3          101.0446   212.533     0.475  0.635  -316.685   518.774\n\n\n  s4          177.0642   161.476     1.097  0.273  -140.313   494.442\n\n\n  s5          751.2793   171.902     4.370  0.000   413.409  1089.150\n\n\n  s6           67.6254    65.984     1.025  0.306   -62.065   197.316\n\n\n\n\n  Omnibus:        1.506   Durbin-Watson:         2.029\n\n\n  Prob(Omnibus):  0.471   Jarque-Bera (JB):      1.404\n\n\n  Skew:           0.017   Prob(JB):              0.496\n\n\n  Kurtosis:       2.726   Cond. No.               227.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\nImport the Boston House Price Dataset from sklearn. Describe it. Compute correlations.\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?\n\n\n\nSklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity. (bonus: use k-fold validation)\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "session_8/Sklearn_correction.html",
    "href": "session_8/Sklearn_correction.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Import the diabetes dataset from sklearn. Describe it.\n\nfrom sklearn.datasets import load_diabetes\ndata = load_diabetes()\nX = data['data']\nY = data['target']\n\n\nprint(data['DESCR'])\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, T-Cells (a type of white blood cells)\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, thyroid stimulating hormone\n      - s5      ltg, lamotrigine\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3)\n\n\nX_train.shape\n\n(309, 10)\n\n\n\nX_test.shape\n\n(133, 10)\n\n\n\n133/(133+309)\n\n0.3009049773755656\n\n\nFeatures are already “centered and scaled”: no need to renormalize them\nTrain a linear model (with intercept) on the training set\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# by default there is an intercept (check the doc: default value for fit_intercept is True)\n\n\nLinearRegression?\n\n\nInit signature:\nLinearRegression(\n    *,\n    fit_intercept=True,\n    normalize=False,\n    copy_X=True,\n    n_jobs=None,\n    positive=False,\n)\nDocstring:     \nOrdinary least squares Linear Regression.\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.\nParameters\n----------\nfit_intercept : bool, default=True\n    Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered).\nnormalize : bool, default=False\n    This parameter is ignored when ``fit_intercept`` is set to False.\n    If True, the regressors X will be normalized before regression by\n    subtracting the mean and dividing by the l2-norm.\n    If you wish to standardize, please use\n    :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit``\n    on an estimator with ``normalize=False``.\ncopy_X : bool, default=True\n    If True, X will be copied; else, it may be overwritten.\nn_jobs : int, default=None\n    The number of jobs to use for the computation. This will only provide\n    speedup for n_targets > 1 and sufficient large problems.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\npositive : bool, default=False\n    When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n    .. versionadded:: 0.24\nAttributes\n----------\ncoef_ : array of shape (n_features, ) or (n_targets, n_features)\n    Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features.\nrank_ : int\n    Rank of matrix `X`. Only available when `X` is dense.\nsingular_ : array of shape (min(X, y),)\n    Singular values of `X`. Only available when `X` is dense.\nintercept_ : float or array of shape (n_targets,)\n    Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`.\nSee Also\n--------\nRidge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.\nNotes\n-----\nFrom the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.\nExamples\n--------\n>>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n>>> # y = 1 * x_0 + 2 * x_1 + 3\n>>> y = np.dot(X, np.array([1, 2])) + 3\n>>> reg = LinearRegression().fit(X, y)\n>>> reg.score(X, y)\n1.0\n>>> reg.coef_\narray([1., 2.])\n>>> reg.intercept_\n3.0000...\n>>> reg.predict(np.array([[3, 5]]))\narray([16.])\nFile:           ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\nmodel.fit(X_train, Y_train)\n\nLinearRegression()\n\n\n\nmodel.fit?\n\n\nSignature: model.fit(X, y, sample_weight=None)\nDocstring:\nFit linear model.\nParameters\n----------\nX : {array-like, sparse matrix} of shape (n_samples, n_features)\n    Training data\ny : array-like of shape (n_samples,) or (n_samples, n_targets)\n    Target values. Will be cast to X's dtype if necessary\nsample_weight : array-like of shape (n_samples,), default=None\n    Individual weights for each sample\n    .. versionadded:: 0.17\n       parameter *sample_weight* support to LinearRegression.\nReturns\n-------\nself : returns an instance of self.\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:      method\n\n\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\npred = model.predict(X_test)\n\n\nY_test\n\narray([190., 225., 141., 281., 168.,  42., 116., 276., 281.,  51., 121.,\n       156., 163., 142., 187., 173.,  39., 229., 155., 332., 257., 261.,\n        42., 201., 103.,  47., 142., 172.,  71.,  96., 173., 127., 150.,\n       230., 185., 209.,  37.,  92., 235., 131.,  97.,  40., 279.,  97.,\n       245., 258., 102., 168.,  51., 248.,  88.,  91.,  58., 110., 308.,\n        88.,  60., 311., 246., 310., 214., 200., 220., 131.,  72.,  72.,\n       181.,  89., 163., 104.,  96.,  70., 217.,  55., 317., 259.,  50.,\n       118., 200.,  25., 124., 129., 179., 109.,  71., 102., 252., 189.,\n       190., 263., 174., 259., 111.,  85., 145.,  85., 252., 258., 274.,\n        83., 140., 196., 219., 200., 197.,  51.,  66.,  79., 275.,  78.,\n       257., 180., 202.,  71., 122., 136., 270.,  70., 146., 281., 114.,\n        59., 191.,  91.,  65., 143., 185., 243.,  53.,  99., 125., 139.,\n       292.])\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(Y_test, pred,'o')\nplt.xlabel(\"True value\")\nplt.ylabel(\"Prediction\")\nplt.title(\"Out of sample test\")\n\nText(0.5, 1.0, 'Out of sample test')\n\n\n\n\n\n\nmodel.score(X_test, Y_test)\n\n0.5249868646449161\n\n\n\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the coefficient of determination :math:`R^2` of the\nprediction.\nThe coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`,\nwhere :math:`u` is the residual sum of squares ``((y_true - y_pred)\n** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true -\ny_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it\ncan be negative (because the model can be arbitrarily worse). A\nconstant model that always predicts the expected value of `y`,\ndisregarding the input features, would get a :math:`R^2` score of\n0.0.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True values for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    :math:`R^2` of ``self.predict(X)`` wrt. `y`.\nNotes\n-----\nThe :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/base.py\nType:      method\n\n\n\n\nShould we adjust the size of the test set? What would be the problem?\n\nfor values in [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]:\n\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=values)\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    print(f\"Test Set {values:.2f}% | Score: {score:.3f}\")\n\nTest Set 0.05% | Score: 0.427\nTest Set 0.10% | Score: 0.537\nTest Set 0.20% | Score: 0.558\nTest Set 0.30% | Score: 0.451\nTest Set 0.40% | Score: 0.513\nTest Set 0.50% | Score: 0.475\nTest Set 0.60% | Score: 0.488\nTest Set 0.70% | Score: 0.439\n\n\nThere is a tradeoff between: - a big test set: score more accurate, but the fitting is less accurate (more bias) - a small test set: score more volatile, but the fitting is more accurate (more variance)\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nscores = []\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = Y[train_index], Y[test_index]\n    print(X_train.shape)\n\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    scores.append(score)\n    \n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test\n\n(294, 10)\n(295, 10)\n(295, 10)\n\n\n\nscores\n\n[0.4693057771290108, 0.48724993937707484, 0.5095525852352711]\n\n\n\nsum(scores)/3\n\n0.4887027672471189\n\n\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\ndata['feature_names']\n\n['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']\n\n\n\nimport pandas\ndf = pandas.DataFrame(X, columns=data['feature_names'])\ndf['target'] = data['target']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      age\n      sex\n      bmi\n      bp\n      s1\n      s2\n      s3\n      s4\n      s5\n      s6\n      target\n    \n  \n  \n    \n      0\n      0.038076\n      0.050680\n      0.061696\n      0.021872\n      -0.044223\n      -0.034821\n      -0.043401\n      -0.002592\n      0.019908\n      -0.017646\n      151.0\n    \n    \n      1\n      -0.001882\n      -0.044642\n      -0.051474\n      -0.026328\n      -0.008449\n      -0.019163\n      0.074412\n      -0.039493\n      -0.068330\n      -0.092204\n      75.0\n    \n    \n      2\n      0.085299\n      0.050680\n      0.044451\n      -0.005671\n      -0.045599\n      -0.034194\n      -0.032356\n      -0.002592\n      0.002864\n      -0.025930\n      141.0\n    \n    \n      3\n      -0.089063\n      -0.044642\n      -0.011595\n      -0.036656\n      0.012191\n      0.024991\n      -0.036038\n      0.034309\n      0.022692\n      -0.009362\n      206.0\n    \n    \n      4\n      0.005383\n      -0.044642\n      -0.036385\n      0.021872\n      0.003935\n      0.015596\n      0.008142\n      -0.002592\n      -0.031991\n      -0.046641\n      135.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      437\n      0.041708\n      0.050680\n      0.019662\n      0.059744\n      -0.005697\n      -0.002566\n      -0.028674\n      -0.002592\n      0.031193\n      0.007207\n      178.0\n    \n    \n      438\n      -0.005515\n      0.050680\n      -0.015906\n      -0.067642\n      0.049341\n      0.079165\n      -0.028674\n      0.034309\n      -0.018118\n      0.044485\n      104.0\n    \n    \n      439\n      0.041708\n      0.050680\n      -0.015906\n      0.017282\n      -0.037344\n      -0.013840\n      -0.024993\n      -0.011080\n      -0.046879\n      0.015491\n      132.0\n    \n    \n      440\n      -0.045472\n      -0.044642\n      0.039062\n      0.001215\n      0.016318\n      0.015283\n      -0.028674\n      0.026560\n      0.044528\n      -0.025930\n      220.0\n    \n    \n      441\n      -0.045472\n      -0.044642\n      -0.073030\n      -0.081414\n      0.083740\n      0.027809\n      0.173816\n      -0.039493\n      -0.004220\n      0.003064\n      57.0\n    \n  \n\n442 rows × 11 columns\n\n\n\n\nfrom statsmodels.formula import api\n\n\nols_model = api.ols('target ~ age + sex + bmi + bp + s1 + s2 + s3 + s4 + s5 + s6', df)\n\n\nresult = ols_model.fit()\n\n\nresult.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         target        R-squared:             0.518\n\n\n  Model:                   OLS         Adj. R-squared:        0.507\n\n\n  Method:             Least Squares    F-statistic:           46.27\n\n\n  Date:             Wed, 16 Mar 2022   Prob (F-statistic): 3.83e-62\n\n\n  Time:                 11:59:29       Log-Likelihood:      -2386.0\n\n\n  No. Observations:         442        AIC:                   4794.\n\n\n  Df Residuals:             431        BIC:                   4839.\n\n\n  Df Model:                  10                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept   152.1335     2.576    59.061  0.000   147.071   157.196\n\n\n  age         -10.0122    59.749    -0.168  0.867  -127.448   107.424\n\n\n  sex        -239.8191    61.222    -3.917  0.000  -360.151  -119.488\n\n\n  bmi         519.8398    66.534     7.813  0.000   389.069   650.610\n\n\n  bp          324.3904    65.422     4.958  0.000   195.805   452.976\n\n\n  s1         -792.1842   416.684    -1.901  0.058 -1611.169    26.801\n\n\n  s2          476.7458   339.035     1.406  0.160  -189.621  1143.113\n\n\n  s3          101.0446   212.533     0.475  0.635  -316.685   518.774\n\n\n  s4          177.0642   161.476     1.097  0.273  -140.313   494.442\n\n\n  s5          751.2793   171.902     4.370  0.000   413.409  1089.150\n\n\n  s6           67.6254    65.984     1.025  0.306   -62.065   197.316\n\n\n\n\n  Omnibus:        1.506   Durbin-Watson:         2.029\n\n\n  Prob(Omnibus):  0.471   Jarque-Bera (JB):      1.404\n\n\n  Skew:           0.017   Prob(JB):              0.496\n\n\n  Kurtosis:       2.726   Cond. No.               227.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\nImport the Boston House Price Dataset from sklearn. Describe it. Compute correlations.\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?\n\n\n\nSklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity. (bonus: use k-fold validation)\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "session_8/graphs/Untitled1.html",
    "href": "session_8/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_8/graphs/inference.html",
    "href": "session_8/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_8/index.html",
    "href": "session_8/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Definition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E.\n\n\n\n\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition\n\n\n\n\n\n\n\n\n\n\n\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)\n\n\n\n\n\n\n\n\n\n\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound\n\n\n\n\n\n\n\n\n\ntabular data\n\n\n\n\n\n\n\nBanking networks\nProduction network\n\n\n\n\n\n\n\nBig data:\n\nwide data (K>>N)\nlong data (N>>K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\n\n\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\nsupervised: regression\n\n\n\nregression\n\n\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\nsupervised: classification\n\n\n\nclassification\n\n\n\nOutput is discrete\nRegular trick: \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying desses during the year:\n\n\n\n\n\n\n\n\n\\[\\underbrace{y}\\_{\\text{explained variable}} = a \\underbrace{x}\\_{\\text{explanatory variable}} + b\\]\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training\n\n\n\n\n\n\n\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear\n\n\n\n\n\n\n\n\n\n\n\nWe’ve got a lot of data.\nSometimes in doesn’t fit in the computer memory so we can’t run a basic regression\nSometimes, we would like to update our model continuously:\n\nincremental regression\n\n\n\n\n\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\nIncremental learning:\n\ngiven initial \\(a_0\\), \\(b_0\\)\npick \\(B\\) random observations, regress them to get new estimate \\(a\\), \\(b\\)\n\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n$a_1 a_0 (1-) + a $\n$b_1 b_0 (1-) + b $\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time\n\n\n\n\n\n\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a\\_{\\sigma(i)}, b\\_{\\sigma(i)})\\_{i=[1,B]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(B\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]\n\n\n\n\n\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]\n\n\n\n\n\n\n\n\n\n\n\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training.\n\n\n\n\n\n\nStochastic gradient descent\n\nAs long as the batch is taken randomly\nAs long as the learning rate is small enough\nOr the batch size big enough\nThe gradient is unbiased (i.e. \\(\\mathbb{E}\\left[ \\nabla \\xi(\\omega, \\theta) \\right] = \\nabla \\Xi(\\theta)\\))\n\nWe don’t need the whole dataset.\n\n\n\n\n\n\n\n\n\n\n\nProblem:\n\nthere are many independent variables \\(x_1, ... x_K\\), \\(K>>N\\) and one dependent variable.\n\\(y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\) is grossly overidentified.\n\nIdea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\(\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\)\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\(\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\)\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\nAI approach: minimize objective directly.\n\\(\\mu\\) is called a regularization term.\n\n\\(\\mu \\uparrow\\), bias increases, variance decreases\n\n\n\n\n\n\n\nLasso and ridge regression can be trained using Gradient Descent\nOr obtained using special algorithms\n\n\n\n\n\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors\n\n\n\n\n\n\n\n\n\n\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_1 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground\n\n\n\n\n\n\n\n\n\n\n\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)\n\nIf many training parameters are used (the hyperparameters)\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\n\nRule: the model and the hyperparameters should be chosen independently from the test set.\n\n\n\n\n\nnot easy\nmodeling asumptions (specification):\n\nfunctional space -> fit, variance (econ: \\(R^2\\))\nstatistical modeling: data generating process -> bias (econ: stdev)\n\nThere is a very general tradeoff bias/variance\nMany ML methods allow to estimate bias (possibly via bootstrapping)\n\n\n\n\n\nTraintest\n\n\n\n\n\n\nHoldout validation approach: keeps x% of the data for the training, (100-x)% for the test\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\nProblem: are we sure the validation size is correct? Are the results determined by an (un-) lucky draw ?\n\n\n\n\nSolution: \\(k\\)-fold validation\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\naverage them\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\n\n\n\n\n\n\n\n\n\nWorkflow\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\n\ncreate a model (independent from data)\n\ntrain the model on training dataset\n\nevaluate accuracy on test dataset (here \\(R^2\\))\n\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\n\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n\n\nmodel.fit(X_train, y_train)\n\n\nmodel.score(X_test, y_test)\n\n\nmodel.predict(X_new)\n\n\n\n\n\n\n\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "session_9/text_analysis.html",
    "href": "session_9/text_analysis.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Recall: big data contains heterogenous data\n\ntext / images / sound\n\n\n\n\n\n\nTaking the Fed at its Word: A New Approach to Estimating Central Bank Objectives using Text Analysis by Adam H. Shapiro and Daniel J. Wilson link\n\nRemember the Taylor rule? We tried to estimate it from the data.\nGeneralized version: \\(i_t = \\alpha_\\pi (\\pi_t-\\pi^{\\star}) + \\alpha_y (y_t-y)\\)\nIs there a way to measure the preferences of the central bank? (coefficients and inflation target?)\nShapiro and Wilson: let’s look at the FOMC meeting transcripts\nExcerpts (there are tons of them: 704,499)\n\n\n\n\nI had several conversations at Jackson Hole with Wall Street economists and journalists, and they said, quite frankly, that they really do not believe that our effective inflation target is 1 to 2 percent. They believe we have morphed into 1+1/2 to 2+1/2 percent, and no one thought that we were really going to do anything over time to bring it down to 1 to 2.\n\nSep 2006 St. Louis Federal Reserve President William Poole\n\n\n\nLike most of you, I am not at all alarmist about inflation. I think the worst that is likely to happen would be 20 or 30 basis points over the next year. But even that amount is a little disconcerting for me. I think it is very important for us to maintain our credibility on inflation and it would be somewhat expensive to bring that additional inflation back down.\n\nMarch 2006 Chairman Ben Bernanke\n\n\n\nWith inflation remaining at such rates, we could begin to lose credibility if markets mistakenly inferred that our comfort zone had drifted higher. When we stop raising rates, we ought to be reasonably confident that policy is restrictive enough to bring inflation back toward the center of our comfort zone, which I believe is 1+1/2 percent…So for today, we should move forward with an increase of 25 basis points…\n\nJan 2006 Chicago Federal Reserve President Michael Moskow\n\n\n\n\n\n\n\n\nSuppose you work in the trading floor of a financial instutition\nThese kind of tweets have disturbing impact on the markets. You need to react quickly.\nYou need a machine to assess the risk in real time.\nMore generally, tweeter is a quite unique source of real-time data\nHow do you analyse the content of the tweets?\nComment: actually it’s not only the content of the tweets, but who reads, who retweets: graph analysis\n\n\n\n\n\n\nThe main branches of text analysis are:\n\nsentiment analysis\n\nassociate positivity/negativity to a text\nprecise meaning of “sentiment” is context dependent\n\n\ntopic modeling\n\nclassify texts as belonging to known categories (supervised)\nfinding likely texts (unsupervised)\n\nnamed-entity recognition\n\nfind who gets mentioned in the text\nexample: A Cross-verified Database of Notable People, 3500BC-2018AD\n\nevent-extraction\n\nrecognize mention of events\n\n\n\n\n\n\n\n\nText analysis / text mining are somewhat used interchangeably \nIn general they consist in quantifying information used in a text…\n… so that it can be incorporated in machine learning analysis\nRecently, deep learning (and GPT-3) has changed this state of facts:\n\nsome models get trained direcly on text (intermediary phases are not explicited)\n\n\n\n\n\n\n\n\n\nbefore getting started with text analysis, one needs to get hold of the text in the first place\n\nhow to extract\n\nwebscraping: automate a bot to visit website and download text\ndocument extraction: for instance extract the text from pdf docs, get rid of everything irrelevant\n\n\nhow to store it\n\nwhat kind of database?\nimportant problem when database is big\n\n\ngood news! we won’t do it in this course\n\nyou need a bit more python-fu\n\n\n\n\n\n\n\n\n\n\nLet’s briefly see how text gets processed.\nGoal is to transform the text into a numerical vector of features\n\nStupid approach: “abc”->[1,2,3]\nwe need to capture some form of language structure\n\nAll the steps can be done fairly easily with nltk\n\nnltk is comparable to sklearn in terms of widespread adoption\n\n\n\n\n\n\n\nSteps:\n\ntokenization\nstopwords\nlexicon normalization\n\nstemming\nlemmatization\n\nPOS tagging\n\n\n\n\n\n\n\n\n\nTokenization: split input into atomic elements.\n\nWe can recognize sentences.\n\nOr words.\n\nIt is enough for some basic analysis:\n\n\nfrom nltk.probability import FreqDist\nfdist = FreqDist(words)\nprint(fdist.most_common(2))\n[('It', 1), (\"'s\", 1)]\n\n\n\n\n\nfrom nltk.tokenize import sent_tokenize\ntxt = \"\"\"Animal Farm is a short novel by George Orwell. It was\nwritten during World War II and published in 1945. It is about \na group of farm animals who rebel against their farmer. They \nhope to create a place where the animals can be equal, free,\n and happy.\"\"\"\nsentences  = sent_tokenize(txt)\nprint(sentences)\n['Animal Farm is a short novel by George Orwell.',\n 'It was\\nwritten during World War II and published in 1945.', \n 'It is about \\na group of farm animals who rebel against their farmer.', \n 'They \\nhope to create a place where the animals can be equal, free,\\n and happy.']\n\n\n\nfrom nltk.tokenize import word_tokenize\ntxt = \"It's a beautiful thing, the destruction of words.\"\nwords  = word_tokenize(txt)\nprint(words)\n['It', \"'s\", 'a', 'beautiful', 'thing', ',', 'the', 'destruction', 'of', 'words', '.']\n\n\n\n\n\n\n\n\n\n\nSometimes we need information about the kind of tokens that we have\n\nWe can perform part-of-speech tagging (aka grammatical tagging)\n\nThis is useful to refine interpretation of some words\n\n“it’s not a beautiful thing”\nvs “it’s a beautiful thing”\nconnotation of beautiful changes\n\n\n\n\n\nfrom nltk.tokenize import word_tokenize\ntagged = nltk.pos_tag(words)\ntagged\n[('It', 'PRP'),\n (\"'s\", 'VBZ'),\n ('a', 'DT'),\n ('beautiful', 'JJ'),\n ('thing', 'NN'),\n (',', ','),\n ('the', 'DT'),\n ('destruction', 'NN'),\n ('of', 'IN'),\n ('words', 'NNS'),\n ('.', '.')]\n\n\n\n\n\n\n\n\n\n\nSome words are very frequent and carry no useful meaning\n\n\nThey are called stopwords\n\n\nWe typically remove them from our word list\n\n\n\n\nfrom nltk.corpus import stopwords\nstop_words=set(stopwords.words(\"english\"))\nprint(stop_words)\n{'their', 'then', 'not', 'ma', 'here', ...}\n\n\n\nfiltered_words = [w for w in words if w not in stop_words]\nfiltered_words\n['beautiful', 'thing' 'destruction', 'words']\n\n\n\n\n\n\n\n\n\n\n\nSometimes, there are several variants of a given word\n\ntight, tightening, tighten\n\n\nStemming: keeping the word root\n\nLemmatization: keeps the word base\n\nlinguistically correct contrary to stemming\n\n\n\n\n\nfrom nltk.stem import PorterStemmer\nps = PorterStemmer()\n\nwords =  [\"tight\", \"tightening\", \"tighten\"]\nstemmed_words=[ps.stem(w) for w in words]\n['tight', 'tighten', 'tighten']\n\n\nfrom nltk.stem.wordnet import WordNetLemmatizer\nlem = WordNetLemmatizer()\n\nwords =  [\"flying\", \"flyer\", \"fly\"]\nstemmed_words=[ps.stem(w) for w in words]\nlemmatized_words=[ps.stem(w) for w in words]\n``` # lemmatized [‘flying’, ‘flyer’, ‘fly’] # stemmed [‘fli’, ‘flyer’, ‘fli’]\n\n\n\n\n\n\n\n\n\n\n\nWhat do we do now that we have reduced a text to a series of word occurrences?\nTwo main approaches:\n\nlexical analysis\nmachine learning\n\n\n\n\n\n\n\nUse a “sentiment dictionary” to provide a value (positive or negative) for each word\n\nsum the weights to get positive or negative sentiment\n\n\nExample: \\[\\underbrace{\\text{Sadly}}\\_{-}\\text{, there wasn't a glimpse of }\\underbrace{\\text{light}}\\_{+} \\text{ in his } \\text{world } \\text{ of intense }\\underbrace{\\text{suffering.}}\\_{-}\\]\n\nTotal:\n\n-1+1-1. Sentiment is negative.\n\n\nProblems:\n\nhere, taking grammar into account would change everything\ndoesn’t capture irony\nour dictionary doesn’t have weights for what matters to us \\[ \\text{the central bank forecasts increased }\\underbrace{\\text{inflation}}\\_{?}\\]\n\n\n\n\n\n\n\nIdea: we would like the weights to be endogenously determined\n\n\n\\[ \\underbrace{\\text{the}}_{x_1} \\underbrace{\\text{ central}}_{x_2} \\underbrace{\\text{ bank}}_{x_3} \\underbrace{\\text{ forecasts}}_{x_4} \\underbrace{\\text{ increased} }_{x_5} \\underbrace{\\text{ inflation}}_{x_6}\\]\n\nSuppose we had several texts: we can generate features by counting words in each of them | | the | central | bank | forecasts | increased | inflation | economy | exchange rate | crisis | sentiment | | —– | — | ——- | —- | ——— | ——— | ——— | ——- | ————- | —— | ———————- | | text1 | 1 | 1 | 2 | 1 | 1 | 2 | | | | -1 | | | text2 | 3 | | | | | 1 | 1 | 2 | | +1 | | | text3 | 4 | | 1 | | | 1 | | 1 | 1 | -1 | | |\n\nWe can the train the model: \\(y = x_1 f(w_1) + \\cdots x_K f(w_K)\\) where \\(y\\) is the sentiment and \\(w_i\\) is wordcount of word \\(w_i\\)\n\nof course, we need a similar procedure as before (split the training set and evaluation set, …)\nwe can use any model (like naive bayesian updating)\n\n\nThis approach is called Bag of Words (BOW)\n\n\n\n\n\n\nBag of words has a few pitfalls:\n\nit requires a big training set with labels\nit overweights long documents\nthere is noise due to the very frequent words that don’t affect sentiment\n\nImprovement: TF-IDF\n\nstands for Term-Frequency*Inverse-Distribution-Frequency\nreplace word frequency \\(f(w)\\) by \\[\\text{tf-idf} = f(w)\\frac{\\text{number of documents}}{\\text{number of documents containing $w$}}\\]"
  },
  {
    "objectID": "session_9/Sklearn.html",
    "href": "session_9/Sklearn.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Import the diabetes dataset from sklearn. Describe it.\nSplit the dataset into a training set (70%) and a test set (30%)\n\n\n\n\nTrain a linear model (with intercept) on the training set\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\nShould we adjust the size of the test set? What would be the problem?\nImplement \\(k\\)-fold model with \\(k=3\\).\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\n\n\nImport the Boston House Price Dataset from sklearn. Describe it. Compute correlations.\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?\n\n\n\nSklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity. (bonus: use k-fold validation)\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "session_9/graphs/Untitled1.html",
    "href": "session_9/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_9/graphs/inference.html",
    "href": "session_9/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_9/index.html",
    "href": "session_9/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Binary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values\n\n\n\n\n\n\n\n\n\nGiven a regression model (a linear predictor)\n\n\\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\] - one can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid - The loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\] - This works for any regression model (LASSO, RIDGE, nonlinear…)\n\n\n\n\n\n\n\n\n\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1.\n\n\n\n\n\n\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)\n\n\n\n\n\n\n\n\n\n\nThere are many - Logistic Regression - Naive Bayes Classifier - Nearest Distance - neural networks (replace score in sigmoid by n.n.) - Decision Trees - Support Vector Machines\n\n\n\n\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset."
  },
  {
    "objectID": "session_9/index.html#validation",
    "href": "session_9/index.html#validation",
    "title": "Data-Based Economics",
    "section": "Validation",
    "text": "Validation\n\n\nValidity of a classification algorithm\n\nIndependently of how the classification is made, its validity can be assessed with a similar procedure as in the regression.\nSeparate training set and test set\n\ndo not touch test set at all during the training\n\nCompute score: number of correctly identified categories\n\nnote that this is not the same as the loss function minimized by the training\n\n\n\n\n\nClassification matrix\n\nFor binary classification, we focus on the classification matrix or confusion matrix. | Predicted | (0) Actual | (1) Actual | | ——— | ————— | ————— | | 0 | true negatives (TN) | false negatives (FN) | | 1 | false positives (FP) | true positives (TP) |\nOverall accuracy: \\(\\frac{\\text{TN}+\\text{TP}}{\\text{total}}\\)\nSensitivity: \\(\\frac{TP}{FP+TP}\\)\nFalse Positive Rate (FPR): \\(\\frac{FP}{TN+FP}\\)\nIn some cases, sensitivity is the actual objective, at the expense of lower FPR\n\nexample: fraud detection\n\nExample:\n\nfacial recognition by London police: 2% accuracy\nfacial recognition by South Wales police: 9% accuracy\na success?\n\n\n\n\n\nConfusion matrix with sklearn\n\nPredict on the test set:\n\ny_pred = model.predict(x_test)\n\nCompute confusion matrix:\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"
  },
  {
    "objectID": "session_2/index.html#tabular-data",
    "href": "session_2/index.html#tabular-data",
    "title": "Dataframes",
    "section": "Tabular Data",
    "text": "Tabular Data"
  },
  {
    "objectID": "session_2/index.html#pandas",
    "href": "session_2/index.html#pandas",
    "title": "Dataframes",
    "section": "Pandas",
    "text": "Pandas"
  },
  {
    "objectID": "session_2/index.html#file-formats",
    "href": "session_2/index.html#file-formats",
    "title": "Dataframes",
    "section": "File Formats",
    "text": "File Formats"
  },
  {
    "objectID": "session_2/index.html#data-sources",
    "href": "session_2/index.html#data-sources",
    "title": "Dataframes",
    "section": "Data Sources",
    "text": "Data Sources"
  },
  {
    "objectID": "session_2/index.html#inspect-describe-data",
    "href": "session_2/index.html#inspect-describe-data",
    "title": "Dataframes",
    "section": "Inspect / describe data",
    "text": "Inspect / describe data"
  },
  {
    "objectID": "session_2/index.html#manipulating-dataframes",
    "href": "session_2/index.html#manipulating-dataframes",
    "title": "Dataframes",
    "section": "Manipulating DataFrames",
    "text": "Manipulating DataFrames"
  },
  {
    "objectID": "session_2/index.html#reshaping-dataframes",
    "href": "session_2/index.html#reshaping-dataframes",
    "title": "Dataframes",
    "section": "Reshaping DataFrames",
    "text": "Reshaping DataFrames"
  },
  {
    "objectID": "session_2/index.html#merging",
    "href": "session_2/index.html#merging",
    "title": "Dataframes",
    "section": "Merging",
    "text": "Merging"
  },
  {
    "objectID": "session_2/index.html#merging-two-dataframes-with-pandas",
    "href": "session_2/index.html#merging-two-dataframes-with-pandas",
    "title": "Dataframes",
    "section": "Merging two DataFrames with pandas",
    "text": "Merging two DataFrames with pandas\ndf_long_1.merge(df_long_2)\n\n\n\n\n\n\n\n\n\nyear\n\n\ncountry\n\n\nmeasure\n\n\nrecipient\n\n\n\n\n\n\n0\n\n\n2018\n\n\nfrance\n\n\n950.0\n\n\nmaxime\n\n\n\n\n1\n\n\n2019\n\n\nfrance\n\n\n960.0\n\n\nmauricette\n\n\n\n\n2\n\n\n2020\n\n\nfrance\n\n\n1000.0\n\n\nmathilde\n\n\n\n\n3\n\n\n2018\n\n\nusa\n\n\n2500.0\n\n\nsherlock\n\n\n\n\n4\n\n\n2019\n\n\nusa\n\n\n2150.0\n\n\nwatson\n\n\n\n\n5\n\n\n2020\n\n\nusa\n\n\n2300.0\n\n\nmoriarty"
  },
  {
    "objectID": "session_2/Numerical Python.html",
    "href": "session_2/Numerical Python.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Most python scientists, use the following libraries:\n\nnumpy: performant array library (vectors and matrices)\nmatplotlib: plotting library\nscipy: all kinds of mathematical routines\n\nIn the rest of the course, we’ll make some use of numpy and matplotlib\nThey are included in all python distributions like Anaconda Python\nAll additional libraries use numpy and matplotlib: pandas, statsmodels, sklearn\n\n\n\n\nIt is standard to import the libraries as np, and plt. We’ll follow this convention here.\n\n# these lines need to be run only once per program\nimport numpy as np\nimport matplotlib as plt\n\n\nprint(f\"Numpy version {np.__version__}\")\nprint(f\"Matplotlib version {plt.__version__}\")\n\nNumpy version 1.19.5\nMatplotlib version3.3.3\n\n\n\n\n\n\n\n\n\nVectors and matrices are created with the np.array(...) function.\nSpecial vectors can be created with np.zeros, np.ones, np.linspace\n\n\n# an array can be created from a list of numbers\nnp.array( [1.0, 2.0, 3.0] )\n\narray([1., 2., 3.])\n\n\n\n# or initialized by specifying the length of the array\nnp.zeros(5)\n\narray([0., 0., 0., 0., 0.])\n\n\n\n# 10 regularly spaced points between 0 and 1\nnp.linspace(0, 1, 10)\n\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n\n\n\n\n\n\nA matrix is a 2-dimensional array and is created with np.array\nFunction np.matrix() has been deprecated: do not use it.\nThere are functions to create specific matrices: np.eye, np.diag, …\n\n\n# an array can be created from a list of (equal size) lists\nnp.array([\n    [1.0, 2.0, 3.0],\n    [4  ,   5,   6] \n])\n\narray([[1., 2., 3.],\n       [4., 5., 6.]])\n\n\n\n# initialize an empty matrix with the dimensions as a tuple\nA = np.zeros( (2, 3) )\nA\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\n# matrix dimensions are contained in the shape attribute\nA.shape\n\n(2, 3)\n\n\n\n\n\nVector multiplications and Matrix multiplications can be performed using special sign @\n\nA = np.array([[1.0, 2.0], [2,4]])\nA\n\narray([[1., 2.],\n       [2., 4.]])\n\n\n\nB = np.array([1.0, 2.0])\nB\n\narray([1., 2.])\n\n\n\nA@B\n\narray([ 5., 10.])\n\n\n\nA@A\n\narray([[ 5., 10.],\n       [10., 20.]])\n\n\n\n\n\nNumpy arrays can contain data of several scalar types.\n\n[True, False, True]\n\n[True, False, True]\n\n\n\n# vector of boolean\nboolean_vector = np.array( [True, False, True] )\nprint(f\"type of scalar '{boolean_vector.dtype}'\")\nboolean_vector\n\ntype of scalar 'bool'\n\n\narray([ True, False,  True])\n\n\n\n# vector of integers\nint_vector = np.array([1, 2, 0])\nprint(f\"type of scalar '{int_vector.dtype}'\")\nint_vector\n\ntype of scalar 'int64'\n\n\narray([1, 2, 0])\n\n\n\n\n\n\nElements and subarrays, can be retrieved using the same syntax as lists and strings.\n\nRemember that indexing starts at 0.\n\n\n\nV = np.array([0., 1., 2., 3., 4.])\ndisplay(V[1])  # second element\n\n1.0\n\n\n\nV = np.array([0., 1., 2., 3., 4.])\ndisplay(V[1:3])  # second, third and fourth element\n\narray([1., 2.])\n\n\n\n\n\n\nElements and suvectors, can be assigned to new values, as long as they have the right dimensions.\n\n\nV = np.array([1., 1., 2., 4., 5., 8., 13.])\nV[3] = 3.0\nV\n\narray([ 1.,  1.,  2.,  3.,  5.,  8., 13.])\n\n\n\nV = np.array([1., 1., 2., 4., 5., 8., 13.])\n# V[1:4] = [1,2,3,4] # this doesn't work\nV[1:4] = [2,3,4] # this works\n\n\n\n\n\nIndexing generalizes to matrices: there are two indices istead of one: M[i,j]\nOne can extract a row, or a column (a slice) with M[i,:] or M[:,i]\nA submatrix is defining with two intervals: M[i:j, k:l] or M[i:j, :], …\n\n\nM = np.array([[1,2,3],[4,5,6],[7,8,9]])\nM\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[0,1] # access element (1,2)\n\n2\n\n\n\nM[2,:] # third row\n\narray([7, 8, 9])\n\n\n\nM[:,1] # second column     # M[i,1] for any i\n\narray([2, 5, 8])\n\n\n\nM[1:3, :] # lines from 1 (included) to 3 (excluded) ; all columns\n\narray([[4, 5, 6],\n       [7, 8, 9]])\n\n\n\n\n\n\nM = np.array([[1,2,3],[4,5,6],[7,8,9]])\nM\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[0,0] = 0\nM\n\narray([[0, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nM[1:3, 1:3] = np.array([[0,1],[1,0]]) # dimensions must match\nM\n\narray([[0, 2, 3],\n       [4, 0, 1],\n       [7, 1, 0]])\n\n\n\n\n\n\nThe following algebraic operations are defined on arrays: +, -, *, /, **.\nComparisons operators (<,<=, >, >=, ==) are defined are return boolean arrays.\nThey operate element by element.\n\n\nA = np.array([1,2,3,4])\nB = np.array([4,3,2,1])\nA+B\n\narray([5, 5, 5, 5])\n\n\n\nA*B    # note the difference with A@B\n\narray([4, 6, 6, 4])\n\n\n\nA>B\n\narray([False, False,  True,  True])\n\n\n\n\n\n\nThe following logical operations are defined element-wise on arrays: & (and), | (or), ~ (not)\n\n\nA = np.array([False, False, True, True])\nB = np.array([False, True, False, True])\n\n\n~A\n\narray([ True,  True, False, False])\n\n\n\nA | B\n\narray([False,  True,  True,  True])\n\n\n\nA & B\n\narray([False, False, False,  True])\n\n\n\n\n\n\nArrays can be indexed by boolean arrays instead of ranges.\nOnly elements corresponding to true are retrieved\n\n\nx = np.linspace(0,1,6)\nx\n\narray([0. , 0.2, 0.4, 0.6, 0.8, 1. ])\n\n\n\n# indexes such that (x^2) > (x/2)\nx**2 > (x/2)\n\narray([False, False, False,  True,  True,  True])\n\n\n\ncond = x**2 > (x/2)\nx[ cond ] \n\narray([0.6, 0.8, 1. ])\n\n\n\n\n\n\nNumpy library has defined very consistent conventions, to match inconsistent dimensions.\nIgnore them for now…\n\n\nM = np.eye(4)\nM\n\narray([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]])\n\n\n\nM[2:4, 2:4] = 0.5 # float\nM\n\narray([[1. , 0. , 0. , 0. ],\n       [0. , 1. , 0. , 0. ],\n       [0. , 0. , 0.5, 0.5],\n       [0. , 0. , 0.5, 0.5]])\n\n\n\nM[:,:2] = np.array([[0.1, 0.2]])  # 1x2 array\nM\n\narray([[0.1, 0.2, 0. , 0. ],\n       [0.1, 0.2, 0. , 0. ],\n       [0.1, 0.2, 0.5, 0.5],\n       [0.1, 0.2, 0.5, 0.5]])\n\n\n\n\n\n\nOther useful functions (easy to google):\n\nnp.arange() regularly spaced integers\nnp.where() find elements in\n…\n\n\n\n\n\n\n\n\n\nmatplotlib is …\nobject oriented api optional Matlab-like syntax\nmain function is plt.plot(x,y) where x and y are vectors (or iterables like lists)\n\nlots of optional arguments\n\n\n\nfrom matplotlib import pyplot as plt\n\n\n\n\n\nx = np.linspace(-1,1,6)\n\n\ny = np.sin(x)/x # sinus cardinal\n\n\nplt.plot(x,y,'o')\nplt.plot(x,y)\n\n\n\n\n\n\n\n\nx = np.linspace(-5,5,100)\n\nfig = plt.figure() # keep a figure open to draw on it\nfor k in range(1,5):\n    y = np.sin(x*k)/(x*k)\n    plt.plot(x, y, label=f\"$sinc({k} x)$\") # label each line\nplt.plot(x, x*0, color='black', linestyle='--')\nplt.grid(True) # add a grid\nplt.title(\"Looking for the right hat.\")\nplt.legend(loc=\"upper right\")\n\n<matplotlib.legend.Legend at 0x7f8772c5e610>\n\n\n\n\n\n\n\n\n\nx = np.linspace(-5,5,100)\n\nplt.figure()\nplt.subplot(2,2,1) # create a 2x2 subplot and draw in first quadrant\nplt.plot(x,x)\nplt.subplot(2,2,2) # create a 2x2 subplot and draw in second quadrant\nplt.plot(x,-x)\nplt.subplot(2,2,3) # create a 2x2 subplot and draw in third quadrant\nplt.plot(x,-x)\nplt.subplot(2,2,4) # create a 2x2 subplot and draw in fourth quadrant\nplt.plot(x,x)\n\nplt.tight_layout() # save some space\n\n\n\n\n\n\n\n\nplotly (nice javascript graphs)\naltair (good for datavisualisation/interactivity)\n\npython wrapper to Vega-lite\n\n\n\n\n\n\n\nDataFrames and pandas"
  },
  {
    "objectID": "session_2/Exercises.html",
    "href": "session_2/Exercises.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\nDefine a vector y representing \\(y=sin(x)\\)\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y>0.1 \\text{else} 0.1\\)\nPlot y, y1, y2 against x\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\nCreate an empty vector x = np.zeros(T)\nLoop over t>0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\nUse function hpfilter from statsmodels (google it). It returns a and a residual\nPlot the simulated series, the filtered series and the residual\n\n\n\n\n\nYou will need the library vega_datasets and the altair library. You can install them with !pip install vega_datasets and !pip install altair Load the iris database.\n\nPrint statistics (mean, std), by flower, for each characteristics.\nUse matplotlib to make correlation plots, betwen flowers characteristics. (for instance, plot sepalWidth against sepalLength. Ideally, use different shapes or colors for various flowers.\nConvert the database to long format\nUse altair, to plot correlation between two characteristics, with different color for each flower. Plot all correlations.\n\n\n\n\nIf needed, install dbnomics with !pip install dbnomics.\n\nDownload inflation, unemployment and gdp series from France.\nCompute growth rate of gdp.\nPlot two graphs two verify graphically the Phillips curve (unemployment against inflation) and Okun’s law (unemployment against output)."
  },
  {
    "objectID": "session_2/Exercises_correction.html",
    "href": "session_2/Exercises_correction.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Define a vector x with 1000 regularly spaced elements between 0 and 10\n\n\nimport numpy as np\nx = np.linspace(0,10, 1000)\n\n\nDefine a vector y representing \\(y=sin(x)\\)\n\n\ny = np.sin(x)\n\n\nDefine a vector y1 representing \\(y=abs(sin(x))\\)\n\n\ny1 = np.abs(np.sin(x))\n\n\nDefine a vector y2 representing \\(y=sin(x) \\text{if} y>0.1 \\text{else} 0.1\\)\n\n\ncond = (y>0.1)\n\n\ny2 = np.sin(x)*cond + 0.1*(~cond)\n\n\nPlot y, y1, y2 against x\n\n\nfrom matplotlib import pyplot as plt\n\nplt.plot(x,y, label=\"y\")\nplt.plot(x,y1, label='y1')\nplt.plot(x,y2, label='y2')\nplt.grid(True)\nplt.legend(loc='lower right')\n\n<matplotlib.legend.Legend at 0x7fc33d86d8e0>\n\n\n\n\n\n\n\n\n\nSet T=100, rho=0.9, sigma=0.01. We consider an autoregressive process \\(x_t=\\rho x_{t-1} + \\epsilon_t\\) where \\(\\epsilon_t\\) is normally distributed with standard deviation \\(\\sigma\\)\n\n\nT = 100\nrho = 0.9\nsigma = 0.01\n\n\nCreate an empty vector x = np.zeros(T)\n\n\nimport numpy as np\nx = np.zeros(T)\nx\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nLoop over t>0 and fill x[t] so that x represents a simulation for t periods of process \\(x_t\\)\n\n\nnp.random.normal(scale=sigma)\nnp.random.randn()*sigma\n\n-0.012179445299749143\n\n\n\nfor t in range(1, T):\n    # press tabulation to indent\n    ϵ = np.random.randn()*sigma # random normal variable with standard deviation sigma (google numpy random variable)\n    x[t] = rho*x[t-1] + ϵ\n\n\nfrom matplotlib import pyplot as plt\nplt.plot(x)\n\n\n\n\n\nUse function hpfilter from statsmodels (google it). It returns a and a residual\n\n\nfrom statsmodels.tsa.filters.hp_filter import hpfilter\ncycle, trend = hpfilter(x)\n\n#cycle is residual\n\n\nPlot the simulated series, the filtered series and the residual\n\n\n\nplt.subplot(2,1,1)\nplt.plot(x, label='data')\nplt.plot(trend, label='trend')\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(cycle, label='cycle (residual)')\nplt.legend()\n\n<matplotlib.legend.Legend at 0x7fc32bc7cfa0>\n\n\n\n\n\n\n\n\n\nYou will need the library vega_datasets and the altair library. You can install them with !pip install vega_datasets and !pip install altair Load the iris database.\n\n# uncomment and run the following if vega_datasets is not already installed\n# !pip install vega_datasets # on linux\n# pip install vega_datasets # try if the former doesn't work\n\n\n# uncomment and run the following if altair is not already installed\n#!pip install altair\n\n\nPrint statistics (mean, std), by flower, for each characteristics.\n\n\n# we start by importing the library\nimport vega_datasets\n\n\ndf = vega_datasets.data.iris()\ndf\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\n\n# we can print a summary for the whole database\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n  \n  \n    \n      count\n      150.000000\n      150.000000\n      150.000000\n      150.000000\n    \n    \n      mean\n      5.843333\n      3.057333\n      3.758000\n      1.199333\n    \n    \n      std\n      0.828066\n      0.435866\n      1.765298\n      0.762238\n    \n    \n      min\n      4.300000\n      2.000000\n      1.000000\n      0.100000\n    \n    \n      25%\n      5.100000\n      2.800000\n      1.600000\n      0.300000\n    \n    \n      50%\n      5.800000\n      3.000000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.400000\n      3.300000\n      5.100000\n      1.800000\n    \n    \n      max\n      7.900000\n      4.400000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\n# but this mixes all kinds of flowers\n# here is how we do it for the 'setosa' type:\ndf[df['species']=='setosa'].describe()\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n  \n  \n    \n      count\n      50.00000\n      50.000000\n      50.000000\n      50.000000\n    \n    \n      mean\n      5.00600\n      3.428000\n      1.462000\n      0.246000\n    \n    \n      std\n      0.35249\n      0.379064\n      0.173664\n      0.105386\n    \n    \n      min\n      4.30000\n      2.300000\n      1.000000\n      0.100000\n    \n    \n      25%\n      4.80000\n      3.200000\n      1.400000\n      0.200000\n    \n    \n      50%\n      5.00000\n      3.400000\n      1.500000\n      0.200000\n    \n    \n      75%\n      5.20000\n      3.675000\n      1.575000\n      0.300000\n    \n    \n      max\n      5.80000\n      4.400000\n      1.900000\n      0.600000\n    \n  \n\n\n\n\n\n# or we can print the statistics for all species (here we do it for the mean)\nfor spec in ['setosa', 'virginica', 'versicolor']:\n    print(f\"\\nMean for: '{spec}'\")\n    m = df[df['species']==spec].mean()\n    print(m)\n\n\nMean for: 'setosa'\nsepalLength    5.006\nsepalWidth     3.428\npetalLength    1.462\npetalWidth     0.246\ndtype: float64\n\nMean for: 'virginica'\nsepalLength    6.588\nsepalWidth     2.974\npetalLength    5.552\npetalWidth     2.026\ndtype: float64\n\nMean for: 'versicolor'\nsepalLength    5.936\nsepalWidth     2.770\npetalLength    4.260\npetalWidth     1.326\ndtype: float64\n\n\n\n# the same result can be obtained using pandas' groubpy function\ndf.groupby('species').apply( lambda x: x.mean())\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n    \n      species\n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      5.006\n      3.428\n      1.462\n      0.246\n    \n    \n      versicolor\n      5.936\n      2.770\n      4.260\n      1.326\n    \n    \n      virginica\n      6.588\n      2.974\n      5.552\n      2.026\n    \n  \n\n\n\n\n\n# same for the standard deviation\ndf.groupby('species').apply( lambda x: x.std())\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n    \n      species\n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      0.352490\n      0.379064\n      0.173664\n      0.105386\n    \n    \n      versicolor\n      0.516171\n      0.313798\n      0.469911\n      0.197753\n    \n    \n      virginica\n      0.635880\n      0.322497\n      0.551895\n      0.274650\n    \n  \n\n\n\n\n\n# we can get all statistics at once, by group, with .describe\ndf.groupby('species').apply( lambda x: x.describe())\n\n\n\n\n\n  \n    \n      \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n    \n      species\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      setosa\n      count\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n    \n    \n      mean\n      5.006000\n      3.428000\n      1.462000\n      0.246000\n    \n    \n      std\n      0.352490\n      0.379064\n      0.173664\n      0.105386\n    \n    \n      min\n      4.300000\n      2.300000\n      1.000000\n      0.100000\n    \n    \n      25%\n      4.800000\n      3.200000\n      1.400000\n      0.200000\n    \n    \n      50%\n      5.000000\n      3.400000\n      1.500000\n      0.200000\n    \n    \n      75%\n      5.200000\n      3.675000\n      1.575000\n      0.300000\n    \n    \n      max\n      5.800000\n      4.400000\n      1.900000\n      0.600000\n    \n    \n      versicolor\n      count\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n    \n    \n      mean\n      5.936000\n      2.770000\n      4.260000\n      1.326000\n    \n    \n      std\n      0.516171\n      0.313798\n      0.469911\n      0.197753\n    \n    \n      min\n      4.900000\n      2.000000\n      3.000000\n      1.000000\n    \n    \n      25%\n      5.600000\n      2.525000\n      4.000000\n      1.200000\n    \n    \n      50%\n      5.900000\n      2.800000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.300000\n      3.000000\n      4.600000\n      1.500000\n    \n    \n      max\n      7.000000\n      3.400000\n      5.100000\n      1.800000\n    \n    \n      virginica\n      count\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n    \n    \n      mean\n      6.588000\n      2.974000\n      5.552000\n      2.026000\n    \n    \n      std\n      0.635880\n      0.322497\n      0.551895\n      0.274650\n    \n    \n      min\n      4.900000\n      2.200000\n      4.500000\n      1.400000\n    \n    \n      25%\n      6.225000\n      2.800000\n      5.100000\n      1.800000\n    \n    \n      50%\n      6.500000\n      3.000000\n      5.550000\n      2.000000\n    \n    \n      75%\n      6.900000\n      3.175000\n      5.875000\n      2.300000\n    \n    \n      max\n      7.900000\n      3.800000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\nUse matplotlib to make correlation plots, betwen flowers characteristics. (for instance, plot sepalWidth against sepalLength. Ideally, use different shapes or colors for various flowers.\n\nFirst, let’s do the correlation plot for one pair of two characteristics and one species type.\n\n# we need to import the plotting library:\nfrom matplotlib import pyplot as plt\n\n\n# we do it for setosa\nddf = df[df['species']=='setosa'] # extract subdataframe where species=='setosa'\nplt.plot(ddf['sepalLength'], ddf['sepalWidth'], 'o', label=spec)\nplt.xlabel(\"sepalLength\")\nplt.ylabel(\"sepalWidth\")\n\nText(0, 0.5, 'sepalWidth')\n\n\n\n\n\nHere is how we can plot the same plot for all species on the same graph. Not that matplotlib chooses a new color by default, for each new call to function plot()\n\n# let's get a list of all species\nspecies = df['species'].unique()\nspecies\n\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\n\n\nfor spec in species:\n    ddf = df[df['species']==spec]\n    plt.plot(ddf['sepalLength'], ddf['sepalWidth'], 'o', label=spec)\nplt.legend()\n\n<matplotlib.legend.Legend at 0x7fc32baf4b20>\n\n\n\n\n\nNow we can produce the full graph. We use the subplots function to arrange the graphs on a 4x4 grid.\n\n# we compute the list of characteristics from the columns of the tables \ncharacteristics = df.columns[:4] # we ignore the 5th column which is 'species'\ncharacteristics\n\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth'], dtype='object')\n\n\n\nplt.figure(figsize=(16,16))\n# we loop over lines (i from 0 to 3)\nfor i in range(4):\n    ch_i = characteristics[i]\n    # we loop over columns (j from 0 to 3)\n    for j in range(4):\n        ch_j = characteristics[j]\n\n        # create the subplot \n        # we compute the position of the current subplot (goes from 1 to 16)\n        position = i*4 + j + 1\n        plt.subplot(4, 4, position)\n        for spec in species:\n            ddf = df[df['species']==spec]\n            plt.plot(ddf[ch_i], ddf[ch_j], 'o', label=spec)\n            plt.xlabel(ch_i)\n            plt.ylabel(ch_j)\nplt.tight_layout()\n#         plt.legend()\n\n\n\n\n\nConvert the database to long format\n\n\ndf_long = df.melt(value_vars=['sepalLength','sepalWidth','petalLength','petalWidth'], \n                  id_vars=\"species\" )\ndf_long.head()\n\n\n\n\n\n  \n    \n      \n      species\n      variable\n      value\n    \n  \n  \n    \n      0\n      setosa\n      sepalLength\n      5.1\n    \n    \n      1\n      setosa\n      sepalLength\n      4.9\n    \n    \n      2\n      setosa\n      sepalLength\n      4.7\n    \n    \n      3\n      setosa\n      sepalLength\n      4.6\n    \n    \n      4\n      setosa\n      sepalLength\n      5.0\n    \n  \n\n\n\n\n\nUse altair, to plot correlation between two characteristics, with different color for each flower. Plot all correlations.\n\nAn introduction about how to use altair is on youtube: Altair Otherwise, the online doc is very useful and complete. It has many demos that can be adapted to your need: demos\n\nimport altair as alt\n\n\nch = alt.Chart(df).mark_point().encode(\n    x='sepalWidth',\n    y='petalWidth',\n    color='species',\n)\nch\n\n\n\n\n\n\nTo plot all correlations, best practice is to use altair’s repeat function. Note that the result is an interactive graph where all subplots move in a synchronized way. This is a typical feature of “visualization” libraries.\n\nalt.Chart(df).mark_point().encode(\n    alt.X(alt.repeat(\"column\"), type='quantitative'),\n    alt.Y(alt.repeat(\"row\"), type='quantitative'),\n    color='species:N'\n).properties(\n    width=200,\n    height=200\n).repeat(\n    row=['petalLength', 'petalWidth','sepalLength', 'sepalWidth'],\n    column=['petalLength', 'petalWidth','sepalLength', 'sepalWidth']\n).interactive()\n\n\n\n\n\n\n\n\n\nIf needed, install dbnomics with !pip install dbnomics.\n\nDownload inflation, unemployment and gdp series from France.\n\nThere is a clear tutorial on how to use dbnomics available from Quantecon. There are two ways to import a dbnomics series:\n\nuse api link\nuse the organization/database/series identifiers\n\nDownload with the API was broken when we tried in class (the website returned an incorrect json file), so we will use the second method. (update: this seems to be fixed now)\nOn the dbnomics website we search for “inflation france” and decide to use OECD database. We eventually obtain the following page:\n\nFrom this page we obtain the series identifier: OECD/MEI/FRA.CPALTT01.CTGY.M\nIt is split in three parts: - organization: OECD - database: KEY (Key Economic Indicators) - series: CPALTT01.FRA.GY.A\nWe use these elements to import a series with dbnomics:\n\nimport dbnomics\ndf_inflation = dbnomics.fetch_series('OECD', 'KEI', 'CPALTT01.FRA.GY.A')\ndf_inflation.head()\n\n\n\n\n\n  \n    \n      \n      @frequency\n      provider_code\n      dataset_code\n      dataset_name\n      series_code\n      series_name\n      original_period\n      period\n      original_value\n      value\n      SUBJECT\n      LOCATION\n      MEASURE\n      FREQUENCY\n      Subject\n      Country\n      Measure\n      Frequency\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1956\n      1956-01-01\n      1.897315\n      1.897315\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      1\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1957\n      1957-01-01\n      3.057669\n      3.057669\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      2\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1958\n      1958-01-01\n      15.260526\n      15.260526\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      3\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1959\n      1959-01-01\n      5.815255\n      5.815255\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      4\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1960\n      1960-01-01\n      4.139938\n      4.139938\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n  \n\n\n\n\n\n# equivalent:\n# df_inflation = dbnomics.fetch_series_by_api_link(...)\n# df_inflation\n\n\n# let's check it is not empty:\ndf_inflation.head()\n\n\n\n\n\n  \n    \n      \n      @frequency\n      provider_code\n      dataset_code\n      dataset_name\n      series_code\n      series_name\n      original_period\n      period\n      original_value\n      value\n      SUBJECT\n      LOCATION\n      MEASURE\n      FREQUENCY\n      Subject\n      Country\n      Measure\n      Frequency\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1956\n      1956-01-01\n      1.897315\n      1.897315\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      1\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1957\n      1957-01-01\n      3.057669\n      3.057669\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      2\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1958\n      1958-01-01\n      15.260526\n      15.260526\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      3\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1959\n      1959-01-01\n      5.815255\n      5.815255\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n    \n      4\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1960\n      1960-01-01\n      4.139938\n      4.139938\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n    \n  \n\n\n\n\n\n# we see the column associated with the values is called 'value'\n# the one associated with date is called `period`\ndisplay( df_inflation['value'].head() )\ndisplay( df_inflation['period'].head() )\n\n0     1.897315\n1     3.057669\n2    15.260526\n3     5.815255\n4     4.139938\nName: value, dtype: float64\n\n\n0   1956-01-01\n1   1957-01-01\n2   1958-01-01\n3   1959-01-01\n4   1960-01-01\nName: period, dtype: datetime64[ns]\n\n\n\nplt.plot(df_inflation['period'],df_inflation['value'])\n\n\n\n\nWe follow the same steps for unemployment and gdp. For the sake of simplicity, we choose annual frequency for all series. Not that the series on unemployment starts on only in 2004. That will be enough for the current purpose.\n\n# we proceed similarly for unemployment and gdp\ndf_gdp = dbnomics.fetch_series('OECD', 'MEI', 'FRA.NAEXCP01.STSA.A')\ndf_unemployment = dbnomics.fetch_series('OECD', 'CSPCUBE', 'UNEMPLRT_T1C.FRA')\n\n\n# let's look at what we have\nplt.figure(figsize=(10,5))\nplt.subplot(131)\nplt.plot(df_unemployment['period'], df_unemployment['value'])\nplt.title('unemployment')\nplt.subplot(132)\nplt.plot(df_gdp['period'], df_gdp['value'])\nplt.title('gdp')\nplt.subplot(133)\nplt.plot(df_inflation['period'], df_inflation['value'])\nplt.title(\"inflation\")\nplt.tight_layout()\n\n\n\n\n\n# before we proceed, let's create some new columns to avoid conflicts\ndf_inflation['inflation'] = df_inflation['value']\ndf_inflation.head()\n\n\n\n\n\n  \n    \n      \n      @frequency\n      provider_code\n      dataset_code\n      dataset_name\n      series_code\n      series_name\n      original_period\n      period\n      original_value\n      value\n      SUBJECT\n      LOCATION\n      MEASURE\n      FREQUENCY\n      Subject\n      Country\n      Measure\n      Frequency\n      inflation\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1956\n      1956-01-01\n      1.897315\n      1.897315\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      1.897315\n    \n    \n      1\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1957\n      1957-01-01\n      3.057669\n      3.057669\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      3.057669\n    \n    \n      2\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1958\n      1958-01-01\n      15.260526\n      15.260526\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      15.260526\n    \n    \n      3\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1959\n      1959-01-01\n      5.815255\n      5.815255\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      5.815255\n    \n    \n      4\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.FRA.GY.A\n      Consumer prices: all items – France – Growth o...\n      1960\n      1960-01-01\n      4.139938\n      4.139938\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      4.139938\n    \n  \n\n\n\n\n\ndf_gdp['gdp'] = df_gdp['value']\ndf_unemployment['unemployment'] = df_unemployment['value']\n\n\n# the following table contains both gdp and inflation\n# note that when there was any ambiguity_x suffixes were added to the gdp table, and _y suffixes added to inflation table\n# this is why we added another column with the good name.\n# as for the period column, since it had the same meaning for both tables, it is not renamed\nddf = df_gdp.merge(df_inflation, on='period')\nddf.head()\n\n\n\n\n\n  \n    \n      \n      @frequency_x\n      provider_code_x\n      dataset_code_x\n      dataset_name_x\n      series_code_x\n      series_name_x\n      original_period_x\n      period\n      original_value_x\n      value_x\n      ...\n      value_y\n      SUBJECT_y\n      LOCATION_y\n      MEASURE_y\n      FREQUENCY_y\n      Subject_y\n      Country_y\n      Measure_y\n      Frequency_y\n      inflation\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      1980\n      1980-01-01\n      451.772\n      451.772\n      ...\n      13.562578\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      13.562578\n    \n    \n      1\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      1981\n      1981-01-01\n      509.984\n      509.984\n      ...\n      13.314400\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      13.314400\n    \n    \n      2\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      1982\n      1982-01-01\n      585.990\n      585.990\n      ...\n      11.978476\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      11.978476\n    \n    \n      3\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      1983\n      1983-01-01\n      650.514\n      650.514\n      ...\n      9.459548\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      9.459548\n    \n    \n      4\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      1984\n      1984-01-01\n      707.030\n      707.030\n      ...\n      7.673803\n      CPALTT01\n      FRA\n      GY\n      A\n      Consumer prices: all items\n      France\n      Growth on the same period of the previous year\n      Annual\n      7.673803\n    \n  \n\n5 rows × 37 columns\n\n\n\n\nddf.columns\n\nIndex(['@frequency_x', 'provider_code_x', 'dataset_code_x', 'dataset_name_x',\n       'series_code_x', 'series_name_x', 'original_period_x', 'period',\n       'original_value_x', 'value_x', 'LOCATION_x', 'SUBJECT_x', 'MEASURE_x',\n       'FREQUENCY_x', 'Country_x', 'Subject_x', 'Measure_x', 'Frequency_x',\n       'gdp', '@frequency_y', 'provider_code_y', 'dataset_code_y',\n       'dataset_name_y', 'series_code_y', 'series_name_y', 'original_period_y',\n       'original_value_y', 'value_y', 'SUBJECT_y', 'LOCATION_y', 'MEASURE_y',\n       'FREQUENCY_y', 'Subject_y', 'Country_y', 'Measure_y', 'Frequency_y',\n       'inflation'],\n      dtype='object')\n\n\n\n# plot time series:\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(ddf['period'], ddf['gdp'])\nplt.title(\"gdp\")\nplt.subplot(122)\nplt.plot(ddf['period'], ddf['inflation'])\nplt.title('inflation')\nplt.tight_layout()\n\n\n\n\n\n# let's add unemployment too\nddf = ddf.merge(df_unemployment, on='period')\nddf.head()\n\n\n\n\n\n  \n    \n      \n      @frequency_x\n      provider_code_x\n      dataset_code_x\n      dataset_name_x\n      series_code_x\n      series_name_x\n      original_period_x\n      period\n      original_value_x\n      value_x\n      ...\n      series_code\n      series_name\n      original_period\n      original_value\n      value\n      SUB\n      LOCATION\n      Subject\n      Country\n      unemployment\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      2003\n      2003-01-01\n      1630.666\n      1630.666\n      ...\n      UNEMPLRT_T1C.FRA\n      Unemployment rates: total – France\n      2003\n      8.099563\n      8.099563\n      UNEMPLRT_T1C\n      FRA\n      Unemployment rates: total\n      France\n      8.099563\n    \n    \n      1\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      2004\n      2004-01-01\n      1704.017\n      1704.017\n      ...\n      UNEMPLRT_T1C.FRA\n      Unemployment rates: total – France\n      2004\n      8.468398\n      8.468398\n      UNEMPLRT_T1C\n      FRA\n      Unemployment rates: total\n      France\n      8.468398\n    \n    \n      2\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      2005\n      2005-01-01\n      1765.903\n      1765.903\n      ...\n      UNEMPLRT_T1C.FRA\n      Unemployment rates: total – France\n      2005\n      8.493855\n      8.493855\n      UNEMPLRT_T1C\n      FRA\n      Unemployment rates: total\n      France\n      8.493855\n    \n    \n      3\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      2006\n      2006-01-01\n      1848.150\n      1848.150\n      ...\n      UNEMPLRT_T1C.FRA\n      Unemployment rates: total – France\n      2006\n      8.449007\n      8.449007\n      UNEMPLRT_T1C\n      FRA\n      Unemployment rates: total\n      France\n      8.449007\n    \n    \n      4\n      annual\n      OECD\n      MEI\n      Main Economic Indicators Publication\n      FRA.NAEXCP01.STSA.A\n      France – National Accounts > GDP by Expenditur...\n      2007\n      2007-01-01\n      1941.361\n      1941.361\n      ...\n      UNEMPLRT_T1C.FRA\n      Unemployment rates: total – France\n      2007\n      7.658579\n      7.658579\n      UNEMPLRT_T1C\n      FRA\n      Unemployment rates: total\n      France\n      7.658579\n    \n  \n\n5 rows × 51 columns\n\n\n\n\n# let's keep only what we need\nddf = ddf[['period', 'inflation', 'gdp', 'unemployment']]\n\n\n# let the period be the index of the dataframe\nddf.index = ddf['period']\nddf.head()\n\n\n\n\n\n  \n    \n      \n      period\n      inflation\n      gdp\n      unemployment\n    \n    \n      period\n      \n      \n      \n      \n    \n  \n  \n    \n      2003-01-01\n      2003-01-01\n      2.098472\n      1630.666\n      8.099563\n    \n    \n      2004-01-01\n      2004-01-01\n      2.142090\n      1704.017\n      8.468398\n    \n    \n      2005-01-01\n      2005-01-01\n      1.745869\n      1765.903\n      8.493855\n    \n    \n      2006-01-01\n      2006-01-01\n      1.675124\n      1848.150\n      8.449007\n    \n    \n      2007-01-01\n      2007-01-01\n      1.487998\n      1941.361\n      7.658579\n    \n  \n\n\n\n\n\n# to keep things tidy, we can remove the period column\nddf = ddf.drop(columns=['period'])\nddf.head()\n\n\n\n\n\n  \n    \n      \n      inflation\n      gdp\n      unemployment\n    \n    \n      period\n      \n      \n      \n    \n  \n  \n    \n      2003-01-01\n      2.098472\n      1630.666\n      8.099563\n    \n    \n      2004-01-01\n      2.142090\n      1704.017\n      8.468398\n    \n    \n      2005-01-01\n      1.745869\n      1765.903\n      8.493855\n    \n    \n      2006-01-01\n      1.675124\n      1848.150\n      8.449007\n    \n    \n      2007-01-01\n      1.487998\n      1941.361\n      7.658579\n    \n  \n\n\n\n\nNow we’ve got a nice, easy to use, dataframe !\n\nCompute growth rate of gdp.\n\n\n#a new series with the observations from period before can be obtained using .shift()(\n# note the missing value for the initial date\nddf.shift(1).head()\n\n\n\n\n\n  \n    \n      \n      inflation\n      gdp\n      unemployment\n    \n    \n      period\n      \n      \n      \n    \n  \n  \n    \n      2003-01-01\n      NaN\n      NaN\n      NaN\n    \n    \n      2004-01-01\n      2.098472\n      1630.666\n      8.099563\n    \n    \n      2005-01-01\n      2.142090\n      1704.017\n      8.468398\n    \n    \n      2006-01-01\n      1.745869\n      1765.903\n      8.493855\n    \n    \n      2007-01-01\n      1.675124\n      1848.150\n      8.449007\n    \n  \n\n\n\n\n\n# now we can compute growth rates\nddf['gdp_growth'] = (ddf['gdp']-ddf['gdp'].shift(1))/(ddf['gdp'].shift(1))*100\n\n\nddf['gdp_growth'].head()\n\nperiod\n2003-01-01         NaN\n2004-01-01    4.498223\n2005-01-01    3.631771\n2006-01-01    4.657504\n2007-01-01    5.043476\nName: gdp_growth, dtype: float64\n\n\n\nPlot two graphs two verify graphically the Phillips curve (unemployment against inflation) and Okun’s law (unemployment against output).\n\n\nddf.columns\n\nIndex(['inflation', 'gdp', 'unemployment', 'gdp_growth'], dtype='object')\n\n\n\nplt.plot(ddf['unemployment'], ddf['inflation'], 'o')\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"Inflation (%)\")\nplt.title(\"Phillips curve (2004-2020)\")\n\nText(0.5, 1.0, 'Phillips curve (2004-2020)')\n\n\n\n\n\nWithout any econometric, work, it would seem that the Phillips relationship holds pretty well in France from 2004 to 2020.\n\nplt.plot(ddf['unemployment'], ddf['gdp_growth'], 'o')\nplt.xlabel(\"Unemployment (%)\")\nplt.ylabel(\"GDP growth (%)\")\nplt.title(\"Okun's law (France: 2004-2020)\")\n\nText(0.5, 1.0, \"Okun's law (France: 2004-2020)\")\n\n\n\n\n\nAs for Okun’s law, again, the negeative relationship between GDP growth and unemployment holds fairly well, save for one very abnormal point.\n\nBonus: alternative solution to import the data\n\nIt is possible to import all series at once, by supplying all identifiers to the ‘fetch_series’ method.\n\nfull_df = dbnomics.fetch_series(['OECD/KEI/CPALTT01.USA.GP.A', 'OECD/MEI/FRA.NAEXCP01.STSA.A', 'OECD/CSPCUBE/UNEMPLRT_T1C.FRA'])\nfull_df.head()\n\n\n\n\n\n  \n    \n      \n      @frequency\n      provider_code\n      dataset_code\n      dataset_name\n      series_code\n      series_name\n      original_period\n      period\n      original_value\n      value\n      ...\n      Subject\n      Country\n      Subject\n      Country\n      Measure\n      Frequency\n      Country\n      Subject\n      Measure\n      Frequency\n    \n  \n  \n    \n      0\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.USA.GP.A\n      Consumer prices: all items – United States – G...\n      1956\n      1956-01-01\n      1.525054\n      1.525054\n      ...\n      Consumer prices: all items\n      United States\n      Consumer prices: all items\n      United States\n      Growth previous period\n      Annual\n      United States\n      Consumer prices: all items\n      Growth previous period\n      Annual\n    \n    \n      1\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.USA.GP.A\n      Consumer prices: all items – United States – G...\n      1957\n      1957-01-01\n      3.341508\n      3.341508\n      ...\n      Consumer prices: all items\n      United States\n      Consumer prices: all items\n      United States\n      Growth previous period\n      Annual\n      United States\n      Consumer prices: all items\n      Growth previous period\n      Annual\n    \n    \n      2\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.USA.GP.A\n      Consumer prices: all items – United States – G...\n      1958\n      1958-01-01\n      2.729160\n      2.729160\n      ...\n      Consumer prices: all items\n      United States\n      Consumer prices: all items\n      United States\n      Growth previous period\n      Annual\n      United States\n      Consumer prices: all items\n      Growth previous period\n      Annual\n    \n    \n      3\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.USA.GP.A\n      Consumer prices: all items – United States – G...\n      1959\n      1959-01-01\n      1.010684\n      1.010684\n      ...\n      Consumer prices: all items\n      United States\n      Consumer prices: all items\n      United States\n      Growth previous period\n      Annual\n      United States\n      Consumer prices: all items\n      Growth previous period\n      Annual\n    \n    \n      4\n      annual\n      OECD\n      KEI\n      Key Short-Term Economic Indicators\n      CPALTT01.USA.GP.A\n      Consumer prices: all items – United States – G...\n      1960\n      1960-01-01\n      1.457976\n      1.457976\n      ...\n      Consumer prices: all items\n      United States\n      Consumer prices: all items\n      United States\n      Growth previous period\n      Annual\n      United States\n      Consumer prices: all items\n      Growth previous period\n      Annual\n    \n  \n\n5 rows × 30 columns\n\n\n\n\nfull_df['series_name'].unique()\n\narray(['Consumer prices: all items – United States – Growth previous period – Annual',\n       'France – National Accounts > GDP by Expenditure > Current Prices > Gross Domestic Product - Total – Level, rate or national currency, s.a. – Annual',\n       'Unemployment rates: total – France'], dtype=object)\n\n\nIn the result, each line corresponds to an observation. The column series_name contains the relevant observation. Let’s keep only the relevant column to get a clearer view.\n\ndf_long = full_df[['period', 'series_name','value']]\n\nThis is essentially the long format. We can use it as is, or convert to the wide format.\n\ndf_long.columns\n\nIndex(['period', 'series_name', 'value'], dtype='object')\n\n\n\ndf_long\n\n\n\n\n\n  \n    \n      \n      period\n      series_name\n      value\n    \n  \n  \n    \n      0\n      1956-01-01\n      Consumer prices: all items – United States – G...\n      1.525054\n    \n    \n      1\n      1957-01-01\n      Consumer prices: all items – United States – G...\n      3.341508\n    \n    \n      2\n      1958-01-01\n      Consumer prices: all items – United States – G...\n      2.729160\n    \n    \n      3\n      1959-01-01\n      Consumer prices: all items – United States – G...\n      1.010684\n    \n    \n      4\n      1960-01-01\n      Consumer prices: all items – United States – G...\n      1.457976\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      11\n      2014-01-01\n      Unemployment rates: total – France\n      10.291710\n    \n    \n      12\n      2015-01-01\n      Unemployment rates: total – France\n      10.359810\n    \n    \n      13\n      2016-01-01\n      Unemployment rates: total – France\n      10.056610\n    \n    \n      14\n      2017-01-01\n      Unemployment rates: total – France\n      9.398605\n    \n    \n      15\n      2018-01-01\n      Unemployment rates: total – France\n      9.059228\n    \n  \n\n120 rows × 3 columns\n\n\n\nTo convert it to the wide format, use the pivot function.\n\ndf_wide = df_long.pivot(index='period', columns=['series_name'])\n\n\ndf_wide\n\n\n\n\n\n  \n    \n      \n      value\n    \n    \n      series_name\n      Consumer prices: all items – United States – Growth previous period – Annual\n      France – National Accounts > GDP by Expenditure > Current Prices > Gross Domestic Product - Total – Level, rate or national currency, s.a. – Annual\n      Unemployment rates: total – France\n    \n    \n      period\n      \n      \n      \n    \n  \n  \n    \n      1956-01-01\n      1.525054\n      NaN\n      NaN\n    \n    \n      1957-01-01\n      3.341508\n      NaN\n      NaN\n    \n    \n      1958-01-01\n      2.729160\n      NaN\n      NaN\n    \n    \n      1959-01-01\n      1.010684\n      NaN\n      NaN\n    \n    \n      1960-01-01\n      1.457976\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      2015-01-01\n      0.118627\n      2198.432\n      10.359810\n    \n    \n      2016-01-01\n      1.261583\n      2234.129\n      10.056610\n    \n    \n      2017-01-01\n      2.130110\n      2297.244\n      9.398605\n    \n    \n      2018-01-01\n      2.442583\n      2360.686\n      9.059228\n    \n    \n      2019-01-01\n      1.812210\n      2425.710\n      NaN\n    \n  \n\n64 rows × 3 columns\n\n\n\n\n# rename columns\ndf_wide.columns = ['inflation','gdp', 'unemployment']\n\n\n# and here is our tidy dataframe !\ndf_wide\n\n\n\n\n\n  \n    \n      \n      inflation\n      gdp\n      unemployment\n    \n    \n      period\n      \n      \n      \n    \n  \n  \n    \n      1956-01-01\n      1.525054\n      NaN\n      NaN\n    \n    \n      1957-01-01\n      3.341508\n      NaN\n      NaN\n    \n    \n      1958-01-01\n      2.729160\n      NaN\n      NaN\n    \n    \n      1959-01-01\n      1.010684\n      NaN\n      NaN\n    \n    \n      1960-01-01\n      1.457976\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      2015-01-01\n      0.118627\n      2198.432\n      10.359810\n    \n    \n      2016-01-01\n      1.261583\n      2234.129\n      10.056610\n    \n    \n      2017-01-01\n      2.130110\n      2297.244\n      9.398605\n    \n    \n      2018-01-01\n      2.442583\n      2360.686\n      9.059228\n    \n    \n      2019-01-01\n      1.812210\n      2425.710\n      NaN\n    \n  \n\n64 rows × 3 columns"
  },
  {
    "objectID": "session_2/DataFrames.html",
    "href": "session_2/DataFrames.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "A DataFrame (aka a table) is a 2-D labeled data structure with columns of potentially different types.\n\ntypes: quantitative, qualitative (ordered, non-ordered, …)\n\nFirst column is special: the index\n\n\n\n\n\n\nfirst goal of an econometrician: constitute a good dataframe\n\n“cleaning the data”\n\nsometimes data comes from several linked dataframes\n\nrelational database\n\ndataframes / relational databases are so ubiquitous a language has been developed for them: SQL\n\n\n\n\n\n\n\nimport pandas as pd\n\n\n\n\npandas = panel + datas\ncreated by WesMcKinsey, very optimized\nmany options\nif in doubt: minimally sufficient pandas\n\nsmall subset of pandas to do everything\n\ntons of online tutorials ex: doc\n\n\n\n\n\n# from a dictionary\nd = {\n    \"country\": [\"USA\", \"UK\", \"France\"],\n    \"comics\": [13, 10, 12]   \n}\npd.DataFrame(d)\n\n\n\n\n\n  \n    \n      \n      country\n      comics\n    \n  \n  \n    \n      0\n      USA\n      13\n    \n    \n      1\n      UK\n      10\n    \n    \n      2\n      France\n      12\n    \n  \n\n\n\n\n\n\n\n\n# from a matrix\nimport numpy as np\nM = np.array([\n    [18, 150],\n    [21, 200],\n    [29, 1500]\n])\n    \ndf = pd.DataFrame( M, columns=[\"age\", \"travel\"] )\ndf\n\n\n\n\n\n  \n    \n      \n      age\n      travel\n    \n  \n  \n    \n      0\n      18\n      150\n    \n    \n      1\n      21\n      200\n    \n    \n      2\n      29\n      1500\n    \n  \n\n\n\n\n\n\n\n\n\n\n\ncomma separated files: csv file\n\noften distributed online\ncan be exported easily from Excel or LibreOffice\n\nstata files: use pd.read_dta()\nexcel files: use pd.read_excel() or xlsreader if unlucky\n\n\n\n\n\ntxt = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file.csv','w').write(txt) # we write it to a file\n\n136\n\n\n\ndf = pd.read_csv('dummy_file.csv') # what index should we use ?\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      country\n      measure\n    \n  \n  \n    \n      0\n      2018\n      france\n      950.0\n    \n    \n      1\n      2019\n      france\n      960.0\n    \n    \n      2\n      2020\n      france\n      1000.0\n    \n    \n      3\n      2018\n      usa\n      2500.0\n    \n    \n      4\n      2019\n      usa\n      2150.0\n    \n    \n      5\n      2020\n      usa\n      2300.0\n    \n  \n\n\n\n\n\n\n\n\nSometimes, comma-separated files, are not quite comma-separated…\n\ninspect the file with a text editor to see what it contains\nadd options to pd.read_csv\n\n\n\ntxt = \"\"\"year;country;measure\n2018;\"france\";950.0\n2019;\"france\";960.0\n2020;\"france\";1000.0\n2018;\"usa\";2500.0\n2019;\"usa\";2150.0\n2020;\"usa\";2300.0\n\"\"\"\nopen('annoying_dummy_file.csv','w').write(txt) # we write it to a file\n\n136\n\n\n\npd.read_csv(\"annoying_dummy_file.csv\", sep=\";\")\n\n\n\n\n\n  \n    \n      \n      year\n      country\n      measure\n    \n  \n  \n    \n      0\n      2018\n      france\n      950.0\n    \n    \n      1\n      2019\n      france\n      960.0\n    \n    \n      2\n      2020\n      france\n      1000.0\n    \n    \n      3\n      2018\n      usa\n      2500.0\n    \n    \n      4\n      2019\n      usa\n      2150.0\n    \n    \n      5\n      2020\n      usa\n      2300.0\n    \n  \n\n\n\n\n\n\n\n\npandas can export to many formats: df.to_...\n\n\nprint( df.to_csv() )\n\n,year,country,measure\n0,2018,france,950.0\n1,2019,france,960.0\n2,2020,france,1000.0\n3,2018,usa,2500.0\n4,2019,usa,2150.0\n5,2020,usa,2300.0\n\n\n\n\ndf.to_stata('dummy_example.dta')\n\n\n\n\n\n\n\n\nWhere can we get data from ?\nOfficial websites\n\noften in csv form\nunpractical applications\nsometimes unavoidable\nopen data trend: more unstructured data\n\nData providers\n\nsupply an API (i.e. easy to use function)\n\n\n\n\n\n\n\n\ncommercial ones:\n\nbloomberg, macrobond, factsets, quandl …\n\nfree ones:\n\ndbnomics: many official time-series\nqeds: databases used by quantecon\nvega-datasets: distributed with altair\ncovid*: lots of datasets…\n\nreminder: python packages, can be installed in the notebook with\n\n!pip install ...\n\n\n\n!pip install vega_datasets\n\nRequirement already satisfied: vega_datasets in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (0.9.0)\nRequirement already satisfied: pandas in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from vega_datasets) (1.2.1)\nRequirement already satisfied: python-dateutil>=2.7.3 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas->vega_datasets) (2.8.1)\nRequirement already satisfied: pytz>=2017.3 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas->vega_datasets) (2020.5)\nRequirement already satisfied: numpy>=1.16.5 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from pandas->vega_datasets) (1.19.5)\nRequirement already satisfied: six>=1.5 in /home/pablo/.local/opt/miniconda3/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas->vega_datasets) (1.15.0)\n\n\n\nimport vega_datasets\ndf = vega_datasets.data('iris')\ndf\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      6.7\n      3.0\n      5.2\n      2.3\n      virginica\n    \n    \n      146\n      6.3\n      2.5\n      5.0\n      1.9\n      virginica\n    \n    \n      147\n      6.5\n      3.0\n      5.2\n      2.0\n      virginica\n    \n    \n      148\n      6.2\n      3.4\n      5.4\n      2.3\n      virginica\n    \n    \n      149\n      5.9\n      3.0\n      5.1\n      1.8\n      virginica\n    \n  \n\n150 rows × 5 columns\n\n\n\n\n\n\nonce the data is loaded as df, we want to look at some basic properties:\n\ndf.head(5) # 5 first lines\ndf.tail(5) # 5 first lines\ndf.describe() # summary\ndf.mean() # averages\ndf.std() # standard deviations\n\n\n\ndf.head(2)\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n  \n  \n    \n      count\n      150.000000\n      150.000000\n      150.000000\n      150.000000\n    \n    \n      mean\n      5.843333\n      3.057333\n      3.758000\n      1.199333\n    \n    \n      std\n      0.828066\n      0.435866\n      1.765298\n      0.762238\n    \n    \n      min\n      4.300000\n      2.000000\n      1.000000\n      0.100000\n    \n    \n      25%\n      5.100000\n      2.800000\n      1.600000\n      0.300000\n    \n    \n      50%\n      5.800000\n      3.000000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.400000\n      3.300000\n      5.100000\n      1.800000\n    \n    \n      max\n      7.900000\n      4.400000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n  \n  \n    \n      count\n      150.000000\n      150.000000\n      150.000000\n      150.000000\n    \n    \n      mean\n      5.843333\n      3.057333\n      3.758000\n      1.199333\n    \n    \n      std\n      0.828066\n      0.435866\n      1.765298\n      0.762238\n    \n    \n      min\n      4.300000\n      2.000000\n      1.000000\n      0.100000\n    \n    \n      25%\n      5.100000\n      2.800000\n      1.600000\n      0.300000\n    \n    \n      50%\n      5.800000\n      3.000000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.400000\n      3.300000\n      5.100000\n      1.800000\n    \n    \n      max\n      7.900000\n      4.400000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      sepalLength\n      sepalWidth\n      petalLength\n      petalWidth\n    \n  \n  \n    \n      count\n      150.000000\n      150.000000\n      150.000000\n      150.000000\n    \n    \n      mean\n      5.843333\n      3.057333\n      3.758000\n      1.199333\n    \n    \n      std\n      0.828066\n      0.435866\n      1.765298\n      0.762238\n    \n    \n      min\n      4.300000\n      2.000000\n      1.000000\n      0.100000\n    \n    \n      25%\n      5.100000\n      2.800000\n      1.600000\n      0.300000\n    \n    \n      50%\n      5.800000\n      3.000000\n      4.350000\n      1.300000\n    \n    \n      75%\n      6.400000\n      3.300000\n      5.100000\n      1.800000\n    \n    \n      max\n      7.900000\n      4.400000\n      6.900000\n      2.500000\n    \n  \n\n\n\n\n\n\n\n\n\n\nColumns are defined by attribute df.columns\n\ndf.columns\n\nIndex(['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth', 'species'], dtype='object')\n\n\nThis attribute can be set\n\ndf.columns = ['sLength', 'sWidth', 'pLength', 'pWidth', 'species']\ndf.head(2)\n\n\n\n\n\n  \n    \n      \n      sLength\n      sWidth\n      pLength\n      pWidth\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\n\n\nA column can be extracted using its name as in a dictionary (like df['sLength'])\n\nseries = df['sWidth'] # note the resulting object: a series\nseries\n\n0      3.5\n1      3.0\n2      3.2\n3      3.1\n4      3.6\n      ... \n145    3.0\n146    2.5\n147    3.0\n148    3.4\n149    3.0\nName: sWidth, Length: 150, dtype: float64\n\n\n\nseries.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\n\n\n\ndf['totalLength'] = df['pLength'] + df['sLength']\ndf.head(2)\n\n\n\n\n\n  \n    \n      \n      sLength\n      sWidth\n      pLength\n      pWidth\n      species\n      totalLength\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n      6.5\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n      6.3\n    \n  \n\n\n\n\n\n\n\n\ndf['totalLength'] = df['pLength'] + df['sLength']*0.5\ndf.head(2)\n\n\n\n\n\n  \n    \n      \n      sLength\n      sWidth\n      pLength\n      pWidth\n      species\n      totalLength\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n      3.95\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n      3.85\n    \n  \n\n\n\n\n\n\n\n\nIndex with a list of column names\n\n\ne = df[ ['pLength', 'sLength'] ]\ne.head(3)\n\n\n\n\n\n  \n    \n      \n      pLength\n      sLength\n    \n  \n  \n    \n      0\n      1.4\n      5.1\n    \n    \n      1\n      1.4\n      4.9\n    \n    \n      2\n      1.3\n      4.7\n    \n  \n\n\n\n\n\n\n\n\nuse index range\n\n\ndf[2:4]\n\n\n\n\n\n  \n    \n      \n      sLength\n      sWidth\n      pLength\n      pWidth\n      species\n      totalLength\n    \n  \n  \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n      3.65\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n      3.80\n    \n  \n\n\n\n\n\n\n\n\nuse boolean\n\n\ndf['species'].unique()\n\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\n\n\nbool_ind = df['species'] == 'virginica' # this is a boolean serie\n\n\ne = df[ bool_ind ]\ne.head(4)\n\n\n\n\n\n  \n    \n      \n      sLength\n      sWidth\n      pLength\n      pWidth\n      species\n      totalLength\n    \n  \n  \n    \n      100\n      6.3\n      3.3\n      6.0\n      2.5\n      virginica\n      9.15\n    \n    \n      101\n      5.8\n      2.7\n      5.1\n      1.9\n      virginica\n      8.00\n    \n    \n      102\n      7.1\n      3.0\n      5.9\n      2.1\n      virginica\n      9.45\n    \n    \n      103\n      6.3\n      2.9\n      5.6\n      1.8\n      virginica\n      8.75\n    \n  \n\n\n\n\n\n\n\n\nsometimes, one wants finer control about which lines and columns to select:\n\nuse df.loc[...] which can be indexed as a matrix\n\n\n\ndf.loc[0:4, 'species']\n\n0    setosa\n1    setosa\n2    setosa\n3    setosa\n4    setosa\nName: species, dtype: object\n\n\n\n\n\n\n# Let's change the way totalLength is computed, only for 'virginica'\nindex = (df['species']=='virginica')\ndf.loc[index,'totalLength'] = df.loc[index,'sLength'] + 1.5*df[index]['pLength']\n\n\n\n\n\n\ntxt_wide = \"\"\"year,france,usa\n2018,950.0,2500.0\n2019,960.0,2150.0\n2020,1000.0,2300.0\n\"\"\"\nopen('dummy_file_wide.csv','w').write(txt_wide) # we write it to a file\n\n71\n\n\n\ntxt_long = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen('dummy_file_long.csv','w').write(txt_long) # we write it to a file\n\n136\n\n\n\ndf_long = pd.read_csv(\"dummy_file_long.csv\")\ndf_wide = pd.read_csv(\"dummy_file_wide.csv\")\n\n\n\n\ncompare the following tables\n\n\ndf_wide\n\n\n\n\n\n  \n    \n      \n      year\n      france\n      usa\n    \n  \n  \n    \n      0\n      2018\n      950.0\n      2500.0\n    \n    \n      1\n      2019\n      960.0\n      2150.0\n    \n    \n      2\n      2020\n      1000.0\n      2300.0\n    \n  \n\n\n\n\n\ndf_long\n\n\n\n\n\n  \n    \n      \n      year\n      country\n      measure\n    \n  \n  \n    \n      0\n      2018\n      france\n      950.0\n    \n    \n      1\n      2019\n      france\n      960.0\n    \n    \n      2\n      2020\n      france\n      1000.0\n    \n    \n      3\n      2018\n      usa\n      2500.0\n    \n    \n      4\n      2019\n      usa\n      2150.0\n    \n    \n      5\n      2020\n      usa\n      2300.0\n    \n  \n\n\n\n\n\n\n\n\nin long format: each line is an independent observation\n\ntwo lines mayb belong to the same category (year, or country)\n\nin wide format: some observations are grouped\n\nin the example it is grouped by year\n\nboth representations are useful\n\n\n\n\n\ndf_wide.melt(id_vars='year')\n\n\n\n\n\n  \n    \n      \n      year\n      variable\n      value\n    \n  \n  \n    \n      0\n      2018\n      france\n      950.0\n    \n    \n      1\n      2019\n      france\n      960.0\n    \n    \n      2\n      2020\n      france\n      1000.0\n    \n    \n      3\n      2018\n      usa\n      2500.0\n    \n    \n      4\n      2019\n      usa\n      2150.0\n    \n    \n      5\n      2020\n      usa\n      2300.0\n    \n  \n\n\n\n\n\n\n\n\ndf_ = df_long.pivot(index='year', columns='country')\ndf_\n\n\n\n\n\n  \n    \n      \n      measure\n    \n    \n      country\n      france\n      usa\n    \n    \n      year\n      \n      \n    \n  \n  \n    \n      2018\n      950.0\n      2500.0\n    \n    \n      2019\n      960.0\n      2150.0\n    \n    \n      2020\n      1000.0\n      2300.0\n    \n  \n\n\n\n\n\n# the result of pivot has a \"hierarchical index\"\n# let's change columns names\ndf_.columns = df_.columns.get_level_values(1)\ndf_\n\n\n\n\n\n  \n    \n      country\n      france\n      usa\n    \n    \n      year\n      \n      \n    \n  \n  \n    \n      2018\n      950.0\n      2500.0\n    \n    \n      2019\n      960.0\n      2150.0\n    \n    \n      2020\n      1000.0\n      2300.0\n    \n  \n\n\n\n\n\n\n\ngroupby is a very powerful function which can be used to work directly on data in the long format.\n\ndf_long.groupby(\"country\").agg('mean')\n\nNameError: name 'df_long' is not defined\n\n\n\n\n\n\n\n\n\nSuppose we have two dataframes, with related observations\nHow can we construct one single database with all informations?\nAnswer:\n\nconcatenate if long format\nmerge databases if wide format\n\nLots of subtleties when data gets complicated\n\nwe’ll see them in due time\n\n\n\ntxt_long_1 = \"\"\"year,country,measure\n2018,\"france\",950.0\n2019,\"france\",960.0\n2020,\"france\",1000.0\n2018,\"usa\",2500.0\n2019,\"usa\",2150.0\n2020,\"usa\",2300.0\n\"\"\"\nopen(\"dummy_long_1.csv\",'w').write(txt_long_1)\n\n136\n\n\n\ntxt_long_2 = \"\"\"year,country,recipient\n2018,\"france\",maxime\n2019,\"france\",mauricette\n2020,\"france\",mathilde\n2018,\"usa\",sherlock\n2019,\"usa\",watson\n2020,\"usa\",moriarty\n\"\"\"\nopen(\"dummy_long_2.csv\",'w').write(txt_long_2)\n\n150\n\n\n\ndf_long_1 = pd.read_csv('dummy_long_1.csv')\ndf_long_2 = pd.read_csv('dummy_long_2.csv')\n\n\n\n\n\ndf_long_1.merge(df_long_2)\n\nNameError: name 'df_long_1' is not defined"
  },
  {
    "objectID": "session_6/index.html#regressions",
    "href": "session_6/index.html#regressions",
    "title": "Introduction to Machine Learning",
    "section": "Regressions",
    "text": "Regressions"
  },
  {
    "objectID": "session_6/index.html#what-is-machine-learning-1",
    "href": "session_6/index.html#what-is-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "What is Machine learning?",
    "text": "What is Machine learning?\nDefinition Candidates:\nArthur Samuel: Field of study that gives computers the ability to learn without being explicitly programmed\nTom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P, improves with experience E."
  },
  {
    "objectID": "session_6/index.html#big-data",
    "href": "session_6/index.html#big-data",
    "title": "Introduction to Instrumental Variables",
    "section": "Big Data",
    "text": "Big Data"
  },
  {
    "objectID": "session_6/index.html#machine-learning-tasks",
    "href": "session_6/index.html#machine-learning-tasks",
    "title": "Introduction to Instrumental Variables",
    "section": "Machine Learning Tasks",
    "text": "Machine Learning Tasks"
  },
  {
    "objectID": "session_6/index.html#difference-with-traditional-regression",
    "href": "session_6/index.html#difference-with-traditional-regression",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{explained variable}} = a \\underbrace{x}_{\\text{explanatory variable}} + b\\]"
  },
  {
    "objectID": "session_6/index.html#difference-with-traditional-regression-1",
    "href": "session_6/index.html#difference-with-traditional-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\\[\\underbrace{y}_{\\text{labels}} = a \\underbrace{x}_{\\text{features}} + b\\]\n\n\n\n\n\n\n\n\nEconometrics\nMachine learning\n\n\n\n\nRegressand / independent variable / explanatory variable\nFeatures\n\n\nRegressor / dependent variable / explained variable\nLabels\n\n\nRegression\nModel Training"
  },
  {
    "objectID": "session_6/index.html#regression-with-long-data",
    "href": "session_6/index.html#regression-with-long-data",
    "title": "Introduction to Instrumental Variables",
    "section": "Regression with long data",
    "text": "Regression with long data"
  },
  {
    "objectID": "session_6/index.html#regression-with-wide-data",
    "href": "session_6/index.html#regression-with-wide-data",
    "title": "Introduction to Instrumental Variables",
    "section": "Regression with wide data",
    "text": "Regression with wide data"
  },
  {
    "objectID": "session_6/index.html#wide-data-ai-approach-to-machine-learning",
    "href": "session_6/index.html#wide-data-ai-approach-to-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Wide data AI approach to Machine Learning",
    "text": "Wide data AI approach to Machine Learning\n\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\nAI approach: minimize objective directly.\n\\(\\mu\\) is called a regularization term.\n\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "session_6/index.html#nonlinear-regression",
    "href": "session_6/index.html#nonlinear-regression",
    "title": "Introduction to Instrumental Variables",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression"
  },
  {
    "objectID": "session_6/index.html#model-validation",
    "href": "session_6/index.html#model-validation",
    "title": "Introduction to Instrumental Variables",
    "section": "Model validation",
    "text": "Model validation"
  },
  {
    "objectID": "session_6/index.html#how-to-evaluate-the-machine-learning",
    "href": "session_6/index.html#how-to-evaluate-the-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn machine learning we can’t perform statistical inference easily. How do we assess the validity of a model?\n\nBasic idea (independent of how complex the algorithm is)\n\nseparate data in\n\ntraining set (in-sample)\ntest set (out of sample)\n\ntrain using only the training set\nevaluate performance on the test set\n\nPerformance can be:\n\nfitness, number of classification errors (false positive, false negative)"
  },
  {
    "objectID": "session_6/index.html#how-to-judge-a-model-validity",
    "href": "session_6/index.html#how-to-judge-a-model-validity",
    "title": "Introduction to Machine Learning",
    "section": "How to judge a model validity?",
    "text": "How to judge a model validity?\n\nnot easy\nmodeling asumptions (specification):\n\nfunctional space -> fit, variance (econ: \\(R^2\\))\nstatistical modeling: data generating process -> bias (econ: stdev)\n\nThere is a very general tradeoff bias/variance\nMany ML methods allow to estimate bias (possibly via bootstrapping)"
  },
  {
    "objectID": "session_6/index.html#how-to-use-sklearn-for-regressions",
    "href": "session_6/index.html#how-to-use-sklearn-for-regressions",
    "title": "Introduction to Instrumental Variables",
    "section": "How to use sklearn for regressions",
    "text": "How to use sklearn for regressions"
  },
  {
    "objectID": "session_6/index.html#what-about-artificial-intelligence",
    "href": "session_6/index.html#what-about-artificial-intelligence",
    "title": "Introduction to Machine Learning",
    "section": "What about artificial intelligence ?",
    "text": "What about artificial intelligence ?\n\n\n\nAIs\n\nthink and learn\nmimmic human cognition"
  },
  {
    "objectID": "session_6/index.html#econometrics-vs-machine-learning",
    "href": "session_6/index.html#econometrics-vs-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Econometrics vs Machine Learning",
    "text": "Econometrics vs Machine Learning\n\nEconometrics is essentially a subfield of machine learning with a different jargon and a focus on:\n\nstudying properties and validity of results\n\ndata is scarce\ninference\n\nsingling out effects of specific explanatory variables\nestablishing causality\n\nMachine learning:\n\nstructure data\nmake predictions (interpolate data)"
  },
  {
    "objectID": "session_6/index.html#data-types",
    "href": "session_6/index.html#data-types",
    "title": "Introduction to Machine Learning",
    "section": "Data types",
    "text": "Data types\n\nstructured:\n\ntabular\n\nlong\nwide\n\n\nunstructured:\n\nfiles\nnetworks\ntext, mails\nimages, sound"
  },
  {
    "objectID": "session_6/index.html#tabular-data",
    "href": "session_6/index.html#tabular-data",
    "title": "Introduction to Machine Learning",
    "section": "Tabular Data",
    "text": "Tabular Data\n\ntabular data"
  },
  {
    "objectID": "session_6/index.html#networks",
    "href": "session_6/index.html#networks",
    "title": "Introduction to Machine Learning",
    "section": "Networks",
    "text": "Networks\n\nBanking networks\nProduction network"
  },
  {
    "objectID": "session_6/index.html#big-data-1",
    "href": "session_6/index.html#big-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Big Data",
    "text": "Big Data\n\nBig data:\n\nwide data (K>>N)\nlong data (N>>K)\nheterogenous, unstructured data\n\nMight not even fit in memory\n\nout of core computations\nlearn from a subset of the data"
  },
  {
    "objectID": "session_6/index.html#big-subfields-of-machine-learning",
    "href": "session_6/index.html#big-subfields-of-machine-learning",
    "title": "Introduction to Machine Learning",
    "section": "Big Subfields of Machine Learning",
    "text": "Big Subfields of Machine Learning\n\n\n\nTraditional classification\n\nsupervised (labelled data)\n\nregression: predict quantity\nclassification: predict index (categorical variable)\n\nunsupervised (no labels)\n\ndimension reduction\nclustering\n\nsemi-supervised / self-supervised\nreinforcement learning\n\nBazillions of different algorithms: https://scikit-learn.org/stable/user_guide.html\n\n\n\n\n\nregression:\n\nPredict: \\(y = f(x; \\theta)\\)\n\n\n\n\n\nsupervised: regression\n\n\n\n\n\n\nAge\n\n\nActivity\n\n\nSalary\n\n\n\n\n23\n\n\nExplorer\n\n\n1200\n\n\n\n\n40\n\n\nMortician\n\n\n2000\n\n\n\n\n45\n\n\nMortician\n\n\n2500\n\n\n\n\n33\n\n\nMovie Star\n\n\n3000\n\n\n\n\n35\n\n\nExplorer\n\n\n???\n\n\n\n\n\n\n\nsupervised: classification\n\nOutput is discrete\nRegular trick: \\(\\sigma(f(x; \\theta))\\) where \\(\\sigma(x)=\\frac{1}{1-e^{-x}}\\)\n\n\n\n\n\nclassification\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\n???\n\n\n\n\n\n\nunsupervised\n\norganize data without labels\n\ndimension reduction: describe data with less parameters\nclustering: sort data into “similar groups” (exemple)\n\n\n\n\n\n\nAge\n\n\nSalary\n\n\nActivity\n\n\n\n\n23\n\n\n1200\n\n\nExplorer\n\n\n\n\n40\n\n\n2000\n\n\nMortician\n\n\n\n\n45\n\n\n2500\n\n\nMortician\n\n\n\n\n33\n\n\n3000\n\n\nMovie Star\n\n\n\n\n35\n\n\n3000\n\n\nExplorer\n\n\n\n\n\n\nunsupervised: clustering\n\n\n\nkmeansclustering\n\n\n\n\nunsupervised: clustering\nWomen buying dresses during the year:"
  },
  {
    "objectID": "session_6/index.html#long-data",
    "href": "session_6/index.html#long-data",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\n\n\n\n\nLong data\n\n\nLong data is characterized by a high number of observations.\n\n\n\n\n\n\n\n\nModern society is gathering a lot of data.\n\nin doesn’t fit in the computer memory so we can’t run a basic regression\n\nIn some cases we would also like to update our model continuously:\n\nincremental regression\n\n\n\nWe need a way to fit a model on a subset of the data at a time."
  },
  {
    "objectID": "session_6/index.html#long-data-1",
    "href": "session_6/index.html#long-data-1",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(B\\) random observations, regress them to get new estimate \\(a\\), \\(b\\)\n\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "session_6/index.html#formalisation",
    "href": "session_6/index.html#formalisation",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation",
    "text": "Formalisation\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a\\_{\\sigma(i)}, b\\_{\\sigma(i)})\\_{i=[1,B]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(B\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "session_6/index.html#training-gradient-descent",
    "href": "session_6/index.html#training-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Training: Gradient Descent",
    "text": "Training: Gradient Descent\n\n\n\nHow do we minimize a function \\(f(a,b)\\)?\nGradient descent:\n\n\\(a_k, b_k\\) given\ncompute the gradient (slope) \\(\\nabla_{a,b} f = \\begin{bmatrix} \\frac{\\partial f}{\\partial a} \\\\\\\\ \\frac{\\partial f}{\\partial b}\\end{bmatrix}\\)\nfollow the steepest slope: (Newton Algorithm)\n\n\\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} - \\nabla_{a,b} f\\]\n\nbut not too fast: use learning rate \\(\\lambda\\): \\[ \\begin{bmatrix} a_{k+1} \\\\\\\\ b_{k+1} \\end{bmatrix} \\leftarrow  (1-\\lambda) \\begin{bmatrix} a_k \\\\\\\\ b_k \\end{bmatrix} + \\lambda (- \\nabla_{a,b} f )\\]"
  },
  {
    "objectID": "session_6/index.html#not-everything-goes-wrong-all-the-time",
    "href": "session_6/index.html#not-everything-goes-wrong-all-the-time",
    "title": "Introduction to Machine Learning",
    "section": "Not everything goes wrong all the time",
    "text": "Not everything goes wrong all the time\n \n\nIn practice, choosing the right learning rate \\(\\lambda\\) is crucial\n\\(\\lambda\\) is a metaparameter of the model training."
  },
  {
    "objectID": "session_6/index.html#stochastic-gradient-descent",
    "href": "session_6/index.html#stochastic-gradient-descent",
    "title": "Introduction to Machine Learning",
    "section": "Stochastic Gradient Descent",
    "text": "Stochastic Gradient Descent\n\nStochastic gradient descent\n\nAs long as the batch is taken randomly\nAs long as the learning rate is small enough\nOr the batch size big enough\nThe gradient is unbiased (i.e. \\(\\mathbb{E}\\left[ \\nabla \\xi(\\omega, \\theta) \\right] = \\nabla \\Xi(\\theta)\\))\n\nWe don’t need the whole dataset."
  },
  {
    "objectID": "session_6/index.html#training",
    "href": "session_6/index.html#training",
    "title": "Introduction to Machine Learning",
    "section": "Training",
    "text": "Training\nTo perform Lasso and ridge regression:\n\nAI approach:\n\nminimize objective \\(\\Xi(a,b)\\) directly.\napproach is known as (stochastic) Gradient Descent\n\nUse special algorithms"
  },
  {
    "objectID": "session_6/index.html#example-imf-challenge",
    "href": "session_6/index.html#example-imf-challenge",
    "title": "Introduction to Machine Learning",
    "section": "Example: IMF challenge",
    "text": "Example: IMF challenge\n\nAn internal IMF challenge to predict crises in countries\nLots of different approaches\nLots of data:\n\nwhich one is relevant\nmachine must select relevant informations\n\nExample: Lasso Regressions and Forecasting Models in Applied Stress Testing by Jorge A. Chan-Lau\n\nin a given developing country\ntries to predict probability of default in various sectors"
  },
  {
    "objectID": "session_6/index.html#nonlinear-regression-1",
    "href": "session_6/index.html#nonlinear-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Nonlinear Regression",
    "text": "Nonlinear Regression\n\nSo far, we have assumed,\n\n\\(y_i = a + b x_i\\)\n\\(y_i = a + b x_i + μ_1 (a^2 + b^2) + μ_2 (|a| + |b|)\\)\ndefined \\(\\Xi(a,b)\\) and tried to minimize it\n\nSame approach works for fully nonlinear models\n\n\\(y_i = a x_i + a^2 x_i^2 + c\\)\n\\(y_i = \\varphi(x; \\theta)\\) ()\n\nSpecial case: neural network:\n\nprimer tensor playground"
  },
  {
    "objectID": "session_6/index.html#how-to-choose-the-validation-set",
    "href": "session_6/index.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\n\nHoldout validation approach:\n\nkeeps x% of the data for the training, (100-x)% for the test\n\nHow to choose the sizes of the subsets?\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\n\n\n\nProblem:\n\nare we sure the validation size is correct? Are the results determined by an (un-) lucky draw?\na problem for smaller datasets"
  },
  {
    "objectID": "session_6/index.html#basic-sklearn-workflow",
    "href": "session_6/index.html#basic-sklearn-workflow",
    "title": "Introduction to Machine Learning",
    "section": "Basic sklearn workflow",
    "text": "Basic sklearn workflow\n\n\n\n\nWorkflow\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)"
  },
  {
    "objectID": "session_6/index.html#how-to-implement-k-fold-validation-with-sklearn",
    "href": "session_6/index.html#how-to-implement-k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "How to implement \\(k\\)-fold validation with sklearn",
    "text": "How to implement \\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "session_6/index.html#section",
    "href": "session_6/index.html#section",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest\nThe test set reveals that orange model is overfitting."
  },
  {
    "objectID": "session_6/index.html#wait",
    "href": "session_6/index.html#wait",
    "title": "Introduction to Machine Learning",
    "section": "Wait",
    "text": "Wait\n\nAnother library to do regression ?\nstatsmodels:\n\nexplanatory analysis\nstatistical tests\nformula interface for many estimation algorithms\n\nstateless approach (model.fit() returns another object)\n\n\nlinearmodels\n\nextends statsmodels (very similar interface)\n\n(panel models, IV, systems…)\n\n\nsklearn:\n\nprediction\nfaster for big datasets\ncommon interface for several machine learning tasks\n\nstateful approach (model is modified by .fit operation)\n\ndefacto standard for machine learning"
  },
  {
    "objectID": "session_6/index.html#difference-with-traditional-regression-2",
    "href": "session_6/index.html#difference-with-traditional-regression-2",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "session_6/index.html#difference-with-traditional-regression-3",
    "href": "session_6/index.html#difference-with-traditional-regression-3",
    "title": "Introduction to Machine Learning",
    "section": "Difference with traditional regression",
    "text": "Difference with traditional regression\n\nBig data requires other means to process the data:\n\ndata is long: so many observations \\(x\\) doesn’t fit in the memory\n\nneed to use incremental training method to use only a subsample at a time\n\ndata is wide: so many features, the model is crudely overspecified\n\nneed to build dimension reduction into the objective\n\ndata is nonlinear:\n\nuse nonlinear model (and nonlinear training)\n\ndata is not a simple vector…\n\nsame as nonlinear"
  },
  {
    "objectID": "session_6/index.html#long-data-2",
    "href": "session_6/index.html#long-data-2",
    "title": "Introduction to Machine Learning",
    "section": "Long data",
    "text": "Long data\n\n\n\nTraditional regression:\n\nfull sample \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nOLS: \\(\\min_{a,b} \\sum_{i=1}^N (a x_i + b - y_i)^2\\)\nclosed-form solution: \\(a = X^{\\prime}X Y\\) and \\(b= ...\\)\nhard to compute if \\(X\\) is very big\n\n\n\n\n\nIncremental learning:\n\ngiven initial \\(a_n\\), \\(b_n\\)\npick \\(N\\) random observations (the batch)\n\nregress them to get new estimate \\(a\\), \\(b\\)\nthis minimizes the square of errors\n\nupdate with learning rate \\(\\beta\\):\n\n\\(a_{n+1} \\leftarrow a_n (1-\\beta_n) + \\beta_n a\\)\n\\(b_{n+1} \\leftarrow b_n (1-\\beta_n) + \\beta_n b\\)\n\nprocess is not biased (that is \\(a\\) converges to the true value) as long as one decreases \\(\\beta\\) sufficiently fast over time (ex: \\(\\beta_n=\\frac{1}{n}\\))"
  },
  {
    "objectID": "session_6/index.html#formalisation-a-typical-machine-learning-task",
    "href": "session_6/index.html#formalisation-a-typical-machine-learning-task",
    "title": "Introduction to Machine Learning",
    "section": "Formalisation: a typical machine learning task",
    "text": "Formalisation: a typical machine learning task\n\nvector of unknowns: \\(\\theta=(a,b)\\)\ndataset \\(X,Y=(x_i,y_i)_{i=1:N}\\)\nfor a random draw \\(\\omega = (a_{\\sigma(i)}, b_{\\sigma(i)})_{i=[1,N]} \\subset (X,Y)\\)\n\n\\(\\omega\\) is just a random batch of size \\(N\\)\n\ndefine the empirical risk (or empirical cost) \\[\\xi(\\theta, \\omega) = \\sum_{(x,y) \\in \\omega} (y - (a x + b))^2\\]\nwe want to minimize theoretical risk: \\[\\Xi(\\theta) = \\mathbb{E} \\left[ \\xi(\\theta, \\omega)\\right]\\]"
  },
  {
    "objectID": "session_6/index.html#wide-data",
    "href": "session_6/index.html#wide-data",
    "title": "Introduction to Machine Learning",
    "section": "Wide data",
    "text": "Wide data\n\n\n\n\n\n\nBlock\n\n\nWide Data is characterized by a high number of features compared to the number of observations.\n\n\n\n\nProblem: - with many independent variables \\(x_1, ... x_K\\), \\(K>>N\\) and one dependent variable \\(y\\) the regression \\[y = a_1 x_1 + a_2 x_2 + \\cdots + a_N x_N + b\\] is grossly overidentified."
  },
  {
    "objectID": "session_6/index.html#wide-data-regression",
    "href": "session_6/index.html#wide-data-regression",
    "title": "Introduction to Machine Learning",
    "section": "Wide data regression",
    "text": "Wide data regression\n\nMain Idea: penalize non-zero coefficients to encourage scarcity\n\nRidge: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N ( \\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|^2\\]\n\nshrinks parameters towards zero\nclosed form\n\nLasso: \\[\\Xi(a,b) = \\min_{a,b} \\sum_{i=1}^N (\\sum_j a_j x_j + b - y_i)^2 + \\mu \\sum_i |a_i|\\]\n\neliminates zero coefficients\n\nElastic: Ridge + Lasso\n\nRemarks:\n\n\\(\\mu\\) is called a regularization term.\nit is a hyperparameter\n\\(\\mu \\uparrow\\), bias increases, variance decreases"
  },
  {
    "objectID": "session_6/index.html#section-1",
    "href": "session_6/index.html#section-1",
    "title": "Introduction to Machine Learning",
    "section": "",
    "text": "Traintest"
  },
  {
    "objectID": "session_6/index.html#how-to-evaluate-the-machine-learning-1",
    "href": "session_6/index.html#how-to-evaluate-the-machine-learning-1",
    "title": "Introduction to Machine Learning",
    "section": "how to evaluate the machine learning",
    "text": "how to evaluate the machine learning\nIn case the training method depends itself on many parameters (the hyperparameters) we make three samples instead:\n\ntraining set (in-sample)\nvalidation set (to update hyperparameters)\ntest set (out of sample)\n\nGolden Rule: the test set should not be used to estimate the model, and should not affect the choice any training parameter (hyperparameter)."
  },
  {
    "objectID": "session_6/index.html#k-fold-validation",
    "href": "session_6/index.html#k-fold-validation",
    "title": "Introduction to Machine Learning",
    "section": "k-fold validation",
    "text": "k-fold validation\n\n\nA solution that is more robust to the choice of the : \\(k\\)-fold validation\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should\naverage them"
  },
  {
    "objectID": "session_6/index.html#how-to-choose-the-validation-set-1",
    "href": "session_6/index.html#how-to-choose-the-validation-set-1",
    "title": "Introduction to Machine Learning",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\nA more robust solution: \\(k\\)-fold validation\n\n\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\nthey should be similar (compute standard deviation)\n\naverage them"
  },
  {
    "objectID": "session_6/index.html#in-practice",
    "href": "session_6/index.html#in-practice",
    "title": "Introduction to Machine Learning",
    "section": "In practice",
    "text": "In practice\n\n\nBasic sklearn workflow:\n\n\nimport data\n\nfeatures: a matrix X (2d numpy array)\nlabels: a vector y (1d numpy array)\n\nsplit the data, between training and test datasets\n\nsplit needs to be random to avoid any bias\n\nnormalize the data\n\nmost ML algorithm are sensitive to scale\n\ncreate a model (independent from data)\ntrain the model on training dataset\nevaluate accuracy on test dataset (here \\(R^2\\))\nuse the model to make predictions\n\n\nThe workflow is always the same, no matter what the model is\n\ntry sklearn.linear_model.Lasso instead of LinearRegression\n\n\nfrom sklearn.datasets import load_diabetes\ndataset = load_diabetes()\nX = dataset['data']\ny = dataset['target']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict(X_new)"
  },
  {
    "objectID": "session_6/index.html#k-fold-validation-with-sklearn",
    "href": "session_6/index.html#k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "\\(k\\)-fold validation with sklearn",
    "text": "\\(k\\)-fold validation with sklearn\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "session_7/index.html#validation",
    "href": "session_7/index.html#validation",
    "title": "Introduction to Machine Learning (2)",
    "section": "Validation",
    "text": "Validation"
  },
  {
    "objectID": "session_never/Panel_data.html",
    "href": "session_never/Panel_data.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Our goal here, is to redo some of the analysis from:\nF. Vella and M. Verbeek (1998), “Whose Wages Do Unions Raise? A Dynamic Model of Unionism and Wage Rate Determination for Young Men,” Journal of Applied Econometrics 13, 163-183.\nImport the dataset wage_panel from linearmodels.datasets. Describe it and make sure it is in a format suitable for panel data analysis. Show graphically the decrease in unionization over the period.\n\nfrom linearmodels.datasets import wage_panel\n\n\ndf = wage_panel.load()\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      nr\n      year\n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n  \n  \n    \n      0\n      13\n      1980\n      0\n      1\n      0\n      2672\n      0\n      14\n      0\n      1.197540\n      1\n      9\n    \n    \n      1\n      13\n      1981\n      0\n      2\n      0\n      2320\n      0\n      14\n      1\n      1.853060\n      4\n      9\n    \n    \n      2\n      13\n      1982\n      0\n      3\n      0\n      2940\n      0\n      14\n      0\n      1.344462\n      9\n      9\n    \n    \n      3\n      13\n      1983\n      0\n      4\n      0\n      2960\n      0\n      14\n      0\n      1.433213\n      16\n      9\n    \n    \n      4\n      13\n      1984\n      0\n      5\n      0\n      3071\n      0\n      14\n      0\n      1.568125\n      25\n      5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4355\n      12548\n      1983\n      0\n      8\n      0\n      2080\n      1\n      9\n      0\n      1.591879\n      64\n      5\n    \n    \n      4356\n      12548\n      1984\n      0\n      9\n      0\n      2080\n      1\n      9\n      1\n      1.212543\n      81\n      5\n    \n    \n      4357\n      12548\n      1985\n      0\n      10\n      0\n      2080\n      1\n      9\n      0\n      1.765962\n      100\n      5\n    \n    \n      4358\n      12548\n      1986\n      0\n      11\n      0\n      2080\n      1\n      9\n      1\n      1.745894\n      121\n      5\n    \n    \n      4359\n      12548\n      1987\n      0\n      12\n      0\n      3380\n      1\n      9\n      1\n      1.466543\n      144\n      5\n    \n  \n\n4360 rows × 12 columns\n\n\n\nColumn nr corresponds to the individual number. Column year corresponds to observation date. We need two set these two columns as a hierarchical index (so that first index corresponds to nr and the second one corresponds to year)\n\ndf.set_index([\"nr\", \"year\"], inplace=True)\ndf\n\n\n\n\n\n  \n    \n      \n      \n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n    \n      nr\n      year\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      13\n      1980\n      0\n      1\n      0\n      2672\n      0\n      14\n      0\n      1.197540\n      1\n      9\n    \n    \n      1981\n      0\n      2\n      0\n      2320\n      0\n      14\n      1\n      1.853060\n      4\n      9\n    \n    \n      1982\n      0\n      3\n      0\n      2940\n      0\n      14\n      0\n      1.344462\n      9\n      9\n    \n    \n      1983\n      0\n      4\n      0\n      2960\n      0\n      14\n      0\n      1.433213\n      16\n      9\n    \n    \n      1984\n      0\n      5\n      0\n      3071\n      0\n      14\n      0\n      1.568125\n      25\n      5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      12548\n      1983\n      0\n      8\n      0\n      2080\n      1\n      9\n      0\n      1.591879\n      64\n      5\n    \n    \n      1984\n      0\n      9\n      0\n      2080\n      1\n      9\n      1\n      1.212543\n      81\n      5\n    \n    \n      1985\n      0\n      10\n      0\n      2080\n      1\n      9\n      0\n      1.765962\n      100\n      5\n    \n    \n      1986\n      0\n      11\n      0\n      2080\n      1\n      9\n      1\n      1.745894\n      121\n      5\n    \n    \n      1987\n      0\n      12\n      0\n      3380\n      1\n      9\n      1\n      1.466543\n      144\n      5\n    \n  \n\n4360 rows × 10 columns\n\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      black\n      exper\n      hisp\n      hours\n      married\n      educ\n      union\n      lwage\n      expersq\n      occupation\n    \n  \n  \n    \n      count\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n      4360.000000\n    \n    \n      mean\n      0.115596\n      6.514679\n      0.155963\n      2191.257339\n      0.438991\n      11.766972\n      0.244037\n      1.649147\n      50.424771\n      4.988532\n    \n    \n      std\n      0.319777\n      2.825873\n      0.362862\n      566.352301\n      0.496321\n      1.746181\n      0.429564\n      0.532609\n      40.781991\n      2.319978\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      120.000000\n      0.000000\n      3.000000\n      0.000000\n      -3.579079\n      0.000000\n      1.000000\n    \n    \n      25%\n      0.000000\n      4.000000\n      0.000000\n      2040.000000\n      0.000000\n      11.000000\n      0.000000\n      1.350717\n      16.000000\n      4.000000\n    \n    \n      50%\n      0.000000\n      6.000000\n      0.000000\n      2080.000000\n      0.000000\n      12.000000\n      0.000000\n      1.671143\n      36.000000\n      5.000000\n    \n    \n      75%\n      0.000000\n      9.000000\n      0.000000\n      2414.250000\n      1.000000\n      12.000000\n      0.000000\n      1.991086\n      81.000000\n      6.000000\n    \n    \n      max\n      1.000000\n      18.000000\n      1.000000\n      4992.000000\n      1.000000\n      16.000000\n      1.000000\n      4.051860\n      324.000000\n      9.000000\n    \n  \n\n\n\n\n\n# groupby syntax is very convenient here\ndf.groupby(\"year\")['union'].sum() # number of unionized employees\n\nyear\n1980    137\n1981    136\n1982    140\n1983    134\n1984    137\n1985    122\n1986    115\n1987    143\nName: union, dtype: int64\n\n\n\nN = df.groupby(\"year\")['union'].count()\n\n\nunion_rate =  df.groupby(\"year\")['union'].sum() / N\nunion_rate\n\nyear\n1980    0.251376\n1981    0.249541\n1982    0.256881\n1983    0.245872\n1984    0.251376\n1985    0.223853\n1986    0.211009\n1987    0.262385\nName: union, dtype: float64\n\n\nLet’s plot decline over time of unionization rate\n\nfrom matplotlib import pyplot as plt\nplt.plot(union_rate.index, union_rate)\n\n\n\n\nOur goal is to estimate the wage premium (if any) associated to belonging to a union.\nWe first consider a model \\(y_{i,t} = \\alpha + X_{i,t} \\beta + \\epsilon_{i,t}\\) where \\(y_{i,t}\\) is the wage and \\(X_{i,t}\\) contains a vector of regressors which can explain it.\nEstimate this model using OLS. What is the effect of union. What is the problem of this regression? Should we use individual or time fixed effects?\n\nimport linearmodels\n\n\nfrom linearmodels import PanelOLS\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation\",\n    data=df\n)\nmod.fit()\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.9250  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   0.9592  \n\n\n  No. Observations:       4360         R-squared (Within):    0.1763  \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   0.9250  \n\n\n  Time:                 11:45:22       Log-likelihood         -2938.0 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           5960.1  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(9,4351)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  5960.1  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(9,4351)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n              Parameter Std. Err. T-stat  P-value  Lower CI   Upper CI \n\n\n  black        -0.1195   0.0234   -5.1075 0.0000    -0.1653    -0.0736 \n\n\n  hisp         0.0483    0.0204   2.3700  0.0178    0.0083     0.0882  \n\n\n  exper        0.1097    0.0097   11.305  0.0000    0.0906     0.1287  \n\n\n  hours      -5.894e-05 1.28e-05  -4.6029 0.0000  -8.404e-05 -3.384e-05\n\n\n  married      0.1066    0.0156   6.8501  0.0000    0.0761     0.1371  \n\n\n  educ         0.1093    0.0028   38.939  0.0000    0.1038     0.1149  \n\n\n  union        0.2017    0.0172   11.714  0.0000    0.1680     0.2355  \n\n\n  expersq      -0.0038   0.0007   -5.4359 0.0000    -0.0051    -0.0024 \n\n\n  occupation   -0.0253   0.0029   -8.5924 0.0000    -0.0311    -0.0196 \n\nid: 0x7f6b2d76f040\n\n\nThe regression is significant: R2 is significantly different from zero (p-value< 1e-5). All coefficients are significant at the 5% level, including the coefficient in front of lwage (log of wages).\nAccording to this coefficient, belonging to a union in a given year, includes salary by 20% approximately. (log(1+0.2)~18%)\nFormulate a model with individual fixed effect. Run a panel regression. Comment the results.\nIn this regression, non-observed heterogeneity between individuals, might explain difference in wage levels, and lead to systematic biases in the estimated coefficient. To control for it, we can add individual fixed effects.\n\nfrom linearmodels import PanelOLS\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation + EntityEffects\",\n    data=df)\nprint(mod.fit())\n\nAbsorbingEffectError: \nThe model cannot be estimated. The included effects have fully absorbed\none or more of the variables. This occurs when one or more of the dependent\nvariable is perfectly explained using the effects included in the model.\n\nThe following variables or variable combinations have been fully absorbed\nor have become perfectly collinear after effects are removed:\n\n          black\n          hisp\n          married, educ\n\nSet drop_absorbed=True to automatically drop absorbed variables.\n\n\nWe observe that the fixed effects are “absorbing” some indicator variables (black, hisp, married, educ). For conistency, we have to remove them from the regression.\n\nmod = PanelOLS.from_formula(\"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation + EntityEffects\", data=df, drop_absorbed=True)\n\n\nmod.fit()\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/linearmodels/panel/model.py:1743: AbsorbingEffectWarning: \nVariables have been fully absorbed and have removed from the regression:\n\nblack, hisp, educ\n\n  warnings.warn(\n\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.2005  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   0.3244  \n\n\n  No. Observations:       4360         R-squared (Within):    0.2005  \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   0.3190  \n\n\n  Time:                 11:52:33       Log-likelihood         -1271.2 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           159.19  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(6,3809)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  159.19  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(6,3809)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n             Parameter Std. Err. T-stat  P-value Lower CI Upper CI\n\n\n  exper       0.1349    0.0086   15.710  0.0000   0.1181   0.1518 \n\n\n  hours       -0.0001  1.342e-05 -10.273 0.0000   -0.0002  -0.0001\n\n\n  married     0.0457    0.0181   2.5276  0.0115   0.0102   0.0811 \n\n\n  union       0.0786    0.0191   4.1134  0.0000   0.0411   0.1160 \n\n\n  expersq     -0.0052   0.0006   -8.5424 0.0000   -0.0064  -0.0040\n\n\n  occupation  -0.0080   0.0035   -2.2798 0.0227   -0.0149  -0.0011\n\nF-test for Poolability: 9.1024P-value: 0.0000Distribution: F(544,3809)Included effects: Entityid: 0x7f6b29688c70\n\n\nWe observe that the variables in this regression have a worse predictive power than the former one. This is not a surprise: we have replaced many observed characteristics by fixed effect that are fitted to every single individual. For predictions there is no way to guess the fixed effect, which is why the R2 is low. Note that the effect of belonging to a union, is reduced by half (8% increase in salary explained by unionization), which points to an important effect of unobserved heterogeneity.\nFormulate a model with individual and time fixed effect. Run a panel regression. Comment the results.\nIn the same spirit, the time trend, is not accounted for in the regression, which might explain some of the results. Let’s add time fixed effects.\n\nmod = PanelOLS.from_formula(\n    \"lwage ~ black + hisp + exper + hours + married + educ + union + expersq + occupation \\\n    + EntityEffects + TimeEffects\", data=df, drop_absorbed=True)\n\n\nmod.fit()\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/linearmodels/panel/model.py:1743: AbsorbingEffectWarning: \nVariables have been fully absorbed and have removed from the regression:\n\nblack, hisp, exper, educ\n\n  warnings.warn(\n\n\n\n\nPanelOLS Estimation Summary\n\n  Dep. Variable:          lwage        R-squared:             0.0487  \n\n\n  Estimator:            PanelOLS       R-squared (Between):   -0.8389 \n\n\n  No. Observations:       4360         R-squared (Within):    -0.6698 \n\n\n  Date:             Tue, Mar 15 2022   R-squared (Overall):   -0.8315 \n\n\n  Time:                 11:55:45       Log-likelihood         -1263.6 \n\n\n  Cov. Estimator:      Unadjusted                                     \n\n\n                                       F-statistic:           38.919  \n\n\n  Entities:                545         P-value                0.0000  \n\n\n  Avg Obs:               8.0000        Distribution:         F(5,3803)\n\n\n  Min Obs:               8.0000                                       \n\n\n  Max Obs:               8.0000        F-statistic (robust):  38.919  \n\n\n                                       P-value                0.0000  \n\n\n  Time periods:             8          Distribution:         F(5,3803)\n\n\n  Avg Obs:               545.00                                       \n\n\n  Min Obs:               545.00                                       \n\n\n  Max Obs:               545.00                                       \n\n\n                                                                      \n\n\n\nParameter Estimates\n\n             Parameter Std. Err. T-stat  P-value Lower CI Upper CI\n\n\n  hours       -0.0001  1.342e-05 -10.351 0.0000   -0.0002  -0.0001\n\n\n  married     0.0470    0.0181   2.6047  0.0092   0.0116   0.0825 \n\n\n  union       0.0762    0.0191   3.9822  0.0001   0.0387   0.1136 \n\n\n  expersq     -0.0061   0.0007   -8.7238 0.0000   -0.0075  -0.0048\n\n\n  occupation  -0.0078   0.0035   -2.2274 0.0260   -0.0147  -0.0009\n\nF-test for Poolability: 9.4090P-value: 0.0000Distribution: F(551,3803)Included effects: Entity, Timeid: 0x7f6b29619790\n\n\nHere the addition of time fixed effects, reduces the explanatory power a bit further, but does not change much the estimate for the effect of unionization (still around 8%)."
  },
  {
    "objectID": "session_never/index.html",
    "href": "session_never/index.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Until now, we have been rather loose about where the data comes from:\nTrying to explain \\(N\\) observations: \\(y_n = a + b x_n, n\\in [1,N]\\)\nAll these lonely observations, where do they all come from?\n\n\n\nIndividuals: cross section\n\n\n\nDates: time-series\n\n\n\n\n\n\n\n\n\nvery simple study: structural break\n\ndoes regression on \\([T_1, \\overline{T}]\\) yield (significantly) different results on \\([\\overline{T}, T_2]\\)\n\ngoing further: time series analysis\n\ndata is typically autocorrelated\nexample (AR1) \\(x_t = a + b x_{t-1} + \\epsilon_t\\)\n\n\n\n\n\n\n\n\n\n\n\nRepeated cross sectional studies\nIndex individual by \\(i\\in [1,J]\\) and time by \\(t\\in[1,T]\\) [graph repeated cross-sectional]\nwe can study evolution of the regression over time \\[\\text{date 1}: y_{i,1} = a_1 + b_1 x_{1,1}\\] … \\[\\text{date t}: y_{i,t} = a_i + b_i x_{i,1}\\] … \\[\\text{date T}: y_{i,T} = a_T + b_T x_{i,T}\\]\n\\(y_{i,t}\\) and \\(y_{i,t+1}\\) are unrelated\nOne big regression: pooled regression.\n\n\n\n\nEven better: longitudinal data\n\n[graph longitudinal data]\n\nThe same individuals are followed over time.\nWe can study the evolution of individuals while taking into account their heterogeneity\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\nBalanced: all individuals in the sample are followed from 1 to T\nUnbalanced: some indivuduals start later, stop earlier\n\n\n\n\n\n\nCrude solutions:\n\ntruncate the dates between \\([T_1, T_2]\\) so that dataset is balanced\neliminate individuals who are not present in the full sample\n\n\nNot very good:\n\ncan limit a lot the size of the sample\ncan induce a “selection bias”\n\n\nReal gurus know how to deal with missing values\n\nmany algorithms can be adapted\n\n\n\n\n\n\n\n\n\nwe tend to prefer here the long format (w.r.t id and date)\nthere can be many columns though (for each variable)\n\n\n\n\n\n\nmicro-panel: \\(T<<N\\)\n\nPanel Study of Income Dynamics (PSID): 5000 consumers since 1967 (US)\n\nreinterview same individuals from year to year\nbut some go in/out of the panel\n\nSurvey of Consumer and Finance (SCF)\n…\n\nmacro-panel: \\(T\\approx N\\)\n\nWIIW: 23 countries since the 60s (central, east and southern Europe)\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nSuppose we want to explain the growth rate of several countries\n\nLet’s do a big regression (pooled regression) \\[y_{i,t} = a + b x_{i,t}\\] (pooled regression)\n\nWhat was missing?\n\nThere must be some effects, not captured by the regression, specific to each individual\n-> Unobserved heterogeneity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncapture idiosyncratic variability by adding an individual specific constant \\[ y_{i,t} = a + a_i +  b x_{i,t} + \\epsilon_{i,t}\\] \\(a_i\\) is called a fixed effect\n\nWe assume some structure on the data to discipline the regression.\n\nHow can we estimate the model? i.e. find plausible values for \\(a\\), \\(a_i\\), \\(b\\), \\(\\sigma(\\epsilon)\\), etc.\n\nWe focus on OLS estimator: \\[\\min_{a,a_i, b} \\sum_{i,t} ( y_{i,t} - \\underbrace{a + a_i +  b x_{i,t}}\\_{\\text{predicted value}} )^2\\]\n\n\n\n\n\n\n\n\nFixed effect regression: \\[ y_{i,t} = a + a_i +  b x_{i,t} + \\epsilon_{i,t}\\] is equivalent to \\[ y_{i,t} = a.1 + a_1 d\\_{i=1} + \\cdots + a_I d_{i=I} +  b x_{i,t} + \\epsilon_{i,t}\\] where \\(d\\) is a dummy variable such that \\(d_{i=j} = \\begin{cases}1, & \\text{if}\\ i=j \\\\\\\\ 0, & \\text{otherwise}\\end{cases}\\)\nMinor problem: \\(1, d_{i=1}, ... d_{i=I}\\) are not independent: \\(\\sum_{j=1}^I \\delta_{i=j}=1\\)\n\nSolution: ignore one of them, exactly like the dummies for categorical variables\n\nNow the regression can be estimated with OLS…\n\n\n\n\n\n\n… Now the regression can be estimated with OLS (or other)\n\nnaive approach fails for big panels (lots of dummy regressors makes \\(X^{\\prime}X\\) hard to invert)\nsmart approach decomposes computation in several steps\n\n“between” and “within” estimator (for advanced panel course)\n\nsoftware does it for us…\n\nLike always, we get estimates and significance numbers / confidence intervals\n\n\n\n\n\n\nSometimes, we know the whole dataset is affected by common time-varying shocks\n\nassume there isn’t a variable we can use to capture them (unobservable shocks)\n\nWe can use time-fixed effects to capture them: \\[ y_{i,t} = a + a_t +  b x_{i,t}\\]\nAnalysis is very similar to individual fixed effects\n\n\n\n\n\n\nWe can capture time heterogeneity and individual heterogeneity at the same time. \\[ y_{i,t} = a + a_i + a_t +  b x_{i,t}\\]\nMore of it soon.\n\n\n\n\n\n\nProblem with fixed effect model:\n\neach individual has a unique fixed effect\nit is impossible to predict it from other characteristics\n\n… and to compare an individual’s fixed effect to the predicted value\n\n\nSolution:\n\ninstead of assuming that specific effect is completely free, constrain it to follow a distribution: \\[y_{i,t} = \\alpha + \\beta x_{i,t} + \\epsilon_{i,t}\\] \\[\\epsilon_{i,t} = \\epsilon_i + \\epsilon_t + \\epsilon\\]\nwhere \\(\\epsilon_{i}\\), \\(\\epsilon_t\\) and \\(\\epsilon\\) are random variables with usual normality assumptions\n\n\n\n\n\n\n\nComposed coefficients: (coefficients can also be heterogenous in both dimension)\n\\[y_{i,t} = \\alpha_i + \\alpha_t + (\\beta_i + \\beta_t) x_{i,t} + \\epsilon_{i,t}\\]\nRandom coefficients …\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetup:\n\nPopulation \\(i\\in[1,I]\\)\nWe follow the whole population at two successive dates \\(t_1\\) and \\(t_2\\).\nWe measure outcome \\(y\\)\nIndividuals in group \\(\\mathcal{G}_T\\) receive treatment \\(T\\)\nHow do we measure the effect of the treatment?\n\nExamples\n\ntutoring at school (afternoon lessons)\n\n\\(y\\): final grade\ndates: beginning (\\(t_1\\)), end of year (\\(t_2\\))\n\\(T_{i}\\) whether subject received afternoon sessions.\n\n\n\n\n\nGaphical summary:\n\n\n\n\n\n\n\nWhat we want:\n\nAverage change over time in the outcome variable for the treatment group,\nCompare with average change over time for the control group\n\nIdea: regress simultaneously \\[\\forall i \\in \\mathcal{G}\\_T, \\quad y_{i,2} - y_{i,1} = \\alpha + \\beta x_{i,t} +  \\epsilon_{i,t}\\] \\[\\forall i \\notin \\mathcal{G}\\_t, \\quad y_{i,2} - y_{i,1} = \\alpha + \\delta + \\beta x_{i,t} + \\epsilon_{i,t}\\]\nHypotheses:\n\nequal trend (\\(\\alpha\\) is the same in both groups)\nsame effect of all other variables (\\(\\beta\\) is the same)\n\\(\\epsilon_{i,t}\\) normally distributed, independent, etc….\n\\(x_{i,t}\\): (controls) other variables that might explain differences in learning speed\n\nmust be independent from \\(\\epsilon\\) and \\(T\\)\n\n\n\n\n\n\n\n\nUsing Panel data: \\[y_{i,t} = \\beta_{t} + \\delta T_{i} + \\beta x_{i,t} + \\epsilon_{i,t}\\] or using time dummies: \\[y_{i,t} = \\underbrace{\\beta_1 1_{t=1} + \\beta_2 1_{t=2}}\\_{\\text{time fixed effects}} + \\delta T_{i} + \\epsilon_{i,t}\\]\nBy construction the diff in diff is directly given by \\(\\delta\\)\n\nconvince yourself: the effect of time, is completely captured by the fixed effect\n\nThis specification allows for an average change over time that is the same for the two groups\n\n\n\n\n\n\nWe can do better:\n\nimagine we follow the population at many dates\nsome receive the treatment at \\(t=1\\), some at \\(t=2\\), etc…\nsuppose there is unobserved heterogeneity\n\nCode up the treatment: \\(T_{i,t}\\) if treatment was received before \\(t-1\\)\nIf we don’t take unobserved heterogeneity, we might get completely wrong results.\nSolution:\n\nuse time-fixed effect: to capture common trend\nuse individuals indicators: to capture individual heterogeneity\n\nYou might implement a specification like: \\[y_{i,t} = a_{i} + a_t + \\delta T_{i,t} + \\beta x_{i,t} + \\epsilon_{i,t}\\]\n\n\n\n\n\n\nWith linearmodels (example):\n\nindividual fixed effects: invest ~ 1 + value + capital + EntityEffects\ntime fixed effects: invest ~ 1 + value + capital + TimeEffects\nboth invest ~ 1 + value + capital + EntityEffects + TimeEffects\n\nRegress with PanelOLS\n\nmathematically equivalent to OLS but more efficient"
  },
  {
    "objectID": "session_7/graphs/Untitled1.html",
    "href": "session_7/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_7/graphs/inference.html",
    "href": "session_7/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_6/graphs/Untitled1.html",
    "href": "session_6/graphs/Untitled1.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nimport statsmodels.api as sm\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      count\n      45.000000\n      45.000000\n      45.000000\n    \n    \n      mean\n      41.866667\n      52.555556\n      47.688889\n    \n    \n      std\n      24.435072\n      29.760831\n      31.510332\n    \n    \n      min\n      7.000000\n      7.000000\n      3.000000\n    \n    \n      25%\n      21.000000\n      26.000000\n      16.000000\n    \n    \n      50%\n      42.000000\n      45.000000\n      41.000000\n    \n    \n      75%\n      64.000000\n      84.000000\n      81.000000\n    \n    \n      max\n      81.000000\n      100.000000\n      97.000000\n    \n  \n\n\n\n\n\ndf.cov()\n\n\n\n\n\n  \n    \n      \n      income\n      education\n      prestige\n    \n  \n  \n    \n      income\n      597.072727\n      526.871212\n      645.071212\n    \n    \n      education\n      526.871212\n      885.707071\n      798.904040\n    \n    \n      prestige\n      645.071212\n      798.904040\n      992.901010\n    \n  \n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.figure(figsize=(8,6))\nplt.plot(df['education'],df['income'],'o')\nplt.grid()\nplt.xlabel(\"x (Education)\")\nplt.ylabel(\"y (Income)\")\nplt.savefig(\"data_description.png\")\n\n\n\n\n\nfor i in [1,2,3]:\n    xvec = np.linspace(10,100)\n\n    plt.figure(figsize=(12,8))\n    plt.plot(df['education'],df['income'],'o')\n\n    plt.plot(xvec, xvec * 0 + 50)\n    if i>=2:\n        plt.plot(xvec, xvec )\n    if i>=3:\n        plt.plot(xvec,  90- 0.6*xvec )\n\n    plt.grid()\n    plt.xlabel(\"x (Education)\")\n    plt.ylabel(\"y (Income)\")\n    plt.savefig(f\"which_line_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nfrom ipywidgets import interact\n\n\nimport matplotlib.patches as patches\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nplt.vlines(x, y+h, y, color='red')\n\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"error_0.png\")\n\n\n\n\n\nplt.vlines?\n\n\nSignature:\nplt.vlines(\n    x,\n    ymin,\n    ymax,\n    colors=None,\n    linestyles='solid',\n    label='',\n    *,\n    data=None,\n    **kwargs,\n)\nDocstring:\nPlot vertical lines.\nPlot vertical lines at each *x* from *ymin* to *ymax*.\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have same length.\ncolors : list of colors, default: :rc:`lines.color`\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, optional\nlabel : str, default: ''\nReturns\n-------\n`~matplotlib.collections.LineCollection`\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.LineCollection` properties.\nSee Also\n--------\nhlines : horizontal lines\naxvline: vertical line across the axes\nNotes\n-----\n.. note::\n    In addition to the above described arguments, this function can take\n    a *data* keyword argument. If such a *data* argument is given,\n    the following arguments can also be string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n    *x*, *ymin*, *ymax*, *colors*.\n    Objects passed as **data** must support item access (``data[s]``) and\n    membership test (``s in data``).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\na = 0.1\nb = 1.0\nind = 23\n\n\napprox =  a + b*xvec\n\n# Create figure and axes\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\nplt.plot(df['education'],df['income'],'o')\nplt.plot(xvec, approx, color='red')\n\nx, y = df['education'][ind], df['income'][ind]\nplt.plot(x, y, 'o', color='red' )\np = a+b*x\nplt.grid(True)\nh = abs(p-y)\nif p-y>0:\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n    ax.add_patch(rect)\n    \nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.savefig(f\"errors_{1}.png\")\n\n\n\n\n\ndef L(a,b):\n    Δ = a + b*df['education'] - df['income']\n    return (Δ**2).sum()\n\n\na = 0.1\nb = 0.8\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_2.png\")\n\n\n\n\n\na = 90\nb = -0.6\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_3.png\")\n\n\n\n\n\nimport scipy.optimize\n\n\nscipy.optimize.minimize(lambda x: L(x[0], x[1]),np.array([0.5, 0.5]))\n\n      fun: 12480.970174488397\n hess_inv: array([[ 7.14169839e-09, -3.91281920e-09],\n       [-3.91281920e-09,  2.46663613e-09]])\n      jac: array([0.00024414, 0.00012207])\n  message: 'Desired error not necessarily achieved due to precision loss.'\n     nfev: 57\n      nit: 7\n     njev: 19\n   status: 2\n  success: False\n        x: array([10.60350224,  0.59485938])\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red')\n\nplt.grid(True)\nfor ind in range(df.shape[0]):\n    \n    x, y = df['education'][ind], df['income'][ind]\n    p = a+b*x\n\n    h = abs(p-y)\n    if p-y>0:\n        # Create a Rectangle patch\n        rect = patches.Rectangle((x,y),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\n    else:\n        rect = patches.Rectangle((x,y-h),h,h,linewidth=1, color='red', fill=True, alpha=0.05)\n        ax.add_patch(rect)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"errors_4.png\")\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  a + b*xvec\n\n\n# plt.figure(figsize=(8,6))\nfig,ax = plt.subplots(1,figsize=(12,8))\n\n\nplt.plot(df['education'],df['income'],'o', label=f\"L({a,b})={L(a,b)}\")\nplt.plot(xvec, approx, color='red', alpha=0.5)\n\nplt.plot(60, a + b*60, 'o', color='red',)\n\nprint(a+b*60)\nplt.xlim(0,140)\nplt.ylim(0,100)\nplt.legend(loc='upper right')\nplt.savefig(f\"prediction.png\")\n\n45.4\n\n\n\n\n\n\na = 10\nb = 0.59\n\napprox =  (a + b*df['education'] - df['income'])\n\nplt.figure(figsize=(12,6))\n\nplt.subplot(121)\nplt.plot(approx)\nplt.grid(False)\nplt.title(\"Residuals\")\n\n\nplt.subplot(122)\ndistplot(approx)\nplt.title(\"Distribution of residuals\")\nplt.grid()\n\nplt.savefig(\"residuals.png\")\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n\n\n\n\n(a + b*df['education'] - df['income']).std()\n\n16.842782676352154\n\n\n\n\n\n/home/pablo/.local/opt/miniconda/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n\n\n<AxesSubplot:ylabel='Density'>\n\n\n\n\n\n\nfrom scipy.stats import f\n\n\nf(0.3)\n\nTypeError: _parse_args() missing 1 required positional argument: 'dfd'\n\n\n\nnp.rand\n\n\nK = 100\nxvec = np.linspace(0,1,K)\ne1 = np.random.randn(K)*0.1\nyvec = 0.1 + xvec*0.4 + e1\ne2 = np.random.randn(K)*0.05\nyvec2 = 0.1 + xvec*(xvec-1)/2 + e2\ne3 = np.random.randn(K)*xvec/2\nyvec3 = 0.1 + xvec + e3\n\nyvec4 = 0.1 + np.sin(xvec*6) + np.random.randn(K)*xvec/2\n\n\nfrom dolo.numeric.processes import VAR1\n\n\nsim = VAR1( ρ=0.8, Σ=0.001).simulate(N=1,T=100)\nyvec4 = 0.1 + xvec*0.4 + sim.ravel()\n\n\nplt.figure(figsize=(18,6))\nplt.subplot(241)\nplt.plot(xvec, yvec,'o')\nplt.plot(xvec, 0.1 + xvec*0.4 )\nplt.ylabel(\"Series\")\nplt.title(\"white noise\")\nplt.subplot(242)\nplt.plot(xvec, yvec2, 'o')\nplt.plot(xvec, yvec2*0)\nplt.title('nonlinear')\nplt.subplot(243)\nplt.plot(xvec, yvec3,'o')\nplt.plot(xvec, 0.1 + xvec)\nplt.title('heteroskedastic')\nplt.subplot(244)\nplt.plot(xvec, yvec4,'o')\nplt.plot(xvec, xvec*0.6)\n\nplt.title('correlated')\n\n\nplt.subplot(245)\nplt.plot(xvec, e1,'o')\nplt.ylabel(\"Residuals\")\nplt.subplot(246)\nplt.plot(xvec, yvec2-0.075, 'o')\n\nplt.subplot(247)\nplt.plot(xvec, e3,'o')\nplt.subplot(248)\nplt.plot(xvec, sim.ravel(),'o')\n\nplt.tight_layout()\n\nplt.savefig(\"residuals_circus.png\")"
  },
  {
    "objectID": "session_6/graphs/inference.html",
    "href": "session_6/graphs/inference.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_dataset(μ1, μ2, α, β, σ, N=10):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    return pd.DataFrame({'x': xvec, 'y': yvec})\n\n\ndf = generate_dataset(0.0, 1.0, 0.1, 0.8, 0.1)\n\n\nplt.plot(df['x'], df['y'], 'o')\nplt.grid()\n\n\n\n\n\ndef plot_distribution(α, β, σ, N=100000, μ1=0.0, μ2=1.0):\n    xvec = np.random.uniform(μ1, μ2, N)\n    yvec = α + β*xvec + np.random.normal(size=N)*σ\n    plt.plot(xvec, yvec, '.r', alpha=0.005)\n    plt.plot(xvec, α + β*xvec, color='black')\n\n# missing ridge line\n\n\nimport statsmodels\n\n\nμ1 = 0\nμ2 = 1.0\nα = 0.1\nβ = 0.8\nσ = 0.2\nN = 20\nK = 1000\n\n\nimport statsmodels.formula.api as smf\n\n\ndf = generate_dataset(μ1, μ2, α, β, σ, N=N)\n\n\nres = smf.ols(formula='y ~ x + 1', data=df).fit()\nparams = res.params\nαhat = params['Intercept']\nβhat = params['x']\nσhat = res.resid.std()\n\n\nres.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:            y          R-squared:             0.692\n\n\n  Model:                   OLS         Adj. R-squared:        0.675\n\n\n  Method:             Least Squares    F-statistic:           40.48\n\n\n  Date:             Tue, 26 Jan 2021   Prob (F-statistic): 5.41e-06\n\n\n  Time:                 04:02:36       Log-Likelihood:       7.6662\n\n\n  No. Observations:          20        AIC:                  -11.33\n\n\n  Df Residuals:              18        BIC:                  -9.341\n\n\n  Df Model:                   1                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     0.1210     0.077     1.565  0.135    -0.041     0.283\n\n\n  x             0.7941     0.125     6.362  0.000     0.532     1.056\n\n\n\n\n  Omnibus:        1.410   Durbin-Watson:         1.507\n\n\n  Prob(Omnibus):  0.494   Jarque-Bera (JB):      0.890\n\n\n  Skew:          -0.081   Prob(JB):              0.641\n\n\n  Kurtosis:       1.979   Cond. No.               4.20\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nres.predict(df['x'])\n\n0     0.326200\n1     0.211704\n2     0.798819\n3     0.603306\n4     0.573319\n5     0.823919\n6     0.740622\n7     0.503227\n8     0.292622\n9     0.489566\n10    0.138720\n11    0.355157\n12    0.594171\n13    0.883917\n14    0.266229\n15    0.827021\n16    0.912376\n17    0.163088\n18    0.684858\n19    0.732782\ndtype: float64\n\n\n\nfor i in [1,2,3]:\n    \n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {α:.2f} + {β:.2f} x + {σ:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n\n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    if i>=3:\n        plt.plot(df['x'], res.predict(), label=f'$\\hat{{α}}={αhat:.2f}; \\hat{{β}}={βhat:.2f}$')\n        plt.legend(loc='lower right')\n    plt.title(\"Random Draw\")\n    plt.grid()\n    \n    plt.savefig(f\"regression_uncertainty_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\nimport scipy.stats\n\n\ndatasets = [generate_dataset(μ1, μ2, αhat, βhat, σhat, N=N) for i in range(K)]\nall_params = [smf.ols(formula='x ~ y + 1', data=df).fit() for df in datasets]\nαvec = np.array( [e.params['Intercept'] for e in all_params] )\nβvec = np.array( [e.params['y'] for e in all_params] )\n\n\ngkd = scipy.stats.kde.gaussian_kde(βvec)\n\n\nfor i in [1,2,3,4,5,6,7,8,9,10,100]:\n\n    fig = plt.figure(figsize=(10,14))\n    plt.subplot(311)\n    plot_distribution(0.1, 0.8, 0.2)\n    plt.grid()\n    plt.title(f\"True Distribution: $y = {αhat:.2f} + {βhat:.2f} x + {σhat:.2f} u$\")\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    \n    plt.subplot(312)\n    plt.xlim(0,1)\n    plt.ylim(-0.5, 1.5)\n    df = datasets[i]\n    if i>=2:\n        plt.plot(df['x'], df['y'], 'o')\n    plt.title(\"Random Draw\")\n    plt.grid()\n\n    plt.subplot(313)\n    if i==3:\n        plt.plot(βvec[i], βvec[i]*0, 'o')\n    if i>4:\n        plt.plot(βvec[3:i], βvec[3:i]*0, 'o')\n    if i>10:\n        xx = np.linspace(0.2, 1.4, 10000)\n        plt.plot( βvec, gkd.pdf(βvec), '.')\n    plt.title(\"Distribution of β\")\n    plt.xlim(0.2, 1.4)\n    plt.ylim(-0.1, 4)\n    plt.grid()\n\n    plt.tight_layout()\n\n    plt.savefig(f\"random_estimates_{i}.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot( βvec, βvec*0, 'o')"
  },
  {
    "objectID": "session_6/machine_learning_regressions_elements.html",
    "href": "session_6/machine_learning_regressions_elements.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Objectives:\n\ntrain a model with sklearn\nperform a validation test\n\n\n\nImport the diabetes dataset from sklearn. Describe it.\n\nfrom sklearn.datasets import load_diabetes\ndata = load_diabetes()\nX = data['data']\nY = data['target']\n\n\nprint(data['DESCR'])\n\n.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - age     age in years\n      - sex\n      - bmi     body mass index\n      - bp      average blood pressure\n      - s1      tc, T-Cells (a type of white blood cells)\n      - s2      ldl, low-density lipoproteins\n      - s3      hdl, high-density lipoproteins\n      - s4      tch, thyroid stimulating hormone\n      - s5      ltg, lamotrigine\n      - s6      glu, blood sugar level\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttps://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n\n\nSplit the dataset into a training set (70%) and a test set (30%)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3)\n\n\nX_train.shape\n\n(309, 10)\n\n\n\nX_test.shape\n\n(133, 10)\n\n\n\n133/(133+309)\n\n0.3009049773755656\n\n\nFeatures are already “centered and scaled”: no need to renormalize them\nTrain a linear model (with intercept) on the training set\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# by default there is an intercept (check the doc: default value for fit_intercept is True)\n\n\nLinearRegression?\n\n\nInit signature:\nLinearRegression(\n    *,\n    fit_intercept=True,\n    normalize=False,\n    copy_X=True,\n    n_jobs=None,\n    positive=False,\n)\nDocstring:     \nOrdinary least squares Linear Regression.\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.\nParameters\n----------\nfit_intercept : bool, default=True\n    Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered).\nnormalize : bool, default=False\n    This parameter is ignored when ``fit_intercept`` is set to False.\n    If True, the regressors X will be normalized before regression by\n    subtracting the mean and dividing by the l2-norm.\n    If you wish to standardize, please use\n    :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit``\n    on an estimator with ``normalize=False``.\ncopy_X : bool, default=True\n    If True, X will be copied; else, it may be overwritten.\nn_jobs : int, default=None\n    The number of jobs to use for the computation. This will only provide\n    speedup for n_targets > 1 and sufficient large problems.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\npositive : bool, default=False\n    When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n    .. versionadded:: 0.24\nAttributes\n----------\ncoef_ : array of shape (n_features, ) or (n_targets, n_features)\n    Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features.\nrank_ : int\n    Rank of matrix `X`. Only available when `X` is dense.\nsingular_ : array of shape (min(X, y),)\n    Singular values of `X`. Only available when `X` is dense.\nintercept_ : float or array of shape (n_targets,)\n    Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`.\nSee Also\n--------\nRidge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.\nNotes\n-----\nFrom the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.\nExamples\n--------\n>>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n>>> # y = 1 * x_0 + 2 * x_1 + 3\n>>> y = np.dot(X, np.array([1, 2])) + 3\n>>> reg = LinearRegression().fit(X, y)\n>>> reg.score(X, y)\n1.0\n>>> reg.coef_\narray([1., 2.])\n>>> reg.intercept_\n3.0000...\n>>> reg.predict(np.array([[3, 5]]))\narray([16.])\nFile:           ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:           ABCMeta\nSubclasses:     \n\n\n\n\n\nmodel.fit(X_train, Y_train)\n\nLinearRegression()\n\n\n\nmodel.fit?\n\n\nSignature: model.fit(X, y, sample_weight=None)\nDocstring:\nFit linear model.\nParameters\n----------\nX : {array-like, sparse matrix} of shape (n_samples, n_features)\n    Training data\ny : array-like of shape (n_samples,) or (n_samples, n_targets)\n    Target values. Will be cast to X's dtype if necessary\nsample_weight : array-like of shape (n_samples,), default=None\n    Individual weights for each sample\n    .. versionadded:: 0.17\n       parameter *sample_weight* support to LinearRegression.\nReturns\n-------\nself : returns an instance of self.\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/linear_model/_base.py\nType:      method\n\n\n\n\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\n\npred = model.predict(X_test)\n\n\nY_test\n\narray([190., 225., 141., 281., 168.,  42., 116., 276., 281.,  51., 121.,\n       156., 163., 142., 187., 173.,  39., 229., 155., 332., 257., 261.,\n        42., 201., 103.,  47., 142., 172.,  71.,  96., 173., 127., 150.,\n       230., 185., 209.,  37.,  92., 235., 131.,  97.,  40., 279.,  97.,\n       245., 258., 102., 168.,  51., 248.,  88.,  91.,  58., 110., 308.,\n        88.,  60., 311., 246., 310., 214., 200., 220., 131.,  72.,  72.,\n       181.,  89., 163., 104.,  96.,  70., 217.,  55., 317., 259.,  50.,\n       118., 200.,  25., 124., 129., 179., 109.,  71., 102., 252., 189.,\n       190., 263., 174., 259., 111.,  85., 145.,  85., 252., 258., 274.,\n        83., 140., 196., 219., 200., 197.,  51.,  66.,  79., 275.,  78.,\n       257., 180., 202.,  71., 122., 136., 270.,  70., 146., 281., 114.,\n        59., 191.,  91.,  65., 143., 185., 243.,  53.,  99., 125., 139.,\n       292.])\n\n\n\nfrom matplotlib import pyplot as plt\n\n\nplt.plot(Y_test, pred,'o')\nplt.xlabel(\"True value\")\nplt.ylabel(\"Prediction\")\nplt.title(\"Out of sample test\")\n\nText(0.5, 1.0, 'Out of sample test')\n\n\n\n\n\n\nmodel.score(X_test, Y_test)\n\n0.5249868646449161\n\n\n\nmodel.score?\n\n\nSignature: model.score(X, y, sample_weight=None)\nDocstring:\nReturn the coefficient of determination :math:`R^2` of the\nprediction.\nThe coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`,\nwhere :math:`u` is the residual sum of squares ``((y_true - y_pred)\n** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true -\ny_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it\ncan be negative (because the model can be arbitrarily worse). A\nconstant model that always predicts the expected value of `y`,\ndisregarding the input features, would get a :math:`R^2` score of\n0.0.\nParameters\n----------\nX : array-like of shape (n_samples, n_features)\n    Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator.\ny : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    True values for `X`.\nsample_weight : array-like of shape (n_samples,), default=None\n    Sample weights.\nReturns\n-------\nscore : float\n    :math:`R^2` of ``self.predict(X)`` wrt. `y`.\nNotes\n-----\nThe :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).\nFile:      ~/.local/opt/miniconda/lib/python3.8/site-packages/sklearn/base.py\nType:      method\n\n\n\n\nShould we adjust the size of the test set? What would be the problem?\n\nfor values in [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]:\n\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=values)\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    print(f\"Test Set {values:.2f}% | Score: {score:.3f}\")\n\nTest Set 0.05% | Score: 0.427\nTest Set 0.10% | Score: 0.537\nTest Set 0.20% | Score: 0.558\nTest Set 0.30% | Score: 0.451\nTest Set 0.40% | Score: 0.513\nTest Set 0.50% | Score: 0.475\nTest Set 0.60% | Score: 0.488\nTest Set 0.70% | Score: 0.439\n\n\nThere is a tradeoff between: - a big test set: score more accurate, but the fitting is less accurate (more bias) - a small test set: score more volatile, but the fitting is more accurate (more variance)\nImplement \\(k\\)-fold model with \\(k=3\\).\n\nscores = []\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = Y[train_index], Y[test_index]\n    print(X_train.shape)\n\n    \n    model = LinearRegression()\n    model.fit(X_train, Y_train)\n    \n    score = model.score(X_test, Y_test)\n    \n    scores.append(score)\n    \n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test\n\n(294, 10)\n(295, 10)\n(295, 10)\n\n\n\nscores\n\n[0.4693057771290108, 0.48724993937707484, 0.5095525852352711]\n\n\n\nsum(scores)/3\n\n0.4887027672471189\n\n\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\ndata['feature_names']\n\n['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']\n\n\n\nimport pandas\ndf = pandas.DataFrame(X, columns=data['feature_names'])\ndf['target'] = data['target']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      age\n      sex\n      bmi\n      bp\n      s1\n      s2\n      s3\n      s4\n      s5\n      s6\n      target\n    \n  \n  \n    \n      0\n      0.038076\n      0.050680\n      0.061696\n      0.021872\n      -0.044223\n      -0.034821\n      -0.043401\n      -0.002592\n      0.019908\n      -0.017646\n      151.0\n    \n    \n      1\n      -0.001882\n      -0.044642\n      -0.051474\n      -0.026328\n      -0.008449\n      -0.019163\n      0.074412\n      -0.039493\n      -0.068330\n      -0.092204\n      75.0\n    \n    \n      2\n      0.085299\n      0.050680\n      0.044451\n      -0.005671\n      -0.045599\n      -0.034194\n      -0.032356\n      -0.002592\n      0.002864\n      -0.025930\n      141.0\n    \n    \n      3\n      -0.089063\n      -0.044642\n      -0.011595\n      -0.036656\n      0.012191\n      0.024991\n      -0.036038\n      0.034309\n      0.022692\n      -0.009362\n      206.0\n    \n    \n      4\n      0.005383\n      -0.044642\n      -0.036385\n      0.021872\n      0.003935\n      0.015596\n      0.008142\n      -0.002592\n      -0.031991\n      -0.046641\n      135.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      437\n      0.041708\n      0.050680\n      0.019662\n      0.059744\n      -0.005697\n      -0.002566\n      -0.028674\n      -0.002592\n      0.031193\n      0.007207\n      178.0\n    \n    \n      438\n      -0.005515\n      0.050680\n      -0.015906\n      -0.067642\n      0.049341\n      0.079165\n      -0.028674\n      0.034309\n      -0.018118\n      0.044485\n      104.0\n    \n    \n      439\n      0.041708\n      0.050680\n      -0.015906\n      0.017282\n      -0.037344\n      -0.013840\n      -0.024993\n      -0.011080\n      -0.046879\n      0.015491\n      132.0\n    \n    \n      440\n      -0.045472\n      -0.044642\n      0.039062\n      0.001215\n      0.016318\n      0.015283\n      -0.028674\n      0.026560\n      0.044528\n      -0.025930\n      220.0\n    \n    \n      441\n      -0.045472\n      -0.044642\n      -0.073030\n      -0.081414\n      0.083740\n      0.027809\n      0.173816\n      -0.039493\n      -0.004220\n      0.003064\n      57.0\n    \n  \n\n442 rows × 11 columns\n\n\n\n\nfrom statsmodels.formula import api\n\n\nols_model = api.ols('target ~ age + sex + bmi + bp + s1 + s2 + s3 + s4 + s5 + s6', df)\n\n\nresult = ols_model.fit()\n\n\nresult.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:         target        R-squared:             0.518\n\n\n  Model:                   OLS         Adj. R-squared:        0.507\n\n\n  Method:             Least Squares    F-statistic:           46.27\n\n\n  Date:             Wed, 16 Mar 2022   Prob (F-statistic): 3.83e-62\n\n\n  Time:                 11:59:29       Log-Likelihood:      -2386.0\n\n\n  No. Observations:         442        AIC:                   4794.\n\n\n  Df Residuals:             431        BIC:                   4839.\n\n\n  Df Model:                  10                                    \n\n\n  Covariance Type:      nonrobust                                  \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept   152.1335     2.576    59.061  0.000   147.071   157.196\n\n\n  age         -10.0122    59.749    -0.168  0.867  -127.448   107.424\n\n\n  sex        -239.8191    61.222    -3.917  0.000  -360.151  -119.488\n\n\n  bmi         519.8398    66.534     7.813  0.000   389.069   650.610\n\n\n  bp          324.3904    65.422     4.958  0.000   195.805   452.976\n\n\n  s1         -792.1842   416.684    -1.901  0.058 -1611.169    26.801\n\n\n  s2          476.7458   339.035     1.406  0.160  -189.621  1143.113\n\n\n  s3          101.0446   212.533     0.475  0.635  -316.685   518.774\n\n\n  s4          177.0642   161.476     1.097  0.273  -140.313   494.442\n\n\n  s5          751.2793   171.902     4.370  0.000   413.409  1089.150\n\n\n  s6           67.6254    65.984     1.025  0.306   -62.065   197.316\n\n\n\n\n  Omnibus:        1.506   Durbin-Watson:         2.029\n\n\n  Prob(Omnibus):  0.471   Jarque-Bera (JB):      1.404\n\n\n  Skew:           0.017   Prob(JB):              0.496\n\n\n  Kurtosis:       2.726   Cond. No.               227.\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\nImport the Boston House Price Dataset from sklearn. Describe it. Compute correlations.\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?\n\n\n\nSklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity. (bonus: use k-fold validation)\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "session_6/machine_learning_regressions.html",
    "href": "session_6/machine_learning_regressions.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Objectives:\n\ncreate a training set and a validation set\ntrain a model with sklearn\nperform a validation test\n\n\n\nImport the diabetes dataset from sklearn. Describe it.\nSplit the dataset into a training set (70%) and a test set (30%)\nTrain a linear model (with intercept) on the training set\nCompute the fitting score on the test set. (Bonus: compare with your own computation of \\(R^2\\))\nShould we adjust the size of the test set? What would be the problem?\nImplement \\(k\\)-fold model with \\(k=3\\).\nBonus: use statsmodels (or linearmodels) to estimate the same linear model on the full sample. Is it always a superior method?\n\n\n\nImport the Boston House Price Dataset from sklearn. Explore the data (description, correlations, histograms…)\nSplit the dataset into a training set (70%) and a test set (30%).\nTrain a lasso model to predict house prices. Compute the score on the test set.\nTrain a ridge model to predict house prices. Which one is better?\n(bonus) Use statsmodels to build a model predicting house prices. What is the problem?"
  },
  {
    "objectID": "session_9/pushups_3.html",
    "href": "session_9/pushups_3.html",
    "title": "Data-Based Economics",
    "section": "",
    "text": "Sklearn includes the Winsconsin breast cancer database. It associates medical outcomes for tumor observation, with several characteristics. Can a machine learn how to predict whether a cancer is benign or malignant ?\nImport the Breast Cancer Dataset from sklearn. Describe it.\nProperly train a linear logistic regression to predict cancer morbidity.\nUse k-fold validation to validate the model\nTry with other classifiers. Which one is best?"
  },
  {
    "objectID": "session_7/index.html#how-to-use-sklearn-for-regressions",
    "href": "session_7/index.html#how-to-use-sklearn-for-regressions",
    "title": "Introduction to Machine Learning",
    "section": "How to use sklearn for regressions",
    "text": "How to use sklearn for regressions"
  },
  {
    "objectID": "session_7/index.html#classification-problems",
    "href": "session_7/index.html#classification-problems",
    "title": "Introduction to Machine Learning",
    "section": "Classification Problems",
    "text": "Classification Problems"
  },
  {
    "objectID": "session_7/index.html#other-classifiers",
    "href": "session_7/index.html#other-classifiers",
    "title": "Introduction to Machine Learning (2)",
    "section": "Other Classifiers",
    "text": "Other Classifiers"
  },
  {
    "objectID": "session_7/index.html#classification-problem",
    "href": "session_7/index.html#classification-problem",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification problem",
    "text": "Classification problem\n\nBinary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values"
  },
  {
    "objectID": "session_7/index.html#logistic-regression",
    "href": "session_7/index.html#logistic-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "Logistic regression",
    "text": "Logistic regression\n\n\n\nGiven a regression model (a linear predictor)\n\n\\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\] - one can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid - The loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\] - This works for any regression model (LASSO, RIDGE, nonlinear…)"
  },
  {
    "objectID": "session_7/index.html#logistic-regression-1",
    "href": "session_7/index.html#logistic-regression-1",
    "title": "Introduction to Machine Learning (2)",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1."
  },
  {
    "objectID": "session_7/index.html#multinomial-regression",
    "href": "session_7/index.html#multinomial-regression",
    "title": "Introduction to Machine Learning (2)",
    "section": "Multinomial regression",
    "text": "Multinomial regression\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)"
  },
  {
    "objectID": "session_7/index.html#common-classification-algorithms",
    "href": "session_7/index.html#common-classification-algorithms",
    "title": "Introduction to Machine Learning (2)",
    "section": "Common classification algorithms",
    "text": "Common classification algorithms\nThere are many:\n\nLogistic Regression\nNaive Bayes Classifier\nNearest Distance\nneural networks (replace score in sigmoid by n.n.)\nDecision Trees\nSupport Vector Machines"
  },
  {
    "objectID": "session_7/index.html#nearest-distance",
    "href": "session_7/index.html#nearest-distance",
    "title": "Introduction to Machine Learning (2)",
    "section": "Nearest distance",
    "text": "Nearest distance\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset."
  },
  {
    "objectID": "session_7/index.html#decision-tree-random-forests",
    "href": "session_7/index.html#decision-tree-random-forests",
    "title": "Introduction to Machine Learning (2)",
    "section": "Decision Tree / Random Forests",
    "text": "Decision Tree / Random Forests\n\n\n\nDecision Tree\n\nrecursively find simple criteria to subdivide dataset\n\nProblems:\n\nGreedy: algorithm does not simplify branches\neasily overfits\n\nExtension : random tree forest\n\nuses several (randomly generated) trees to generate a prediction\nsolves the overfitting problem"
  },
  {
    "objectID": "session_7/index.html#support-vector-classification",
    "href": "session_7/index.html#support-vector-classification",
    "title": "Introduction to Machine Learning (2)",
    "section": "Support Vector Classification",
    "text": "Support Vector Classification\n\n\n\n\nSeparates data by one line (hyperplane).\n\nChooses the largest margin according to support vectors\n\nCan use a nonlinear kernel."
  },
  {
    "objectID": "session_7/index.html#all-these-algorithms-are-super-duper-easy-to-use",
    "href": "session_7/index.html#all-these-algorithms-are-super-duper-easy-to-use",
    "title": "Introduction to Machine Learning (2)",
    "section": "All these algorithms are super duper easy to use!",
    "text": "All these algorithms are super duper easy to use!\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n…\nfrom sklearn.svm import SVC\nclf = SVC(random_state=0)\n…\nfrom sklearn.linear_model import Ridge\nclf = Ridge(random_state=0)"
  },
  {
    "objectID": "session_7/index.html#validity-of-a-classification-algorithm",
    "href": "session_7/index.html#validity-of-a-classification-algorithm",
    "title": "Introduction to Machine Learning (2)",
    "section": "Validity of a classification algorithm",
    "text": "Validity of a classification algorithm\n\nIndependently of how the classification is made, its validity can be assessed with a similar procedure as in the regression.\nSeparate training set and test set\n\ndo not touch test set at all during the training\n\nCompute score: number of correctly identified categories\n\nnote that this is not the same as the loss function minimized by the training"
  },
  {
    "objectID": "session_7/index.html#classification-matrix",
    "href": "session_7/index.html#classification-matrix",
    "title": "Introduction to Machine Learning (2)",
    "section": "Classification matrix",
    "text": "Classification matrix\n\nFor binary classification, we focus on the classification matrix or confusion matrix.\n\n\n\n\nPredicted\n(0) Actual\n(1) Actual\n\n\n\n\n0\ntrue negatives (TN)\nfalse negatives (FN)\n\n\n1\nfalse positives (FP)\ntrue positives (TP)\n\n\n\n\nOverall accuracy: \\(\\frac{\\text{TN}+\\text{TP}}{\\text{total}}\\)\nSensitivity: \\(\\frac{TP}{FP+TP}\\)\nFalse Positive Rate (FPR): \\(\\frac{FP}{TN+FP}\\)\nIn some cases, sensitivity is the actual objective, at the expense of lower FPR\n\nexample: fraud detection\n\nExample:\n\nfacial recognition by London police: 2% accuracy\nfacial recognition by South Wales police: 9% accuracy\na success?"
  },
  {
    "objectID": "session_7/index.html#confusion-matrix-with-sklearn",
    "href": "session_7/index.html#confusion-matrix-with-sklearn",
    "title": "Introduction to Machine Learning (2)",
    "section": "Confusion matrix with sklearn",
    "text": "Confusion matrix with sklearn\n\nPredict on the test set:\n\ny_pred = model.predict(x_test)\n\nCompute confusion matrix:\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"
  },
  {
    "objectID": "session_7/index.html#how-to-choose-the-validation-set",
    "href": "session_7/index.html#how-to-choose-the-validation-set",
    "title": "Introduction to Machine Learning (2)",
    "section": "How to choose the validation set?",
    "text": "How to choose the validation set?\n\nHoldout validation approach: keeps x% of the data for the training, (100-x)% for the test\n\nsmall dataset: 90-10\nbig data set: 70-30 (we can afford to waste more training data for the test)\n\nProblem: are we sure the validation size is correct? Are the results determined by an (un-) lucky draw ?\n\n\n\n\nSolution: \\(k\\)-fold validation\n\nsplit dataset randomly in \\(K\\) subsets of equal size \\(S_1, ... S_K\\)\nuse subset \\(S_i\\) as test set, the rest as training set, compute the score\ncompare the scores obtained for all \\(i\\in[1,K]\\)\n\naverage them"
  },
  {
    "objectID": "session_7/index.html#how-to-implement-k-fold-validation-with-sklearn",
    "href": "session_7/index.html#how-to-implement-k-fold-validation-with-sklearn",
    "title": "Introduction to Machine Learning (2)",
    "section": "How to implement \\(k\\)-fold validation with sklearn",
    "text": "How to implement \\(k\\)-fold validation with sklearn\n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=10)\n\nfor train_index, test_index in kf.split(X):\n   X_train, X_test = X[train_index], X[test_index]\n   y_train, y_test = y[train_index], y[test_index]\n\n   ## train a model in X_train, y_train\n   ## test it on X_test, y_test"
  },
  {
    "objectID": "session_7/index.html#all-these-algorithms-are-super-easy-to-use",
    "href": "session_7/index.html#all-these-algorithms-are-super-easy-to-use",
    "title": "Introduction to Machine Learning (2)",
    "section": "All these algorithms are super easy to use!",
    "text": "All these algorithms are super easy to use!\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n…\nfrom sklearn.svm import SVC\nclf = SVC(random_state=0)\n…\nfrom sklearn.linear_model import Ridge\nclf = Ridge(random_state=0)"
  },
  {
    "objectID": "session_6/index.html#classification-problem",
    "href": "session_6/index.html#classification-problem",
    "title": "Introduction to Machine Learning",
    "section": "Classification problem",
    "text": "Classification problem\n\nBinary Classification\n\nGoal is to make a prediction \\(c_n = f(x_{1,1}, ... x_{k,n})\\) …\n…where \\(c_i\\) is a binary variable (\\(\\in\\{0,1\\}\\))\n… and \\((x_{i,n})_k\\), \\(k\\) different features to predict \\(c_n\\)\n\nMulticategory Classification\n\nThe variable to predict takes values in a non ordered set with \\(p\\) different values"
  },
  {
    "objectID": "session_6/index.html#logistic-regression",
    "href": "session_6/index.html#logistic-regression",
    "title": "Introduction to Machine Learning",
    "section": "Logistic regression",
    "text": "Logistic regression\n\n\n\nGiven a regression model (a linear predictor)\n\n\\[ a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n \\]\n\none can build a classification model: \\[ f(x_1, ..., x_n) = \\sigma( a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n )\\] where \\(\\sigma(x)=\\frac{1}{1+\\exp(-x)}\\) is the logistic function a.k.a. sigmoid\nThe loss function to minimize is: \\[L() = \\sum_n (c_n - \\sigma( a_{0} + a_1 x_{1,n} + a_2 x_{2,n} + \\cdots a_k x_{k,n} ) )^2\\]\nThis works for any regression model (LASSO, RIDGE, nonlinear…)"
  },
  {
    "objectID": "session_6/index.html#logistic-regression-1",
    "href": "session_6/index.html#logistic-regression-1",
    "title": "Introduction to Machine Learning",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nThe linear model predicts an intensity/score (not a category) \\[ f(x_1, ..., x_n) = \\sigma( \\underbrace{a_0 + a_1 x_1 + a_2 x_2 + \\cdots a_n x_n }_{\\text{score}})\\]\nTo make a prediction: round to 0 or 1."
  },
  {
    "objectID": "session_6/index.html#multinomial-regression",
    "href": "session_6/index.html#multinomial-regression",
    "title": "Introduction to Machine Learning",
    "section": "Multinomial regression",
    "text": "Multinomial regression\n\nIf there are \\(P\\) categories to predict:\n\nbuild a linear predictor \\(f_p\\) for each category \\(p\\)\nlinear predictor is also called score\n\nTo predict:\n\nevaluate the score of all categories\nchoose the one with highest score\n\nTo train the model:\n\ntrain separately all scores (works for any predictor, not just linear)\n… there are more subtle approaches (not here)"
  },
  {
    "objectID": "session_6/index.html#common-classification-algorithms",
    "href": "session_6/index.html#common-classification-algorithms",
    "title": "Introduction to Machine Learning",
    "section": "Common classification algorithms",
    "text": "Common classification algorithms\nThere are many:\n\nLogistic Regression\nNaive Bayes Classifier\nNearest Distance\nneural networks (replace score in sigmoid by n.n.)\nDecision Trees\nSupport Vector Machines"
  },
  {
    "objectID": "session_6/index.html#nearest-distance",
    "href": "session_6/index.html#nearest-distance",
    "title": "Introduction to Machine Learning",
    "section": "Nearest distance",
    "text": "Nearest distance\n\n\n\nIdea:\n\nin order to predict category \\(c\\) corresponding to \\(x\\) find the closest point \\(x_0\\) in the training set\nAssign to \\(x\\) the same category as \\(x_0\\)\n\nBut this would be very susceptible to noise\n\n\n\nAmended idea: \\(k-nearest\\) neighbours\n\nlook for the \\(k\\) points closest to \\(x\\)\nlabel \\(x\\) with the same category as the majority of them\n\nRemark: this algorithm uses Euclidean distance. This is why it is important to normalize the dataset."
  },
  {
    "objectID": "session_6/index.html#decision-tree-random-forests",
    "href": "session_6/index.html#decision-tree-random-forests",
    "title": "Introduction to Machine Learning",
    "section": "Decision Tree / Random Forests",
    "text": "Decision Tree / Random Forests\n\n\n\n\nDecision Tree\n\nrecursively find simple criteria to subdivide dataset\n\nProblems:\n\nGreedy: algorithm does not simplify branches\neasily overfits\n\nExtension : random tree forest\n\nuses several (randomly generated) trees to generate a prediction\nsolves the overfitting problem"
  },
  {
    "objectID": "session_6/index.html#support-vector-classification",
    "href": "session_6/index.html#support-vector-classification",
    "title": "Introduction to Machine Learning",
    "section": "Support Vector Classification",
    "text": "Support Vector Classification\n\n\n\n\nSeparates data by one line (hyperplane).\n\nChooses the largest margin according to support vectors\n\nCan use a nonlinear kernel.\n\n\n\n\n\n\nF\n\n\n\n\n\nF\n\n\n\n\n\nF"
  },
  {
    "objectID": "session_6/index.html#all-these-algorithms-are-super-easy-to-use",
    "href": "session_6/index.html#all-these-algorithms-are-super-easy-to-use",
    "title": "Introduction to Machine Learning",
    "section": "All these algorithms are super easy to use!",
    "text": "All these algorithms are super easy to use!\n\nDecision Tree:\n\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\n\n\nSupport Vector Machine\n\nfrom sklearn.svm import SVC\nclf = SVC(random_state=0)\n\n\n\nRidge Regression:\n\nfrom sklearn.linear_model import Ridge\nclf = Ridge(random_state=0)"
  },
  {
    "objectID": "session_6/index.html#validity-of-a-classification-algorithm",
    "href": "session_6/index.html#validity-of-a-classification-algorithm",
    "title": "Introduction to Machine Learning",
    "section": "Validity of a classification algorithm",
    "text": "Validity of a classification algorithm\n\nIndependently of how the classification is made, its validity can be assessed with a similar procedure as in the regression.\nSeparate training set and test set\n\ndo not touch test set at all during the training\n\nCompute score: number of correctly identified categories\n\nnote that it is different from loss function minimized during the training"
  },
  {
    "objectID": "session_6/index.html#classification-matrix",
    "href": "session_6/index.html#classification-matrix",
    "title": "Introduction to Machine Learning",
    "section": "Classification matrix",
    "text": "Classification matrix\n\nFor binary classification, we focus on the classification matrix or confusion matrix.\n\n\n\n\nPredicted\n(0) Actual\n(1) Actual\n\n\n\n\n0\ntrue negatives (TN)\nfalse negatives (FN)\n\n\n1\nfalse positives (FP)\ntrue positives (TP)\n\n\n\n\n\n\nOverall accuracy: \\(\\frac{\\text{TN}+\\text{TP}}{\\text{total}}\\)\nSensitivity: \\(\\frac{TP}{FP+TP}\\)\nFalse Positive Rate (FPR): \\(\\frac{FP}{TN+FP}\\)\n\nThe relevant statistics depends on the application.\n\n\n\nExample:\n\nfacial recognition by London police: 2% accuracy\nfacial recognition by South Wales police: 9% accuracy\na success?"
  },
  {
    "objectID": "session_6/index.html#confusion-matrix-with-sklearn",
    "href": "session_6/index.html#confusion-matrix-with-sklearn",
    "title": "Introduction to Machine Learning",
    "section": "Confusion matrix with sklearn",
    "text": "Confusion matrix with sklearn\n\nPredict on the test set:\n\ny_pred = model.predict(x_test)\n\nCompute confusion matrix:\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"
  }
]